module Plasmacore

class Component
  # Base class of all GUI elements.
  PROPERTIES
    bounds     : Box

    fixed_size : XY   # A `0` in any dimension indicates no fixed size in that dimension.

    parent     : Component
    children   : Component[]

  METHODS
    method init( bounds )

    method init( fixed_size )
      bounds = Box( fixed_size )

    method add( child:Component, options=null:PropertyTable )->this
      ensure children
      children.add( child )
      child.parent = this
      request_layout
      return this

    method after( e:DrawEvent )

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:UpdateEvent )

    method dispatch( e:DrawEvent )
      if (children)
        forEach (child in children) child.handle( e )
      endIf

    method dispatch( e:KeyEvent )
      if (children)
        forEach (child in children) child.handle( e )
      endIf

    method dispatch( e:PointerEvent )
      if (children)
        forEach (child in children) child.handle( e )
      endIf

    method dispatch( e:UpdateEvent )
      if (children)
        forEach (child in children) child.handle( e )
      endIf

    method handle( e:DrawEvent )
      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:UpdateEvent )
      # Overridden in Panel
      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )

    method on( e:DrawEvent )
      Display.outline( bounds, Color.WHITE )

    method on( e:KeyEvent )

    method on( e:PointerEvent )

    method on( e:UpdateEvent )

    method perform_layout( bounds )
      if (children)
        forEach (child in children) child.perform_layout( child.bounds )
      endIf

    method remove( child:Component )->Component
      if (children) return children.remove( child )
      else          return child

    method request_layout
      if (parent) parent.request_layout

    method set_fixed_size( new_size:XY )->this
      if (new_size != fixed_size)
        @fixed_size = new_size
        request_layout
      endIf
      return this

    method update_layout
      if (parent) parent.update_layout

    method update_layout( new_bounds:Box )
      if (new_bounds != bounds)
        bounds = new_bounds
        request_layout
      endIf
      update_layout

endClass

