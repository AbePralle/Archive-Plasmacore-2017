module Plasmacore

class Box( position:XY, size:XY ) [compound]
  GLOBAL METHODS
    method create( x:Real64, y:Real64, width:Real64, height:Real64 )->Box
      return Box( XY(x,y), XY(width,height) )

    method create( width:Real64, height:Real64 )->Box
      return Box( XY(0,0), XY(width,height) )

    method create( x:Real64, y:Real64, size:XY )->Box
      return Box( XY(x,y), size )

    method create( position:XY, width:Real64, height:Real64 )->Box
      return Box( position, XY(width,height) )

    method create( size:XY )->Box
      return Box( XY(0,0), size )

    method from_corners( top_left:XY, bottom_right:XY )->Box
      return Box( top_left, bottom_right - top_left )

  METHODS
    method positioned_within( enclosing:Box, anchor=Anchor.CENTER:Anchor )->Box
      return Box( enclosing.position + anchor.position * (enclosing.size-size), size )

    method bottom_left->XY
      return (position + XY(0,size.y))

    method bottom_right->XY
      return (position + size)

    method cropped( delta:Real64 )->Box
      return Box( XY(x+delta,y+delta), XY(width-(delta+delta),height-(delta+delta)) )

    method cropped( left:Real64, top:Real64, right:Real64, bottom:Real64 )->Box
      return Box( XY(x+left,y+top), XY(width-(left+right),height-(top+bottom)) )

    method height->Real64 [macro]
      this.size.y

    method to->String
      return "[@$,$ $x$]" (x,y,width,height)

    method top_left->XY [macro]
      position

    method top_right->XY
      return (position + XY(size.x,0))

    method width->Real64 [macro]
      this.size.x

    method x->Real64 [macro]
      this.position.x

    method y->Real64 [macro]
      this.position.y

    method x1->Real64 [macro]
      this.position.x

    method y1->Real64 [macro]
      this.position.y

    method x2->Real64
      return this.position.x + this.size.x

    method y2->Real64
      return this.position.y + this.size.y

endClass
