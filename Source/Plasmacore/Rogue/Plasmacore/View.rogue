module Plasmacore
using  Plasmacore::UI

class View
  PROPERTIES
    state     = ViewState(this)

    display   : Display
    is_active : Logical

    ui        = Layout() : Component

  METHODS
    method init( display=Display )

    method activate

    method add( child:Component, options=null:PropertyTable )->this
      ui.add( child, options )
      return this

    method change_state( new_state:ViewState )
      state = new_state
      state.view = this

    method handle( e:DrawEvent )
      if (not is_active) is_active = true; activate

      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:KeyEvent )
      if (not is_active) is_active = true; activate

      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      if (not is_active) is_active = true; activate

      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:UpdateEvent )
      if (not is_active) is_active = true; activate

      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method on( e:DrawEvent )
      display.clear( Color.BLUE )

    method on( e:KeyEvent )

    method on( e:PointerEvent )

    method on( e:UpdateEvent )

    method after( e:DrawEvent )

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:UpdateEvent )
endClass

