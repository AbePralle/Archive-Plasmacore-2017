module Plasmacore
using  Plasmacore::UI

class View
  PROPERTIES
    state     = State(this)

    display   : Display
    is_active : Logical

    ui        = Layout() : Component

  METHODS
    method add( child:Component, options=null:ValueTable )->this
      ui.add( child, options )
      return this

    method after( e:DrawEvent )

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:UpdateEvent )

    method change_state( new_state:State )
      local cur = new_state
      while (cur.next_state) cur = cur.next_state
      cur.next_state = state.next_state
      state.next_state = null
      new_state.prior_state = state.prior_state

      state.is_active = false
      state.on_deactivate
      state = new_state
      state.view = this
      state.is_active = true
      state.on_activate

    method draw

    method exit_state
      state.is_active = false
      state.on_deactivate

      if (state.next_state)
        state.next_state.prior_state = state.prior_state
        state = state.next_state
        state.view = this
        state.is_active = true
        state.on_activate
      elseIf (state.prior_state)
        state = state.prior_state
        state.view = this
        state.is_active = true
        state.on_resume
      else
        state = State()
        state.view = this
        state.is_active = true
        state.on_activate
      endIf

    method handle( e:DrawEvent )
      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:UpdateEvent )
      on( e )
      if (e.is_consumed) return

      ui.handle( e )
      if (e.is_consumed) return

      after( e )

    method on( e:DrawEvent )
      draw

    method on( e:KeyEvent )

    method on( e:PointerEvent )

    method on( e:UpdateEvent )
      update

    method on_activate

    method on_deactivate

    method on_resume

    method on_suspend

    method push_state( new_state:State )
      new_state.prior_state = state
      state.is_active = false
      state.on_suspend
      state = new_state
      state.view = this
      state.is_active = true
      state.on_activate

    method queue_state( new_state:State )
      local cur = state
      while (cur.next_state) cur = cur.next_state
      cur.next_state = new_state

    method update
endClass

