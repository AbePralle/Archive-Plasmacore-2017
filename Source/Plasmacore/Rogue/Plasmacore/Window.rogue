#==============================================================================
# Window.rogue
#==============================================================================
$include "Logic.rogue"

$module Plasmacore

class Window
  PROPERTIES
    name               : String
    id                 : Int32
    views              = StringTable<<View>>()
    default_view_logic : Logic

  METHODS
    method init( name, default_view_logic=Logic.default_logic )
      id = Plasmacore.create_resource_id
      WindowManager.windows_by_id[ id ] = this
      Message( "Window.create" ).set_int32("id",id).set_string("name",name).send

    method call( method_name:String )
      Message( "Window.call" ).set_int32("id",id).set_string("method_name",method_name).send

    method clean_up
      close

    method close
      WindowManager.windows_by_id.remove( id )
      Message( "Window.close" ).set_int32("id",id).send

    method handle_draw( view_name_buffer:StringBuilder, w:Int32, h:Int32 )
      local view = views[ view_name_buffer ]
      if (not view)
        local view_name = view_name_buffer->String
        view = View( this, view_name, default_view_logic )
        views[ view_name ] = view
      endIf
      Graphics = view.graphics
      Graphics.begin_draw( XY(w,h) )
      view.logic.on_draw
      Graphics.end_draw

    method show
      Message( "Window.show" ).set_int32("id",id).send

endClass

class View
  PROPERTIES
    window   : Window
    name     : String
    graphics : PlasmacoreGraphics
    logic    : Logic

  METHODS
    method init( window, name, logic )
      graphics = PlasmacoreGraphics( this )

    method draw
      logic.on_draw

    method update
      logic.on_update
endClass

class WindowManager [requisite singleton]
  PROPERTIES
    windows_by_id = Table<<Int32,Window>>()
    string_buffer = StringBuilder()

  METHODS
    method init
      MessageManager.add_listener( "Window.draw",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local view_name = m.get_string( "view_name", WindowManager.string_buffer.clear )
          local width     = m.get_int32( "width" )
          local height    = m.get_int32( "height" )
          local window = WindowManager.windows_by_id[ window_id ]
          if (window) window.handle_draw( view_name, width, height )
        endFunction
      )
endClass
