#==============================================================================
# Window.rogue
#==============================================================================
module Plasmacore

class Window
  PROPERTIES
    name               : String
    id                 : Int32
    views              = StringTable<<View>>()
    default_view_logic : ViewLogic

    current_view       : View
    current_view_name  = ""

  METHODS
    method init( name, default_view_logic=ViewLogic.default_logic )
      id = Plasmacore.create_resource_id
      WindowManager.windows_by_id[ id ] = this
      Message( "Window.create" ).set_int32("id",id).set_string("name",name).send

    method call( method_name:String )
      Message( "Window.call" ).set_int32("id",id).set_string("method_name",method_name).send

    method clean_up
      close

    method close
      WindowManager.windows_by_id.remove( id )
      Message( "Window.close" ).set_int32("id",id).send

    method find_view( view_name_buffer:StringBuilder )->View
      if (view_name_buffer == current_view_name) return current_view

      local view = views[ view_name_buffer ]
      if (view)
        current_view_name = view.name
        current_view = view
      endIf

      local view_name = view_name_buffer->String
      view = View( this, view_name, default_view_logic )
      views[ view_name ] = view
      current_view_name = view.name
      current_view = view
      return view

    method handle_key_event( view_name_buffer:StringBuilder, e:KeyEvent )
      find_view( view_name_buffer ).handle( e )

    method handle_pointer_event( view_name_buffer:StringBuilder, e:PointerEvent )
      find_view( view_name_buffer ).handle( e )

    method handle_update_and_draw( view_name_buffer:StringBuilder, w:Int32, h:Int32 )
      local view = find_view( view_name_buffer )
      view.size = XY( w, h )
      view.update_and_draw

    method show
      Message( "Window.show" ).set_int32("id",id).send

endClass

$if not "Console"
class WindowManager [requisite singleton]
  PROPERTIES
    windows_by_id = Table<<Int32,Window>>()
    string_buffer = StringBuilder()

    current_window    : Window
    current_window_id = 0

  METHODS
    method init
      MessageManager.add_listener( "View.key_event",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local view_name = m.get_string( "view_name", WindowManager.string_buffer.clear )
          local keycode   = m.get_int32( "keycode" )
          local unicode   = m.get_int32( "unicode" )
          local syscode   = m.get_int32( "syscode" )
          local is_repeat = m.get_int32( "is_repeat" )
          local is_press  = m.get_logical( "is_press" )
          if (not is_repeat) Keyboard.key_pressed[ keycode & 255 ] = is_press

          local window    = WindowManager.find_window( window_id )
          if (window) window.handle_key_event( view_name, KeyEvent(keycode, unicode, syscode, is_press, is_repeat) )
        endFunction
      )

      MessageManager.add_listener( "View.pointer_event",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local view_name = m.get_string( "view_name", WindowManager.string_buffer.clear )
          local type      = m.get_int32( "type" )
          local x         = m.get_int32( "x" )
          local y         = m.get_int32( "y" )
          local dx        = m.get_real64( "dx" )
          local dy        = m.get_real64( "dy" )
          local button    = m.get_int32( "button" )
          local id        = m.get_int32( "id" )

          local window    = WindowManager.find_window( window_id )
          if (window) window.handle_pointer_event( view_name, PointerEvent(type, XY(x,y), XY(dx,dy), button, id) )
        endFunction
      )

      MessageManager.add_listener( "View.update_and_draw",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local view_name = m.get_string( "view_name", WindowManager.string_buffer.clear )
          local width     = m.get_int32( "width" )
          local height    = m.get_int32( "height" )
          local window    = WindowManager.find_window( window_id )
          if (window) window.handle_update_and_draw( view_name, width, height )
        endFunction
      )

    method find_window( window_id:Int32 )->Window
      if (window_id == current_window_id) return current_window
      current_window = windows_by_id[ window_id ]
      current_window_id = window_id
      return current_window
endClass
$endIf
