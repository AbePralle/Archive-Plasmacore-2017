#==============================================================================
# Window.rogue
#==============================================================================

$module Plasmacore

class Window
  PROPERTIES
    name     : String
    id       : Int32
    graphics = StringTable<<PlasmacoreGraphics>>()

  METHODS
    method init( name )
      id = Plasmacore.create_resource_id
      WindowManager.windows_by_id[ id ] = this
      Message( "Window.create" ).set_int32("id",id).set_string("name",name).send

    method call( method_name:String )
      Message( "Window.call" ).set_int32("id",id).set_string("method_name",method_name).send

    method clean_up
      close

    method close
      WindowManager.windows_by_id.remove( id )
      Message( "Window.close" ).set_int32("id",id).send

    method handle_draw( view_name_buffer:StringBuilder, w:Int32, h:Int32 )
      local g = graphics[ view_name_buffer ]
      if (not g)
        local view_name = view_name_buffer->String
        g = PlasmacoreGraphics( this, view_name )
        graphics[ view_name ] = g
      endIf
      Graphics = g
      Graphics.begin_draw( XY(w,h) )
      Graphics.clear( Color.BLUE )
      Graphics.end_draw

    method show
      Message( "Window.show" ).set_int32("id",id).send

endClass

class WindowManager [requisite singleton]
  PROPERTIES
    windows_by_id = Table<<Int32,Window>>()
    string_buffer = StringBuilder()

  METHODS
    method init
      MessageManager.add_listener( "Window.draw",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local view_name = m.get_string( "view_name", WindowManager.string_buffer.clear )
          local width     = m.get_int32( "width" )
          local height    = m.get_int32( "height" )
          local window = WindowManager.windows_by_id[ window_id ]
          if (window) window.handle_draw( view_name, width, height )
        endFunction
      )
endClass
