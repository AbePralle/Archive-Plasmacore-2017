#==============================================================================
# Window.rogue
#==============================================================================
module Plasmacore

class Window
  PROPERTIES
    name                  : String
    id                    : Int32
    displays              = StringTable<<Display>>()
    default_display_logic : TypeInfo

    current_display       : Display
    current_display_name  = ""

  METHODS
    method init( name, default_display_logic=@DisplayLogic )
      id = Plasmacore.create_resource_id
      WindowManager.windows_by_id[ id ] = this
      Message( "Window.create" ).set_int32("id",id).set_string("name",name).send

    method call( method_name:String )
      Message( "Window.call" ).set_int32("id",id).set_string("method_name",method_name).send

    method clean_up
      close

    method close
      WindowManager.windows_by_id.remove( id )
      Message( "Window.close" ).set_int32("id",id).send

    method find_display( display_name_buffer:StringBuilder )->Display
      if (display_name_buffer == current_display_name) return current_display

      local display = displays[ display_name_buffer ]
      if (display)
        current_display_name = display.name
        current_display = display
      endIf

      local display_name = display_name_buffer->String
      display = Display( this, display_name, (default_display_logic.create_object as DisplayLogic).init )
      displays[ display_name ] = display
      current_display_name = display.name
      current_display = display
      return display

    method handle_key_event( display_name_buffer:StringBuilder, e:KeyEvent )
      find_display( display_name_buffer ).handle( e )

    method handle_pointer_event( display_name_buffer:StringBuilder, e:PointerEvent )
      find_display( display_name_buffer ).handle( e )

    method handle_update_and_draw( display_name_buffer:StringBuilder, w:Int32, h:Int32 )
      local display = find_display( display_name_buffer )
      display.size = XY( w, h )
      display.update_and_draw

    method show
      Message( "Window.show" ).set_int32("id",id).send

endClass

$if not "Console"
class WindowManager [requisite singleton]
  PROPERTIES
    windows_by_id = Table<<Int32,Window>>()
    string_buffer = StringBuilder()

    current_window    : Window
    current_window_id = 0

    key_event = KeyEvent( 0, 0, 0, false, false )
    # Recycled KeyEvent

    pointer_event = PointerEvent( 0, XY(0,0), XY(0,0), 0, 0 )
    # Recycled PointerEvent

  METHODS
    method init
      MessageManager.add_handler( "Display.key_event",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local display_name = m.get_string( "display_name", WindowManager.string_buffer.clear )
          local keycode   = m.get_int32( "keycode" )
          local unicode   = m.get_int32( "unicode" )
          local syscode   = m.get_int32( "syscode" )
          local is_repeat = m.get_logical( "is_repeat" )
          local is_press  = m.get_logical( "is_press" )
          if (not is_repeat) Keyboard.key_pressed[ keycode & 255 ] = is_press

          local window    = WindowManager.find_window( window_id )
          if (window)
            WindowManager.key_event.init( keycode, unicode, syscode, is_press, is_repeat )
            window.handle_key_event( display_name, WindowManager.key_event )
          endIf
        endFunction
      )

      MessageManager.add_handler( "Display.pointer_event",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local display_name = m.get_string( "display_name", WindowManager.string_buffer.clear )
          local type      = m.get_int32( "type" )
          local x         = m.get_int32( "x" )
          local y         = m.get_int32( "y" )
          local dx        = m.get_real64( "dx" )
          local dy        = m.get_real64( "dy" )
          local button    = m.get_int32( "button" )
          local id        = m.get_int32( "id" )

          local window    = WindowManager.find_window( window_id )
          if (window)
            WindowManager.pointer_event.init( type, XY(x,y), XY(dx,dy), button, id )
            window.handle_pointer_event( display_name, WindowManager.pointer_event )
          endIf
        endFunction
      )

      MessageManager.add_handler( "Display.update_and_draw",
        function (m:Message)
          local window_id = m.get_int32( "window_id" )
          local display_name = m.get_string( "display_name", WindowManager.string_buffer.clear )
          local width     = m.get_int32( "width" )
          local height    = m.get_int32( "height" )
          local window    = WindowManager.find_window( window_id )
          if (window) window.handle_update_and_draw( display_name, width, height )
        endFunction
      )

    method find_window( window_id:Int32 )->Window
      if (window_id == current_window_id) return current_window
      current_window = windows_by_id[ window_id ]
      current_window_id = window_id
      return current_window
endClass
$endIf
