module Plasmacore

class Font
  PROPERTIES
    name   : String
    height : Int32
    data   : FontData

  METHODS
endClass

class BitmapFont : Font
  PROPERTIES
    width  : Int32

  METHODS
    method init( name, width, height, characters=' '..'~':Range<<Character>> )
      data = FontManager.font_data[ name ]

      if (data) return

      local filepath = Plasmacore.find_asset( name )
      if (not filepath)
        println "ERROR loading BitmapFont - no such file $." (name)
        return
      endIf

      local src = Bitmap( File(filepath) )
      if (src.error) return

      data = FontData( height )

      local src_w = src.width / width
      local src_h = src.height / height

      forEach (j in 0..<src_h)
        forEach (i in 0..<src_w)
          local x = i * width
          local y = j * height
          local ch_data = Bitmap( src, Box(x,y,width,height) )
          data.add( characters.read, ch_data )
        endForEach
      endForEach

      prepare

    method prepare
      if (data) data.prepare

endClass


class FontData
  PROPERTIES
    bitmap      : Bitmap
    image       : Image
    height      : Int32
    cursor_x=1  : Int32
    cursor_y=1  : Int32
    ascii       = FontCharacter[]( 128, null )
    lookup      : Table<<Character,FontCharacter>>
    is_modified : Logical

  METHODS
    method init( height )
      bitmap = Bitmap( 1024, height+2 )

    method add( ch:Character, data:Bitmap )
      local w = data.width

      if (cursor_x + w+1 > bitmap.width)
        cursor_x = 1
        cursor_y += height+2
        bitmap.add_rows( height+2 )
      endIf

      if (data.height > height)
        # This character is taller than the nominal max height of the font.
        # Make room for it and adjust the height.
        bitmap.add_rows( data.height - height )
        height = data.height
      endIf

      data.draw( XY(cursor_x,cursor_y), bitmap )

      local info = FontCharacter( ch, cursor_x, cursor_y, w, height )
      if (ch <= 127)
        ascii[ ch ] = info
      else
        if (not lookup) lookup = Table<<Character,FontCharacter>>()
        lookup[ ch ] = info
      endIf

      cursor_x += w + 2
      is_modified = true

    method get( ch:Character )->FontCharacter
      if (ch <= 127) return ascii[ ch ]
      if (lookup)    return lookup[ ch ]
      return null

    method prepare
      if (not is_modified) return

      # TODO
      #{
      if (image)
      else
        image = Image(
      endIf
      }#

endClass


class FontCharacter
  PROPERTIES
    unicode  : Character
    x1       : Int32
    y1       : Int32
    width    : Int32
    height   : Int32
    offset_x : Int32
    offset_y : Int32
    image    : Image

  METHODS
    method init( unicode, x1, y1, width, height )
trace unicode, x1, y1, width, height
endClass


class FontManager [singleton]
  PROPERTIES
    font_data = Table<<String,FontData>>()
endClass
