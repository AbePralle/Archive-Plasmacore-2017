module Plasmacore

class Display [singleton]
  CLASS
    nativeHeader #include "Starbright.h"

  PROPERTIES
    name             : String
    view             : View

    window           : Window

    update_timer     = UpdateTimer()

    pointer_position : XY
    pointer_exists   : Logical

    size             : XY

    background_color = Color.BLACK : Color

    projection_transform : Matrix

    transform            : Matrix
    view_transform       = Matrix.identity : Matrix
    object_transform     = Matrix.identity : Matrix
    view_transforms      = Matrix[]
    object_transforms    = Matrix[]

    view_transform_modified       : Logical
    object_transform_modified     : Logical

    projection_mode   = ProjectionMode()
    unit_z            : Real64

  METHODS
    method init( name )
      view = Plasmacore.create_view( this )

    method bounds->Box
      return Box(size)

    method clear->this
      native @|Starbright::renderer->clear_color = $this->background_color.argb;
              |Starbright::renderer->clear( Starbright::Renderer::CLEAR_COLOR );
      return this

    method clear( background_color )->this
      return clear

    method clear_transforms
      object_transforms.clear
      view_transforms.clear
      view_transform_modified = true
      object_transform_modified = true

#{
    method draw
      logic.draw
      OverlayLog.draw

    method handle( e:KeyEvent )
      logic.handle( e )

    method handle( e:PointerEvent )
      if (pointer_exists)
        if (e.is_scroll)
          e.position = pointer_position
        else
          e.delta = e.position - pointer_position
          pointer_position = e.position
        endIf
      elseIf (not e.is_scroll)
        pointer_exists = true
        pointer_position = e.position
      endIf
      logic.handle( e )

    method height->Int32 [macro]
      this.size.y->Int32

    method update
      logic.update
      OverlayLog.update
      }#

    method update_and_draw( size )
      Display = this  # set the singleton reference to be this display

      clear_transforms
      projection_mode = projection_mode.configure( size )
      projection_mode.activate

      update_timer.update

      while (update_timer.tick)
        if (view) view.handle_update
      endWhile
      if (view) view.handle_draw

    method width->Int32 [macro]
      this.size.x->Int32

endClass

