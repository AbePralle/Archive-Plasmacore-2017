module Plasmacore

class AxisAngle( axis:XYZ, angle:Radians ) [compound]
  GLOBAL METHODS
    method create( axis:XYZ, angle:Degrees )->AxisAngle
      return AxisAngle( axis, angle->Radians )
endClass

class Rotation( x:Degrees, y:Degrees, z:Degrees ) [compound]
  # Represents a Euler angle rotation.
  GLOBAL METHODS
    method create->Rotation
      return degrees( 0, 0, 0 )

    method degrees( x:Real64, y:Real64, z:Real64 )->Rotation [macro]
      Rotation( Degrees(x), Degrees(y), Degrees(z) )

    method radians( x:Real64, y:Real64, z:Real64 )->Rotation
      return Rotation( Radians(x)->Degrees, Radians(y)->Degrees, Radians(z)->Degrees )

    method x( value:Degrees )->Rotation [macro]
      Rotation( value, Degrees(0), Degrees(0) )

    method y( value:Degrees )->Rotation [macro]
      Rotation( Degrees(0), value, Degrees(0) )

    method z( value:Degrees )->Rotation [macro]
      Rotation( Degrees(0), Degrees(0), value)

    method x( r:Radians )->Rotation [macro]
      Rotation.radians( r.value, 0, 0 )

    method y( r:Radians )->Rotation [macro]
      Rotation.radians( 0, r.value, 0 )

    method z( r:Radians )->Rotation [macro]
      Rotation.radians( 0, 0, r.value )

  METHODS
    method is_rotated->Logical
      return (x.value or y.value or z.value)

    method is_zero->Logical
      return not (x.value or y.value or z.value)

    method rotated_x( degrees:Degrees )->Rotation
      return (Quaternion(this) * Quaternion(Rotation.x(degrees)))->Rotation

    method to_degrees->XYZ
      return XYZ( x.value, y.value, z.value )

    method to_radians->XYZ
      return XYZ( x->Radians.value, y->Radians.value, z->Radians.value )

    method to->XYZ
      return XYZ( x.value, y.value, z.value )

endClass

