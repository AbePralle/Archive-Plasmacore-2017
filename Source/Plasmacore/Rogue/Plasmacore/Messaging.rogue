#==============================================================================
# Messaging.rogue
#==============================================================================

module Plasmacore

$requisite Byte[].clear()
$requisite Byte[].reserve(Int32)

class MessageManager [requisite singleton]
  PROPERTIES
    io_buffer = Byte[]  # native layer accesses this directly
    io_reader = BufferedDataReader( io_buffer )

    message_builder = BufferedDataWriter()
    io_writer       = BufferedDataWriter( io_buffer )

    next_id   = 1
    id_buffer = StringBuilder()

    incoming_id_to_name = Table<<Int32,String>>()
    incoming_name_to_id = Table<<String,Int32>>()
    outgoing_id_to_name = Table<<Int32,String>>()
    outgoing_name_to_id = Table<<String,Int32>>()
    new_outgoing_ids    = Int32[]

    incoming_message = IncomingMessage()
      # Recycled for incoming messages

    outgoing_message = OutgoingMessage()
      # Recycled for outgoing messages

    listeners             = Table<<String,Function(Message)[]>>()
    reply_callbacks_by_id = Table<<Int32,Function(Message)>>()

  METHODS
    method init_object
      add_listener( "<reply>",
        function(m:Message)
          local callback = MessageManager.reply_callbacks_by_id.remove( m.message_id )
          if (callback) callback( m )
        endFunction
      )

    method add_listener( message_type:String, listener:Function(Message) )
      local list = listeners[ message_type ]
      if (not list)
        list = Function(Message)[]
        listeners[ message_type ] = list
      endIf
      list.add( listener )

    method remove_listener( message_type:String, listener:Function(Message) )
      local list = listeners[ message_type ]
      if (list) list.remove( listener )

    method create_message( message_type:String, message_id=null:Int32? )->Message
      if (not message_id.exists)
        message_id = next_id
        ++next_id
      endIf
      outgoing_message.init( message_type, message_id.value )
      return outgoing_message

    method get_outgoing_id( name:String )->Int32
      local entry = outgoing_name_to_id.find( name )
      if (entry) return entry.value

      local new_id = outgoing_name_to_id.count + 1
      outgoing_name_to_id[ name ] = new_id
      outgoing_id_to_name[ new_id ] = name
      new_outgoing_ids.add( new_id )
      return new_id

    method send( m:OutgoingMessage )
      message_builder.write_int32( m.writer.buffer.count )
      message_builder.write( m.writer.buffer )

    method send_rsvp( m:OutgoingMessage, callback:Function(Message) )
      send( m )
      reply_callbacks_by_id[ m.message_id ] = callback

    method update->Byte[] [requisite]
      # 'io_reader' has already been set up to decode 'io_buffer', which 
      # in turn has already been filled with incoming message bytes by the
      # native layer.
      io_reader.reset

      # Header contains new message type ID definitions
      local new_id_count = io_reader.read_int32x
      forEach (1..new_id_count)
        local new_id = io_reader.read_int32x
        local new_name = io_reader.read_string( id_buffer.clear )->String
        incoming_id_to_name[ new_id ] = new_name
        incoming_name_to_id[ new_name ] = new_id
      endForEach

      while (io_reader.has_another)
        incoming_message.init( io_reader )
        local list = listeners[ incoming_message.message_type ]
        if (list)
          forEach (listener in list step -1) listener( incoming_message )
        endIf
      endWhile

      # Finalize the outgoing message data.
      io_writer.clear
      
      # First comes the header with any any new message type id definitions.
      io_writer.write_int32x( new_outgoing_ids.count )
      forEach (new_id in new_outgoing_ids)
        io_writer.write_int32x( new_id )
        io_writer.write_string( outgoing_id_to_name[new_id] )
      endForEach
      new_outgoing_ids.clear

      # Write out all the buffered data
      io_writer.write( message_builder.buffer )
      message_builder.clear

      return io_buffer
endClass

class Message
  ENUMERATE
    DATA_TYPE_STRING        = 1
    DATA_TYPE_REAL64        = 2
    DATA_TYPE_INT64         = 3
    DATA_TYPE_INT32         = 4
    DATA_TYPE_LOGICAL       = 5
    DATA_TYPE_BYTES         = 6

  PROPERTIES
    message_type : String
    message_id   : Int32

  GLOBAL METHODS
    method create( name:String )->Message
      return MessageManager.create_message( name )

  METHODS
    method contains( name:String )->Logical
      throw UnsupportedOperationError( "$::contains()" (type_name) )

    method get_string( name:String, default="":String )->String
      throw UnsupportedOperationError( "$::get_string()" (type_name) )

    method get_string( name:String, buffer:StringBuilder )->StringBuilder
      throw UnsupportedOperationError( "$::get_string()" (type_name) )

    method get_real64( name:String, default=0:Real64 )->Real64
      throw UnsupportedOperationError( "$::get_real64()" (type_name) )

    method get_int64( name:String, default=0:Int64 )->Int64
      throw UnsupportedOperationError( "$::get_int64()" (type_name) )

    method get_int32( name:String, default=0:Int32 )->Int32
      throw UnsupportedOperationError( "$::get_int32()" (type_name) )

    method get_logical( name:String, default=false:Logical )->Logical
      throw UnsupportedOperationError( "$::get_logical()" (type_name) )

    method get_bytes( name:String, bytes=Byte[]:Byte[] )->Byte[]
      throw UnsupportedOperationError( "$::get_bytes()" (type_name) )

    method create_reply->Message
      throw UnsupportedOperationError( "$::create_reply()" (type_name) )

    method set_string( name:String, value:String )->this
      throw UnsupportedOperationError( "$::set_string()" (type_name) )

    method set_real64( name:String, value:Real64 )->this
      throw UnsupportedOperationError( "$::set_real64()" (type_name) )

    method set_int64( name:String, value:Int64 )->this
      throw UnsupportedOperationError( "$::set_int64()" (type_name) )

    method set_int32( name:String, value:Int32 )->this
      throw UnsupportedOperationError( "$::set_int32()" (type_name) )

    method set_logical( name:String, value:Logical )->this
      throw UnsupportedOperationError( "$::set_logical()" (type_name) )

    method set_bytes( name:String, bytes:Byte[] )->this
      throw UnsupportedOperationError( "$::set_bytes()" (type_name) )

    method send
      throw UnsupportedOperationError( "$::send()" (type_name) )

    method send_rsvp( callback:Function(Message) )
      throw UnsupportedOperationError( "$::send_rsvp()" (type_name) )
endClass

class IncomingMessage : Message
  PROPERTIES
    reader    = BufferedDataReader()
    keys      = String[]
    offsets   = Int32[]

  METHODS
    method init
      
    method init( source:DataReader )
      keys.clear
      offsets.clear
      local size = source.read_int32
      source.read( reader.buffer.clear, size )
      reader.reset
      message_type = MessageManager.incoming_id_to_name[ reader.read_int32x ]
      message_id = reader.read_int32x
      while (index_another) noAction

    method contains( name:String )->Logical
      return keys.locate(name).exists

    method get_string( name:String, default="":String )->String
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_STRING
          return reader.read_string
        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          local buffer = StringBuilder( count )
          forEach (1..count) buffer.print( reader.read->Character )
          return buffer->String
      endWhich

      return default

    method get_string( name:String, buffer:StringBuilder )->StringBuilder
      local i = keys.locate_last( name )
      if (not i.exists) return buffer

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_STRING
          return reader.read_string( buffer )
        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          buffer.reserve( count )
          forEach (1..count) buffer.print( reader.read->Character )
          return buffer
      endWhich

      return buffer

    method get_real64( name:String, default=0:Real64 )->Real64
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64

        case DATA_TYPE_INT64
          return reader.read_int64x

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x
      endWhich

      return default

    method get_int64( name:String, default=0:Int64 )->Int64
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64->Int64

        case DATA_TYPE_INT64
          return reader.read_int64x

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x
      endWhich

      return default

    method get_int32( name:String, default=0:Int32 )->Int32
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64->Int32

        case DATA_TYPE_INT64
          return reader.read_int64x->Int32

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x
      endWhich

      return default

    method get_logical( name:String, default=false:Logical )->Logical
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64 != 0

        case DATA_TYPE_INT64
          return reader.read_int64x != 0

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x != 0
      endWhich

      return default

    method get_bytes( name:String, bytes=Byte[]:Byte[] )->Byte[]
      local i = keys.locate_last( name )
      if (not i.exists) return bytes

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_STRING
          local count = reader.read_int32x
          bytes.reserve( count )
          forEach (1..count) bytes.add( reader.read_int32x->Byte )

        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          bytes.reserve( count )
          forEach (1..count) bytes.add( reader.read->Byte )
      endWhich

      return bytes

    # INTERNAL USE
    method index_another->Logical
      if (not reader.has_another) return false
      local key    = MessageManager.incoming_id_to_name[ reader.read_int32x ]
      local offset = reader.position
      keys.add( key )
      offsets.add( offset )

      # Skip value
      local data_type = reader.read_int32x
      which (data_type)
        case DATA_TYPE_STRING
          local count = reader.read_int32x
          forEach (1..count) reader.read_int32x

        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          forEach (1..count) reader.read_byte

        case DATA_TYPE_REAL64
          reader.read_real64

        case DATA_TYPE_INT64
          reader.read_int64x

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          reader.read_int32x

        others
          println "ERROR: unsupported message data type $." (data_type)
      endWhich
      return true

    method create_reply->Message
      return MessageManager.create_message( "<reply>", message_id )

endClass


class OutgoingMessage : Message
  PROPERTIES
    sent   = true
    writer = BufferedDataWriter()

  METHODS
    method init

    method init( new_type:String, message_id )
      if (not sent) println "ERROR: unsent outgoing message of type '$'." (message_type)
      message_type = new_type
      sent = false
      writer.clear

      write_id( message_type )
      writer.write_int32x( message_id )

    method write_id( value:String )->this
      writer.write_int32x( MessageManager.get_outgoing_id(value) )
      return this

    method set_string( name:String, value:String )->this
      write_id( name )
      writer.write_int32x( Message.DATA_TYPE_STRING ).write_string( value )
      return this

    method set_real64( name:String, value:Real64 )->this
      write_id( name )
      writer.write_int32x( Message.DATA_TYPE_REAL64 ).write_real64( value )
      return this

    method set_int64( name:String, value:Int64 )->this
      write_id( name )
      writer.write_int32x( Message.DATA_TYPE_INT64 ).write_int64x( value )
      return this

    method set_int32( name:String, value:Int32 )->this
      write_id( name )
      writer.write_int32x( Message.DATA_TYPE_INT32 ).write_int32x( value )
      return this

    method set_logical( name:String, value:Logical )->this
      write_id( name )
      writer.write_int32x( Message.DATA_TYPE_LOGICAL ).write_logical( value )
      return this

    method set_bytes( name:String, bytes:Byte[] )->this
      write_id( name )
      writer.write_int32x( Message.DATA_TYPE_BYTES ).write_int32x( bytes.count )
      forEach (b in bytes) writer.write_byte( b )
      return this

    method send
      MessageManager.send( this )
      sent = true

    method send_rsvp( callback:Function(Message) )
      MessageManager.send_rsvp( this, callback )
      sent = true
endClass

