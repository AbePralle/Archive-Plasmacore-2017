module Plasmacore

class XY( x:Real64, y:Real64 ) [compound]
  GLOBAL METHODS
    method create->XY
      return XY( 0, 0 )

    method create( m:Real64, angle:Radians )->XY
      return XY( m * angle.cos, m * angle.sin )

    method create( m:Real64, angle:Degrees )->XY
      return XY( m * angle.cos, m * angle.sin )

  METHODS
    method degrees->Degrees [macro]
      Degrees( this.radians )

    method magnitude->Real64
      return Math.sqrt( x*x + y*y )

    method magnitude_squared->Real64
      return x*x + y*y

    method operator+( other:XY )->XY
      return XY( x+other.x, y+other.y )

    method operator+( value:Real64 )->XY
      return XY( x+value, y+value )

    method operator-()->XY
      return XY( -x, -y )

    method operator-( other:XY )->XY
      return XY( x-other.x, y-other.y )

    method operator-( value:Real64 )->XY
      return XY( x-value, y-value )

    method operator*( other:XY )->XY
      return XY( x*other.x, y*other.y )

    method operator*( value:Real64 )->XY
      return XY( x*value, y*value )

    method operator/( other:XY )->XY
      return XY( x/other.x, y/other.y )

    method operator/( value:Real64 )->XY
      return XY( x/value, y/value )

    method operator%( other:XY )->XY
      return XY( x%other.x, y%other.y )

    method operator%( value:Real64 )->XY
      return XY( x%value, y%value )

    method operator^( other:XY )->XY
      return XY( x^other.x, y^other.y )

    method operator^( value:Real64 )->XY
      return XY( x^value, y^value )

    method radians->Radians
      return Radians( Math.atan2( y, x ) )

    method to->String
      return "[$,$]" (x,y)

    method xv->XY
      return XY(x,0)

    method yv->XY
      return XY(0,y)
endClass

