module Plasmacore

class Texture
  PROPERTIES
    id            : Int32    # id in loading display context
    image_size    : XY       # In pixels
    texture_size  : XY       # In pixels
    uv_size       : XY       # (1,1) in most cases
    is_opaque     : Logical

  GLOBAL METHODS
    method create( name:String )->Texture
      local texture = Display.textures_by_name[ name ]
      if (texture) return texture

      local filepath = Plasmacore.asset_filepath( name )
      if (filepath)
        texture = Display.textures_by_name[ filepath ]
        if (texture) return texture

        println "Loading " + filepath
        texture = Texture( File(filepath) )
        Display.textures_by_name[ filepath ] = texture
      else
        println "File not found: " + name
        texture = Texture( Bitmap(1,1,Color.WHITE) )
      endIf

      Display.textures_by_name[ name ] = texture
      return texture

  METHODS
    method init( file:File )->Texture
      local bitmap = Bitmap( file )
      image_size = bitmap.size

      is_opaque = bitmap.is_opaque
      if (not is_opaque) bitmap.premultiply_alpha
      bitmap.expand_to_power_of_two

      texture_size = bitmap.size
      uv_size = image_size / texture_size

      id = Display.define_texture( id, bitmap, 32 )
      Display.texture_list.add( this )

    method init( bitmap:Bitmap )
      set( bitmap )

    method image_height->Int32 [macro]
      this.image_size.y

    method image_width->Int32 [macro]
      this.image_size.x

    method set( bitmap:Bitmap )
      is_opaque = bitmap.is_opaque
      if (not is_opaque) bitmap.premultiply_alpha
      bitmap.expand_to_power_of_two

      image_size = bitmap.size

      if (not id)
        # First time being defined - otherwise this same texture is being redefined
        # from an updated bitmap.
        Display.texture_list.add( this )
      endIf

      texture_size = bitmap.size
      uv_size = image_size / texture_size

      id = Display.define_texture( id, bitmap, 32 )

    method texture_height->Int32 [macro]
      this.texture_size.y

    method texture_width->Int32 [macro]
      this.texture_size.x

    method unload->this
      Display.delete_texture( id )
      Display.texture_list.remove( this )
      forEach (key in Display.textures_by_name.keys)
        if (Display.textures_by_name[key] is this)
          Display.textures_by_name.remove( key )
        endIf
      endForEach
      return this

    method uv_height->Real64 [macro]
      this.uv_size.y

    method uv_width->Real64 [macro]
      this.uv_size.x
endClass

