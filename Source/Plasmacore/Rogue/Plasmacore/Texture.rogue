module Plasmacore

class Texture
  PROPERTIES
    name          : String   # Optional name
    bitmap        : Bitmap   # Optional backing bitmap

    id            : Int32    # id in loading Graphics context
    image_size    : XY       # In pixels
    texture_size  : XY       # In pixels
    uv_size       : XY       # (1,1) in most cases
    version       : Int32    # Used to keep this texture in sync with the bitmap
    graphics      = Graphics : Graphics
      # The graphics context this texture was created in; used by images
      # to reload the texture if drawn in a new context.


  METHODS
    method init( name )

    method init( bitmap )

    method image_height->Int32 [macro]
      this.image_size.y

    method image_width->Int32 [macro]
      this.image_size.x

    method is_ready->Logical
      return (graphics is Graphics) and (not bitmap or bitmap.version == version)

    method reload->Texture
      if (name) return Graphics.acquire_texture( name )
      else      return Graphics.acquire_texture( bitmap )

    method texture_height->Int32 [macro]
      this.texture_size.y

    method texture_width->Int32 [macro]
      this.texture_size.x

    method uv_height->Real64 [macro]
      this.uv_size.y

    method uv_width->Real64 [macro]
      this.uv_size.x
endClass


#{
class TextureManager [singleton]
  PROPERTIES
    loaders = Table<<String,Function(Texture)>>()
      # Texture loader by texure name

  METHODS
    method load( texture:Texture )
      local loader = loaders[ texture.name ]
      if (loader)
        loader( texture )
        return
      endIf

      # Default load
      local filepath = Plasmacore.find_asset( texture.name )
      if (not filepath)
        println "No such texture: " + texture.name
        return
      endIf

      Graphics.load_texture( texture, File(filepath) )

endClass
}#
