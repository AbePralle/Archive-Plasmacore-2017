#==============================================================================
# Plasmacore.rogue
#==============================================================================
$include "Anchor.rogue"
$include "Assets.rogue"
$include "Bitmap.rogue"
$include "Box.rogue"
$include "Color.rogue"
$include "Component.rogue"
$include "Corners.rogue"
$include "Display.rogue"
$include "Event.rogue"
$include "Font.rogue"
$include "Graphics.rogue"
$include "Image.rogue"
$include "Keyboard.rogue"
$include "Matrix.rogue"
$include "Messaging.rogue"
$include "OverlayLog.rogue"
$include "ProjectionMode.rogue"
$include "Quaternion.rogue"
$include "RenderMode.rogue"
$include "Rotation.rogue"
$include "Shader.rogue"
$include "Sprite.rogue"
$include "StarbrightGraphics.rogue"
$include "State.rogue"
$include "Texture.rogue"
$include "UpdateTimer.rogue"
$include "Window.rogue"
$include "XY.rogue"
$include "XYZ.rogue"
$include "XYZW.rogue"

module Plasmacore

class Plasmacore [requisite singleton]
  PROPERTIES
    next_resource_id    = 1
    display_state_types = StringTable<<TypeInfo>>()
    global_state        : State
    global_update_timer = UpdateTimer()
    launch_window_name  : String

  METHODS
    method init
      Console.println "Initializing Plasmacore"

      MessageManager.add_handler( "Application.launch",
        function(m:Message)
          if (m.get_logical("is_window_based"))
            if (Plasmacore.launch_window_name)
              Window( Plasmacore.launch_window_name ).show
            else
              Console.println "Launch note: Plasmacore.launch_window_name not set for a window-based application."
            endIf
          endIf
        endFunction )

        set_state( "default", @State )

    method create_resource_id->Int32
      ++next_resource_id
      return (next_resource_id - 1)

    method find_asset( name:String )->String
      local filepath = native( "Plasmacore_find_asset( $name )" )->String
      if (filepath) return filepath

      name = "Assets/" + name
      return native( "Plasmacore_find_asset( $name )" )->String

    method get_initial_state( display_name:String )->State
      local type = display_state_types[ display_name ]
      if (not type) type = display_state_types[ "default" ]
      if (not type) return null

      return type.create_object<<State>>.init

    method global_update
      global_update_timer.update
      if (not global_state) global_state = get_initial_state( "global" )
      if (not global_state) return

      while (global_update_timer.tick)
        global_state.handle_update
      endWhile

    method set_state( display_name:String, state_type:TypeInfo )
      # Sets the initial state type
      display_state_types[ display_name ] = state_type

    method set_state( display_name:String, state:State )
      # Sets the active state of any existing displays matching the display name
      if (display_name == "global")
        global_state = state
      else
        WindowManager.set_state( display_name, state )
      endIf
endClass

nativeCode extern "C" RogueString* Plasmacore_find_asset( RogueString* name );

