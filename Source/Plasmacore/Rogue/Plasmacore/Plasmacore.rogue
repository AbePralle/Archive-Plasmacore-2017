#==============================================================================
# Plasmacore.rogue
#==============================================================================
$include "Anchor.rogue"
$include "Assets.rogue"
$include "Bitmap.rogue"
$include "Box.rogue"
$include "Color.rogue"
$include "Corners.rogue"
$include "Display.rogue"
$include "Event.rogue"
$include "Font.rogue"
$include "UI"
$include "Image.rogue"
$include "Keyboard.rogue"
$include "Matrix.rogue"
$include "Messaging.rogue"
$include "OverlayLog.rogue"
$include "ProjectionMode.rogue"
$include "Quaternion.rogue"
$include "RenderMode.rogue"
$include "Rotation.rogue"
$include "Shader.rogue"
$include "Sprite.rogue"
$include "Texture.rogue"
$include "UpdateTimer.rogue"
$include "View.rogue"
$include "ViewState.rogue"
$include "Window.rogue"
$include "XY.rogue"
$include "XYZ.rogue"
$include "XYZW.rogue"

module Plasmacore

class Plasmacore [requisite singleton]
  PROPERTIES
    next_resource_id       = 1
    display_view_types     = StringTable<<TypeInfo>>()
    global_update_callback : Function()
    global_update_timer    = UpdateTimer()
    launch_window_name     : String

  METHODS
    method init
      Console.println "Initializing Plasmacore"

      MessageManager.add_handler( "Application.launch",
        function(m:Message)
          if (m.get_logical("is_window_based"))
            if (Plasmacore.launch_window_name)
              Window( Plasmacore.launch_window_name ).show
            else
              Console.println "Launch note: Plasmacore.launch_window_name not set for a window-based application."
            endIf
          endIf
        endFunction )

        set_display_view( "default", @View )

    method create_resource_id->Int32
      ++next_resource_id
      return (next_resource_id - 1)

    method find_asset( name:String )->String
      local filepath = native( "Plasmacore_find_asset( $name )" )->String
      if (filepath) return filepath

      name = "Assets/" + name
      return native( "Plasmacore_find_asset( $name )" )->String

    method create_view( display:Display )->View
      local type = display_view_types[ display.name ]
      if (not type) type = display_view_types[ "default" ]
      if (not type) return null

      return type.create_object<<View>>.init( display )

    method global_update
      global_update_timer.update
      while (global_update_timer.tick)
        if (global_update_callback) global_update_callback()
      endWhile

    method on_global_update( global_update_callback )
      noAction

    method set_display_view( display_name:String, view_type:TypeInfo )
      # Sets the initial view type
      display_view_types[ display_name ] = view_type

    method set_display_view( display_name:String, view:View )
      # Sets the active view of any existing displays matching the display name
      WindowManager.set_display_view( display_name, view )
endClass

nativeCode extern "C" RogueString* Plasmacore_find_asset( RogueString* name );

