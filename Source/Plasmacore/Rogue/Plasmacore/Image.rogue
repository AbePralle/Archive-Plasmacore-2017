module Plasmacore

class Image
  PROPERTIES
    data   : ImageData

  METHODS
    method init( name:String )
      data = ImageManager.load( name )

    method init( bitmap:Bitmap )
      data = ImageManager.load( bitmap )

    method draw( pos:XYZ )
      if (is_ready) data.draw( pos )

    method height->Real64
      return data.size.y

    method is_ready->Logical
      if (not data.is_ready) data = data.prepare
      return data.is_ready

    method width->Real64
      return data.size.x
endClass

class ImageData
  PROPERTIES
    size : XY

  METHODS
    method draw( pos:XYZ )

    method is_ready->Logical
      return false

    method prepare->ImageData
      return this
endClass

class UnresolvedImageData( name:String ) : ImageData
  METHODS
    method prepare->ImageData
      if (Graphics.is_ready and ImageManager.is_ready)
        return ImageManager.load( name )
      else
        return this
      endIf
endClass

class TextureImageData : ImageData
  PROPERTIES
    texture : Texture

  METHODS
    method init( texture )
      size = texture.image_size

    method draw( pos:XYZ )
      local hw = texture.image_width  / 2
      local hh = texture.image_height / 2
      local uw = texture.uv_width
      local uh = texture.uv_height
      local pt1 = XYZ( -hw, -hh, 0 )
      local pt2 = XYZ(  hw, -hh, 0 )
      local pt3 = XYZ(  hw,  hh, 0 )
      local pt4 = XYZ( -hw,  hh, 0 )

      local uv1 = XY(0,0)
      local uv2 = XY(uw,0)
      local uv3 = XY(uw,uh)
      local uv4 = XY(0,uh)

      Graphics.push_object_transform( Matrix.translate(XYZ(pos.x,pos.y,-pos.z)) )

      Graphics.draw_textured_quad( texture, Shader.TEXTURE, RenderMode.IMAGE_DEFAULT, #.enable_point_filter,
        pt1, pt2, pt3, pt4, uv1, uv2, uv3, uv4 )

      Graphics.pop_object_transform

    method is_ready->Logical
      return texture.is_ready

    method prepare->ImageData
      # The graphics context changed or a backing bitmap was updated;
      # find or load the texture in the current context
      texture = texture.reload
      size = texture.image_size

      return this

endClass


class ImageManager [singleton]
  METHODS
    method is_ready->Logical
      return true

    method load( name:String )->ImageData
      if (not Graphics.is_ready) return UnresolvedImageData( name )
      return TextureImageData( Graphics.acquire_texture(name) )

    method load( bitmap:Bitmap )->ImageData
      return TextureImageData( Graphics.acquire_texture(bitmap) )
endClass

