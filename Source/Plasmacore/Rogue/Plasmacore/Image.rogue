module Plasmacore

class ImageManager [singleton]
  METHODS
    method load( image:Image )
      # Load the image name as a texture
      local texture = Graphics.acquire_texture( image.name )
      image.data = TextureImageData( image, texture )
      return 
endClass

class Image
  PROPERTIES
    name   : String
    data   : ImageData

  METHODS
    method init( name )

    method draw( pos:XYZ )
      prepare
      data.draw( pos )

    method prepare->this
      if (data) data.prepare
      else      ImageManager.load( this )
      return this
endClass

class ImageData
  PROPERTIES
    image : Image

  METHODS
    method init( image )

    method draw( pos:XYZ )

    method prepare

endClass

class TextureImageData : ImageData
  PROPERTIES
    texture : Texture
      # Stores which graphics context this image's texture is loaded in.
      # Used to recreate the image data for different contexts if necessary.

  METHODS
    method init( image, texture )

    method draw( pos:XYZ )
      local hw = texture.width / 2
      local hh = texture.height / 2
      local uw = texture.uv_width
      local uh = texture.uv_height
      local z   = -pos.z
      local pt1 = XYZ( pos.x-hw, pos.y+hh, z ) 
      local pt2 = XYZ( pos.x+hw, pos.y+hh, z )
      local pt3 = XYZ( pos.x+hw, pos.y-hh, z )
      local pt4 = XYZ( pos.x-hw, pos.y-hh, z )

      local uv1 = XY(0,0)
      local uv2 = XY(uw,0)
      local uv3 = XY(uw,uh)
      local uv4 = XY(0,uh)

      Graphics.draw_textured_quad( texture, Shader.TEXTURE, RenderMode.IMAGE_DEFAULT, #.enable_point_filter,
        pt1, pt2, pt3, pt4, uv1, uv2, uv3, uv4 )

    method prepare
      if (texture.graphics isNot Graphics)
        # Graphics Context changed; find or load the texture in the current context
        texture = Graphics.acquire_texture( texture.name )
      endIf


endClass
