module Plasmacore

class Image
  PROPERTIES
    data   : ImageData

  METHODS
    method init( name:String )
      data = ImageManager.load( name )

    method init( bitmap:Bitmap )
      data = ImageManager.load( bitmap )

    method init( existing:Image, subset:Box )
      data = existing.data.create_subset( subset )

    method draw( position:XY, _size:XY, anchor:Anchor )
      local transform = Graphics.transform
      position  -= ((anchor.position/2+0.5) * _size).floor
      local z    = -Graphics.unit_z

      local pt1  = transform * XYZ( position,          z )
      local pt2  = transform * XYZ( position+_size.xv, z )
      local pt3  = transform * XYZ( position+_size,    z )
      local pt4  = transform * XYZ( position+_size.yv, z )

      data.draw( pt1, pt2, pt3, pt4 )

    method draw( position:XY, _size:XY, anchor:Anchor, rotation:Rotation )
      draw( position, _size, anchor, Quaternion(rotation) )

    method draw( position:XY, _size:XY, anchor:Anchor, rotation:Quaternion )
      local handle = ((anchor.position/2+0.5) * _size).floor
      local z      = -Graphics.unit_z
      local origin = XYZ( position + handle, z )
      position -= handle

      Graphics.push_object_transform( rotation.to_matrix(origin,XYZ(0,0,0)) )
      #Graphics.push_object_transform( Matrix.identity )

      local transform = Graphics.transform

      local pt1  = transform * XYZ( position,          z )
      local pt2  = transform * XYZ( position+_size.xv, z )
      local pt3  = transform * XYZ( position+_size,    z )
      local pt4  = transform * XYZ( position+_size.yv, z )

      data.draw( pt1, pt2, pt3, pt4 )

      Graphics.pop_object_transform


    method draw( pt1:XYZW, pt2:XYZW, pt3:XYZW, pt4:XYZW )
      if (is_ready) data.draw( pt1, pt2, pt3, pt4 )

    method height->Real64
      return data.size.y

    method is_ready->Logical
      if (not data.is_ready) data = data.prepare
      return data.is_ready

    method size->XY
      return data.size

    method width->Real64
      return data.size.x
endClass

class ImageData
  PROPERTIES
    size        : XY
    shader      : Shader
    render_mode : RenderMode

  METHODS
    method draw( pt1:XYZW, pt2:XYZW, pt3:XYZW, pt4:XYZW )

    method create_subset( subset:Box )->ImageData
      return ImageData()

    method is_ready->Logical
      return false

    method prepare->ImageData
      return this
endClass

class UnresolvedImageData( name:String ) : ImageData
  METHODS
    method prepare->ImageData
      if (Graphics.is_ready and ImageManager.is_ready)
        return ImageManager.load( name )
      else
        return this
      endIf
endClass

class TextureImageData : ImageData
  PROPERTIES
    texture     : Texture
    uv1         : XY
    uv2         : XY


  METHODS
    method init( texture )
      shader      = Shader.TEXTURE
      render_mode = RenderMode.IMAGE_DEFAULT

    method create_subset( subset:Box )->ImageData
      local result = TextureImageData( texture )
      result.size = subset.size
      result.uv1 = subset.top_left / texture.texture_size
      result.uv2 = subset.bottom_right / texture.texture_size
      return result

    method draw( pt1:XYZW, pt2:XYZW, pt3:XYZW, pt4:XYZW )
      local uv21 = XY(uv2.x,uv1.y)
      local uv12 = XY(uv1.x,uv2.y)

      Graphics.draw_textured_quad( texture, shader, render_mode,
          pt1, pt2, pt3, pt4, uv1, uv21, uv2, uv12 )

    method is_ready->Logical
      return texture.is_ready

    method prepare->ImageData
      # The graphics context changed or a backing bitmap was updated;
      # find or load the texture in the current context
      texture = texture.reload
      size = texture.image_size

      return this

endClass


class ImageManager [singleton]
  METHODS
    method is_ready->Logical
      return true

    method load( name:String )->ImageData
      if (not Graphics.is_ready) return UnresolvedImageData( name )
      local texture = Graphics.acquire_texture( name )
      local image_data = TextureImageData( texture )
      image_data.size = texture.image_size
      image_data.uv1  = XY(0,0)
      image_data.uv2  = texture.uv_size
      return image_data

    method load( bitmap:Bitmap )->ImageData
      local texture = Graphics.acquire_texture( bitmap )
      local image_data = TextureImageData( texture )
      image_data.size = texture.image_size
      image_data.uv1  = XY(0,0)
      image_data.uv2  = texture.uv_size
      return image_data
endClass

