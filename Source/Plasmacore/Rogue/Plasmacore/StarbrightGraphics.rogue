module Plasmacore

class StarbrightGraphics : Graphics
  METHODS
    method clear
      native @|Starbright::renderer->clear_color = $this->background_color;
      |Starbright::renderer->clear( Starbright::Renderer::CLEAR_COLOR );

      #{
    method define_texture( name:String, bitmap:Bitmap )->Texture
      local texture_id = 0
      if (bitmap)
        local w = bitmap.width
        local h = bitmap.height
        local bpp = 32
        texture_id = native(
        "Starbright::renderer->define_texture($bitmap->pixels->data->bytes,$w,$h,$bpp)" )->Int32
      endIf

      local texture = Texture( name, texture_id, bitmap.size, XY(1,1) )
      textures[ name ] = texture
      return texture
      }#

      #{
    method draw_textured_triangle( texture:Texture, shader:Shader, render_mode:RenderMode,
        pt1:XY, pt2:XY, pt3:XY, uv1:XY, uv2:XY, uv3:XY )
      native @|Starbright::renderer->set_texture( 0, $texture->id );
              |Starbright::renderer->set_shader( $shader.id );
              |Starbright::renderer->set_primitive_type( Starbright::Renderer::TRIANGLES );
              |Starbright::renderer->set_render_mode( $render_mode.value );
              |Starbright::Vertex* v = Starbright::renderer->add_vertices( 3 );
              |v[0].x = $pt1.x;
              |v[0].y = $pt1.y;
              |v[0].u = $uv1.x;
              |v[0].v = $uv1.y;
              |v[1].x = $pt2.x;
              |v[1].y = $pt2.y;
              |v[1].u = $uv2.x;
              |v[1].v = $uv2.y;
              |v[2].x = $pt3.x;
              |v[2].y = $pt3.y;
              |v[2].u = $uv3.x;
              |v[2].v = $uv3.y;
              }#

    method set_transform
      local w = size.x
      local h = size.y
      native @|Starbright::renderer->set_transform_2d( 0, 0, $w, $h );
endClass

