module Plasmacore

class Graphics [singleton]
  GLOBAL PROPERTIES
    stack = Graphics[]

  PROPERTIES
    canvas            : Canvas
    textures          = Table<<String,Texture>>()

    size              : XY
    true_size         : XY
    background_color  : Int32

    transform         : Matrix
    view_transform    = Matrix.identity : Matrix
    object_transform  = Matrix.identity : Matrix
    view_transforms   = Matrix[]
    object_transforms = Matrix[]
    view_transform_modified   : Logical
    object_transform_modified : Logical

    mode              = GraphicsMode()
    unit_z            : Real64


  METHODS
    method init( canvas )
      size = canvas.size
      true_size = size
      background_color = Color.BLACK

    method acquire_texture( name:String )->Texture
      local entry = textures.find( name )
      if (entry) return entry.value

      local texture = Texture( name )
      textures[ name ] = texture
      TextureManager.load( texture )
      return texture

    method begin_draw( canvas )->this
      clear_transforms
      size = canvas.size
      mode = mode.configure( size )
      mode.activate
      return this

    method bounds->Box
      return Box( XY(0,0), size )

    method clear->this
      # Override
      return this

    method clear( background_color )->this
      return clear

    method clear_transforms->this
      object_transforms.clear
      view_transforms.clear
      view_transform_modified = true
      object_transform_modified = true
      return this


      #{
    method define_texture( name:String, bitmap:Bitmap )->Texture
      return Texture( name, 0, bitmap.size, XY(1,1) )
      }#

    method draw_textured_quad( texture:Texture, shader:Shader, render_mode:RenderMode,
        pt1:XYZ, pt2:XYZ, pt3:XYZ, pt4:XYZ, uv1:XY, uv2:XY, uv3:XY, uv4:XY )

    method draw_textured_triangle( texture:Texture, shader:Shader, render_mode:RenderMode,
        pt1:XY, pt2:XY, pt3:XY, uv1:XY, uv2:XY, uv3:XY )

    method end_draw->this
      return this

    method height->Int32 [macro]
      this.size.y->Int32

    method flush

    method load_texture( texture:Texture, file:File )
      println ''Failed to load texture "$" from file "$".'' (texture.name,file)

    method pop->Graphics
      if (stack.count == 0) Graphics = Graphics()
      else                  Graphics = stack.remove_last
      return Graphics

    method pop_object_transform( n=1:Int32 )->this
      forEach (1..n)
        if (object_transforms.count)
          object_transforms.remove_last
          object_transform_modified = true
        endIf
      endForEach
      return this

    method pop_view_transform( n=1:Int32 )->this
      forEach (1..n)
        if (view_transforms.count)
          view_transforms.remove_last
          view_transform_modified = true
        endIf
      endForEach
      return this

    method push( g:Graphics )->Graphics
      stack.add( this )
      Graphics = g
      return g

    method push_object_transform( m:Matrix )->this
      object_transforms.add( m )
      object_transform_modified = true
      return this

    method push_view_transform( m:Matrix )->this
      view_transforms.add( m )
      view_transform_modified = true
      return this

    method set_mode_2dx( size=Graphics.size, unit_z=384, max_z=16:Real64 )
      clear_transforms
      mode = mode.configure_2dx( size.x, size.y, unit_z, max_z )
      mode.activate

    method transform->Matrix
      update_transform
      return @transform

    method update_transform
      if (not (view_transform_modified or object_transform_modified)) return

      if (view_transform_modified)
        view_transform_modified = false
        if (view_transforms.count)
          view_transform = view_transforms.first
          forEach (i in 1..view_transforms.count-1)
            view_transform = view_transform * view_transforms[i]
          endForEach
        endIf
      endIf

      if (object_transform_modified)
        object_transform_modified = false
        if (object_transforms.count)
          object_transform = object_transforms.last
          forEach (i in object_transforms.count-2 downTo 0)
            object_transform = object_transform * object_transforms[i]
          endForEach
        endIf
      endIf

      if (view_transforms.count)
        if (object_transforms.count)
          transform = view_transform * object_transform
        else
          transform = view_transform
        endIf
      else
        if (object_transforms.count)
          transform = object_transform
        else
          transform = Matrix.identity
        endIf
      endIf

    method width->Int32 [macro]
      this.size.x->Int32
endClass

