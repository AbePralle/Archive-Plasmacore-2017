module Plasmacore

class Graphics [singleton]
  GLOBAL PROPERTIES
    stack = Graphics[]

  PROPERTIES
    canvas           : Canvas
    textures         = Table<<String,Texture>>()

    size             : XY
    true_size        : XY
    background_color : Int32

    nominal_z : Real64


  METHODS
    method init( canvas )
      size = canvas.size
      true_size = size
      background_color = Color.BLACK

    method acquire_texture( name:String )->Texture
      local entry = textures.find( name )
      if (entry) return entry.value

      local texture = Texture( name )
      textures[ name ] = texture
      TextureManager.load( texture )
      return texture

    method begin_draw( canvas )->this
      size = canvas.size
      set_mode_2dx
      return this

    method bounds->Box
      return Box( XY(0,0), size )

    method clear
      # Override

    method clear( background_color )
      clear

      #{
    method define_texture( name:String, bitmap:Bitmap )->Texture
      return Texture( name, 0, bitmap.size, XY(1,1) )
      }#

    method draw_textured_quad( texture:Texture, shader:Shader, render_mode:RenderMode,
        pt1:XYZ, pt2:XYZ, pt3:XYZ, pt4:XYZ, uv1:XY, uv2:XY, uv3:XY, uv4:XY )

    method draw_textured_triangle( texture:Texture, shader:Shader, render_mode:RenderMode,
        pt1:XY, pt2:XY, pt3:XY, uv1:XY, uv2:XY, uv3:XY )

    method end_draw->this
      return this

    method height->Int32 [macro]
      this.size.y->Int32

    method flush

    method load_texture( texture:Texture, file:File )
      println ''Failed to load texture "$" from file "$".'' (texture.name,file)

    method push( g:Graphics )->Graphics
      stack.add( this )
      Graphics = g
      return g

    method pop->Graphics
      if (stack.count == 0) Graphics = Graphics()
      else                  Graphics = stack.remove_last
      return Graphics

    method set_mode_2dx( _size=Graphics.size:XY, near_scale=16:Real64, max_z=30:Real64 )

    method set_transform

    method width->Int32 [macro]
      this.size.x->Int32
endClass

nativeHeader #include "Starbright.h"
