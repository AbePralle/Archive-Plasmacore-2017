using Plasmacore

println "Rogue Launched!"

Plasmacore.launch_window_name = "LaunchWindow"
Plasmacore.set_display_view( "launch_window", @TestView )

class TestState : ViewState
  PROPERTIES
    colors = Color[][ Color.RED, Color.GREEN, Color.YELLOW ]
    timer = Timer(1.0)

  METHODS
    method on( e:DrawEvent )
      Display.clear( colors.first )

      if (timer.is_expired)
        colors.add( colors.remove_first )
        timer.restart
      endIf

endClass

class TestView : View
  METHODS
    method activate
      change_state( TestState() )

    method on( e:DrawEvent )
endClass

#{
MessageManager.add_handler( "Ping", function(m:Message) println System.time; Message("Pong").send )

MessageManager.add_handler( "some_button_clicked",
  function(m:Message)
    local n = Random.next_int32(3)
    SweetWindowDisplayLogic.clear_color = select(n){ 0:Color.RED || 1:Color.GREEN || Color.BLUE }
    Message("add_result").set_string( "color",
      select(n){ 0:"Red" || 1:"Green" || "Blue" } ).send
  endFunction
)

#{
TextureManager.loaders[ "red_box" ] =
  function( texture:Texture )
    println "callback loading texture " + texture.name
  endFunction
  }#

local window = Window( "LaunchWindow", @LaunchWindowDisplayLogic )
window.show

#local sweet_window = Window( "SweetWindow", SweetWindowDisplayLogic() )
#sweet_window.show

class LaunchWindowAssets : Assets
endClass


class LaunchWindowDisplayLogic : DisplayLogic
  PROPERTIES
    img  : Image
    bitmap : Bitmap
    yangle = 0.0
    zangle  = -25 : Real64
    delta  = 0.2
    font : Font #( "FontSystem17.png", 9, 17 )
    assets = LaunchWindowAssets()

  METHODS
    method activate
      #font = Font( "FontSystem17.png", 17, &options=@{snug,anchor:"CENTER"} )
      font = Font( "arial.ttf", 64, @{anchor:"CENTER"} )
      #Graphics.load_texture( Texture("Test"), File("test") )

      #{
      forEach (i of bitmap.pixels)
        if (not (bitmap.pixels[i] & 0xFF000000)) bitmap.pixels[i] = Color.RED
      endForEach
      }#
      #img = Image( "King.png" )

    method draw
      Graphics.clear( Color.BLUE )
      #img.draw( Graphics.center, img.size, Anchor.CENTER, Rotation.degrees(0,yangle,zangle) )
      #img2.draw( XY(1,19), img2.size, Anchor.TOP_LEFT )
      #font.data.image.draw( Graphics.center, font.data.image.size, Anchor.CENTER )
      #font.draw( "Hello World!", Graphics.center )
      font.draw( "Hello World!", Graphics.center )
      Graphics.draw( Box(1,1,16,16) )

    method on( e:KeyEvent )
      println e

    method on( e:PointerEvent )
      println e

    method update
      zangle += delta
      if (zangle >=  25) delta = -0.2
      if (zangle <= -25) delta =  0.2
      yangle += 0.2
endClass

class SweetWindowDisplayLogic : DisplayLogic
  GLOBAL PROPERTIES
    clear_color = Color.YELLOW : Color

  METHODS
    method draw
      Graphics.clear( clear_color )
endClass

class GreenBlue : DisplayLogic
  PROPERTIES
    image = Image( "King.png" )
    #image  = Image( "U5Tiles.png" )
    z      = 1.0
    yaw    : Degrees

  METHODS
    method activate
      #{
      local bitmap = Bitmap(16,16,Color.RED)
      forEach (i of bitmap.pixels)
        if (i&1) bitmap.pixels[i] = Color.RED
        else     bitmap.pixels[i] = Color.WHITE
      endForEach
      texture = Graphics.define_texture( "red_box", bitmap )
      }#
      #println Matrix.identity

    method draw
      Graphics.clear
      local final_z = z * Graphics.unit_z
      local pos = XYZ( pointer_position.x, pointer_position.y, final_z )
      #local pos = XYZ( 0, 0, Graphics.unit_z )
      #Graphics.push_object_transform( Matrix.translate( XYZ(0,0,final_z) ) )
      #Graphics.push_object_transform( Matrix.translate( XYZ(0,0,-final_z) ) )
      Graphics.push_object_transform( Matrix.rotate_y(yaw) )
      image.draw( pos )
      Graphics.pop_object_transform
      #Graphics.pop_object_transform( 3 )
      #image.draw( XYZ(pointer_position-Graphics.size/2,z) )

      #{
      forEach (x in 0..800 step 16)
        Graphics.draw_textured_triangle( texture, Shader.TEXTURE, RenderMode.IMAGE_DEFAULT,
          XY(x,0), XY(x+16,16), XY(x+0,16), XY(0,0), XY(1,1), XY(0,1) )
        Graphics.draw_textured_triangle( texture, Shader.TEXTURE, RenderMode.IMAGE_DEFAULT,
          XY(x,0), XY(x+16,0), XY(x+16,16), XY(0,0), XY(1,0), XY(1,1) )
      endForEach
      }#

    method on( e:KeyEvent )
      trace e

    method on( e:PointerEvent )
      if (e.is_scroll)
        z   -= e.delta.y/50
        yaw -= e.delta.x
        #native @|rotation_degrees -= $e.delta.x;
      endIf

    method update
      local p = Math.sin( (System.time % 2)/2 * pi )
      Graphics.background_color = 0xff000000 | (p * 255)->Int32
endClass

}#
