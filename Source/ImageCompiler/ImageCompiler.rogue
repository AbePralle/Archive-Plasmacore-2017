$include "Graphics"

ImageCompiler()

class ImageCompiler
  PROPERTIES
    filters       = String[]
    info_filepath = "ImageInfo.json"
    output_path   = "CompiledImages"
    image_folder   = ""
    show_usage    : Logical
    info          = PropertyTable()
    images        = Bitmap[]

  METHODS
    method init
      process_command_line_arguments

      if (show_usage)
        println @|Plasmacore Image Compiler
                 |
                 |USAGE
                 |  imagecompiler [--info=filepath] [--output=filepath] [--images=base-image-folder-path] [wildcard-filter]*
        System.exit 1
      endIf

      info = PropertyTable.load( File(info_filepath) )
      if (image_folder.count == 0)
        if (info["image_folder"])
          image_folder = info.get_string( "image_folder" )
        endIf
        if (image_folder.count == 0)
          println "ERROR: Missing required '--images=image-folder-path' argument."
        endIf
      endIf


      if (not File.exists(image_folder))
        println "ERROR: Specified '--images' folder path does not exist:"
        println image_folder
        System.exit 1
      endIf

      if (not File.is_folder(image_folder))
        println "ERROR: Specified '--images' folder path is a file rather than a folder:"
        println image_folder
        System.exit 1
      endIf

      if (not image_folder.ends_with('/')) image_folder += '/'

      local all_images = File.listing( image_folder, FileOptions().recursive )
      forEach (img_filepath in all_images)
        println img_filepath
      endForEach

      #{
      local filepaths = String[]
      forEach (filepath in filters)
        collect_images( filepath, filepaths )
      endForEach

      forEach (filepath in filepaths)
        println "Loading " + filepath
        local bitmap = Bitmap( File(filepath) )
        if (bitmap.error)
          println "$ [SKIPPED]" (filepath)
        else
          println "$ [$x$]" (filepath,bitmap.width,bitmap.height)
        endIf
      endForEach
      }#

      if (not info.save(File(info_filepath)))
        println ''Error saving "$".'' (info_filepath)
      endIf

      #local bitmap = Bitmap( File("a.png") )
      #local bm2 = Bitmap( bitmap, Box(bitmap.size).cropped(1) )
      #bm2.save_as_png( File("a2.png") )

    method process_command_line_arguments
      forEach (i of System.command_line_arguments)
        local arg = System.command_line_arguments[i]
        local original_arg = arg
        local value : String
        if (arg.contains('='))
          value = arg.after_first( '=' )
          arg = arg.before_first( '=' )
        endIf
        which (arg)
          case "--info":   info_filepath = value
          case "--output": output_path = value
          case "--images"
            image_folder = value
          others
            if (arg.begins_with("--") or value?)
              println "Unrecognized argument '$'." (original_arg)
              show_usage = true
            else
              filters.add( arg )
            endIf
        endWhich
      endForEach

    method collect_images( filepath:String, validated_filepaths:String[] )
      if (not File.exists(filepath))
        if (File.exists(image_folder+filepath))
          filepath = image_folder + filepath
        endIf
      endIf

      if (not File.exists(filepath))
        println ''No such image "$".'' (filepath)
      endIf

      if (File.is_folder(filepath))
        forEach (contained_filepath in File.listing(filepath))
          collect_images( "$/$" (filepath,contained_filepath), validated_filepaths )
        endForEach
      else
        validated_filepaths.add( filepath )
      endIf


endClass

