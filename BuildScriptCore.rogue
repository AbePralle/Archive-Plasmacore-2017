class BuildConfig [singleton]
  PROPERTIES
    ide_flag : Logical
endClass


routine get_platform->String
  local target = "help"

  forEach (arg in System.command_line_arguments)
    which (arg)
      case "--ide"
        BuildConfig.ide_flag = true
      others
        target = arg
    endWhich
  endForEach

  try
    which (target)
      case "iOS", "macOS", "Linux"
        noAction

      case "emscripten"
        if (System.os == "macOS")
          install_emscripten
        endIf

      others
        println @|USAGE
                 |  make [ios | macos | emscripten | linux]
        System.exit 1
    endWhich

  catch (err:Error)
    println err
    System.exit 1
  endTry

  return target

endRoutine

routine standard_build( target:String )
  try
    configure_build_folder( target )
    compile( target )
  catch (err:Error)
    println err
    System.exit 1
  endTry
endRoutine

routine configure_build_folder( target:String )
  local output_folder = "Build/$/Source" (target)
  File.create_folder( output_folder )
endRoutine


routine copy_newer( filename:String, from_folder:String, to_folder:String )
  local from_filepath = "$/$" (from_folder,filename)
  local to_filepath = "$/$" (to_folder,filename)
  if (not File.exists(from_filepath)) throw Error( "File not found: " + from_filepath )
  if (not File.exists(to_folder)) throw Error( "No such folder: " + to_folder )

  if (not File.exists(to_filepath) or File.timestamp(from_filepath) > File.timestamp(to_filepath))
    println "Copying $ -> $" (from_filepath,to_filepath)
    System.run( "cp $ $" (from_filepath,to_filepath) )
  endIf
endRoutine


routine compile( target:String )
  local output_folder = "Build/$/Source" (target)

  if (not need_compile(target,output_folder)) return

  local language = "C++"
  if (target == "macOS" or target == "iOS") language = "C++,ObjC"

  local exe = "roguec"
  native @|#ifdef ROGUEC
          |  #define MAKE_MACRO_STR(s) MAKE_ARG_STR(s)
          |  #define MAKE_ARG_STR(s) #s
          |  $(exe) = RogueString_create_from_utf8(MAKE_MACRO_STR(ROGUEC));
          |  #undef MAKE_ARG_STR
          |  #undef MAKE_MACRO_STR
          |#endif
  local cmd = ''$ --target=$,$,$ --gc=manual Source/Main.rogue Plasmacore --libraries=Libraries/Rogue --output=$/RogueProgram''...
    (exe,language,target,mobile_or_desktop(target),output_folder)
    if (BuildConfig.ide_flag) cmd += " --ide"

  println cmd
  if (System.run(cmd)) System.exit 1

endRoutine


routine mobile_or_desktop( target:String )->String
  which (target)
    case "Windows", "macOS", "Linux", "Unix", "emscripten"
      return "Desktop"

    others
      return "Mobile"
  endWhich
endRoutine

routine need_compile( target:String, output_folder:String )->Logical
  local extension = "cpp"
  if (target == "macOS" or target == "iOS") extension = "mm"

  local output_h   = "$/RogueProgram.h" (output_folder)
  local output_cpp = "$/RogueProgram.$" (output_folder,extension)

  if (not File.exists(output_h))   return true
  if (not File.exists(output_cpp)) return true

  local dependencies = File.listing( "Libraries/Rogue", &recursive, &absolute )
  dependencies.add( File.listing("Source", &recursive, &absolute) )
  dependencies.add( "Makefile" )
  dependencies.add( "Build.rogue" )
  dependencies.add( "BuildCore.rogue" )

  local timestamp = File.timestamp(output_h).or_smaller( File.timestamp(output_cpp) )
  forEach (dependency in dependencies)
    if (File.timestamp(dependency) > timestamp) return true
  endForEach

  return false
endRoutine

routine install_emscripten
  install_brew
  install_library( "emscripten" )
endRoutine

routine require_command_line
  if (System.environment["IDE"])
    throw Error( "$:$: error:Run 'make $' from the command line to install necessary libraries."...
    ($sourceFilepath,$sourceLine,select{System.environment["TARGET"]||""}.to_lowercase) )
  endIf
endRoutine

routine install_brew
  if (0 == System.run("which brew >& /dev/null")) return

  require_command_line
  println "Installing brew"
  if (Console.input( "\nHomebrew must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    println cmd
    if (0 == System.run(cmd)) return
    throw Error( "Failed to install Homebrew." )
  endIf

  throw Error( "Missing required dependency 'brew' (Homebrew)." )
endRoutine

routine install_library( library_name:String )
  if (0 == System.run( ''brew list $ >& /dev/null'' (library_name) ) ) return

  require_command_line
  if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
    throw Error( "Missing required library '$'." (library_name) )
  endIf

  local cmd = "brew install $" (library_name)
  println cmd
  if (0 != System.run(cmd)) throw Error( "Failed to install library '$'." (library_name) )

  if (library_name == "emscripten")
    println "=" * 79
    println @|emscripten installed.  Run 'emcc' and then adjust your ~/.emscripten file as
             |directed by the "Caveats" clause above (if present).
    println "=" * 79
    System.exit( 1 )
  endIf
endRoutine
