routine standard_build
  local target = "help"
  if (System.command_line_arguments.count == 1) target = System.command_line_arguments.first

  try
    which (target)
      case "iOS"
        configure_ios_build_folder
        compile( target )
      others
        println @|USAGE
                 |  make ios
        System.exit 1
    endWhich

  catch (err:Error)
    println err
    System.exit 1
  endTry

endRoutine


routine configure_ios_build_folder
  local output_folder = "Build/iOS/Source"
  File.create_folder( output_folder )

  copy_newer( "Plasmacore.swift",                   "Libraries/Plasmacore/Swift", output_folder )
  copy_newer( "PlasmacoreMessage.swift",            "Libraries/Plasmacore/Swift", output_folder )
  copy_newer( "PlasmacoreViewController-iOS.swift", "Libraries/Plasmacore/Swift", output_folder )
  copy_newer( "RogueInterface.h",                   "Libraries/Plasmacore/Swift", output_folder )
  copy_newer( "RogueInterface.mm",                  "Libraries/Plasmacore/Swift", output_folder )
endRoutine


routine copy_newer( filename:String, from_folder:String, to_folder:String )
  local from_filepath = "$/$" (from_folder,filename)
  local to_filepath = "$/$" (to_folder,filename)
  if (not File.exists(from_filepath)) throw Error( "File not found: " + from_filepath )
  if (not File.exists(to_folder)) throw Error( "No such folder: " + to_folder )

  if (not File.exists(to_filepath) or File.timestamp(from_filepath) > File.timestamp(to_filepath))
    println "Copying $ -> $" (from_filepath,to_filepath)
    System.run( "cp $ $" (from_filepath,to_filepath) )
  endIf
endRoutine


routine compile( target:String )
  local output_folder = "Build/$/Source" (target)

  if (not need_compile(output_folder)) return

  if (System.run(''roguec --target=C++,$ Source/Main.rogue Plasmacore --libraries=Libraries/Rogue --output=$/RogueProgram'' (target,output_folder)))
    System.exit 1
  endIf

endRoutine

routine need_compile( output_folder:String )->Logical
  local output_h   = "$/RogueProgram.h" (output_folder)
  local output_cpp = "$/RogueProgram.cpp" (output_folder)

  if (not File.exists(output_h))   return true
  if (not File.exists(output_cpp)) return true

  local dependencies = File.listing( "Libraries/Rogue", &recursive, &absolute )
  dependencies.add( File.listing("Source", &recursive, &absolute) )
  dependencies.add( "Makefile" )
  dependencies.add( "Go.rogue" )

  local timestamp = File.timestamp(output_h).or_smaller( File.timestamp(output_cpp) )
  forEach (dependency in dependencies)
    if (File.timestamp(dependency) > timestamp) return true
  endForEach

  return false
endRoutine


