module Plasmacore

class Bitmap
  GLOBAL PROPERTIES
    resize_row_buffer = Int32[]

  PROPERTIES
    width    : Int32
    height   : Int32
    pixels   : Color[]
    error    : Logical
    filepath : String

  METHODS
    method init( _size:XY, color=Color.BLACK:Color ) [essential]
      init( _size.x, _size.y, color )

    method init( width, height, color=Color.BLACK:Color ) [essential]
      init( width, height, Color[]( width*height, color ) )

    method init( file:File )
      if (file and file.filepath)
        filepath = file.filepath
        init( file.load_as_bytes )
      else
        if (not file)
          println "Attempting to load Bitmap with null file reference."
        else
          println "Attempting to load Bitmap with null filepath."
        endIf
        init( XY(1,1) )
        error = true
      endIf

    method init( bytes:Byte[] )
      if (not decode(bytes))
        init( XY(1,1) )
        error = true
      endIf

    method init( _size:XY, pixels )
      init( _size.x, _size.y, pixels )

    method init( width, height, pixels )

    method init( existing:Bitmap, bounds:Box )
      init( bounds.size )
      existing.blit( this, -bounds.position )

    method cloned->Bitmap
      local result = Bitmap( size, pixels.cloned )
      result.error = this.error
      return result

    method add_rows( rows:Int32, color=0:Color )->this
      pixels.reserve( width*rows )
      forEach (1..width*rows) pixels.add( color )
      height += rows
      return this

    method blit( dest_bitmap:Bitmap, pos:XY )
      blit( Box(0,0,size), dest_bitmap, pos )

    method blit( bounds:Box, dest_bitmap:Bitmap, dest_position:XY )
      local src_x1  = bounds.position.x->Int32
      local src_y1  = bounds.position.y->Int32
      local w       = bounds.width->Int32
      local h       = bounds.height->Int32
      local dest_x1 = dest_position.x->Int32
      local dest_y1 = dest_position.y->Int32

      local src_x_limit  = src_x1 + w
      local src_y_limit  = src_y1 + h
      local dest_x_limit = dest_x1 + w
      local dest_y_limit = dest_y1 + h

      local this_width = width
      local dest_width = dest_bitmap.width

      # clip
      if (src_x1 < 0)
        local delta = -src_x1
        src_x1    = 0
        dest_x1  += delta
      endIf
      if (src_y1 < 0)
        local delta = -src_y1
        src_y1    = 0
        dest_y1  += delta
      endIf
      if (src_x_limit > this_width)
        local delta    = src_x_limit - this_width
        src_x_limit  -= delta
        dest_x_limit -= delta
      endIf
      if (src_y_limit > height)
        local delta    = src_y_limit - height
        src_y_limit  -= delta
        dest_y_limit -= delta
      endIf

      if (dest_x1 < 0)
        local delta = -dest_x1
        dest_x1  = 0
        src_x1   += delta
      endIf
      if (dest_y1 < 0)
        local delta = -dest_y1
        dest_y1  = 0
        src_y1   += delta
      endIf
      if (dest_x_limit > dest_bitmap.width)
        local delta = dest_x_limit - dest_bitmap.width
        dest_x_limit -= delta
        src_x_limit  -= delta
      endIf
      if (dest_y_limit > dest_bitmap.height)
        local delta = dest_y_limit - dest_bitmap.height
        dest_y_limit -= delta
        src_y_limit  -= delta
      endIf

      local lines = dest_y_limit - dest_y1
      local copy_count = (dest_x_limit - dest_x1)
      local src_row_count = this_width
      local dest_row_count = dest_bitmap.width

      if (lines <= 0 or copy_count <= 0) return

      native @|RogueInt32* src_start  = $pixels->data->as_int32s + ($src_y1 * $this_width + $src_x1);
              |RogueInt32* src_limit  = src_start + $copy_count;
              |RogueInt32* dest_start = $dest_bitmap->pixels->data->as_int32s + ($dest_y1 * $dest_width + $dest_x1);
              |
              |while (--$lines >= 0)
              |{
              |  RogueInt32* src  = src_start - 1;
              |  RogueInt32* dest = dest_start;
              |  while (++src < src_limit)
              |  {
              |    *dest = *src;
              |    ++dest;
              |  }
              |  src_start  += $src_row_count;
              |  src_limit  += $src_row_count;
              |  dest_start += $dest_row_count;
              |}

    method clear( color=Color.BLACK:Color )
      forEach (i of pixels) pixels[i] = color

    method fill( box:Box, color:Color )
      local x1 = box.position.x->Int32
      local y1 = box.position.y->Int32
      local x_limit = x1 + box.size.x->Int32
      local y_limit = y1 + box.size.y->Int32

      local w = width
      local h = height

      if (x1 < 0) x1 = 0
      if (y1 < 0) y1 = 0
      if (x_limit >= w) x_limit = w
      if (y_limit >= h) y_limit = h

      if (x1 >= x_limit or y1 >= y_limit) return

      local argb = color.argb
      local row_width = x_limit - x1
      local row_skip = width - row_width
      local rows = y_limit - y1

      native @|RogueInt32* dest = ($pixels->data->as_int32s + $y1*$w + $x1) - 1;
              |while (--$rows >= 0)
              |{
              |  for (int i=$row_width; --i>=0; )
              |  {
              |    *(++dest) = $argb;
              |  }
              |  dest += $row_skip;
              |}

    method fill( box:Box, color:Color, channel_mask:Int32 )
      local x1 = box.position.x->Int32
      local y1 = box.position.y->Int32
      local x_limit = x1 + box.size.x->Int32
      local y_limit = y1 + box.size.y->Int32

      local w = width
      local h = height

      if (x1 < 0) x1 = 0
      if (y1 < 0) y1 = 0
      if (x_limit >= w) x_limit = w
      if (y_limit >= h) y_limit = h

      if (x1 >= x_limit or y1 >= y_limit) return

      local argb = color.argb & channel_mask
      local row_width = x_limit - x1
      local row_skip = width - row_width
      local rows = y_limit - y1

      native @|RogueInt32* dest = ($pixels->data->as_int32s + $y1*$w + $x1);
              |RogueInt32  inverse_mask = ~$channel_mask;
              |while (--$rows >= 0)
              |{
              |  for (int i=$row_width; --i>=0; )
              |  {
              |    *dest = (*dest & inverse_mask) | $argb;
              |    ++dest;
              |  }
              |  dest += $row_skip;
              |}

    method extend_edges( bounds:Box )
      local x1 = bounds.position.x
      local y1 = bounds.position.y
      local w  = bounds.size.x
      local h  = bounds.size.y
      local x2 = x1 + (w - 1)
      local y2 = y1 + (h - 1)
      blit( Box(x1,y1,w,1), this, XY(x1,y1-1) )  # top
      blit( Box(x1,y2,w,1), this, XY(x1,y2+1) )  # bottom
      blit( Box(x1,y1-1,1,h+2), this, XY(x1-1,y1-1) )  # left
      blit( Box(x2,y1-1,1,h+2), this, XY(x2+1,y1-1) )  # right

    method expand_to_power_of_two->this
      local wp2 = width.to_power_of_two
      local hp2 = height.to_power_of_two
      if (wp2 == width and hp2 == height) return this

      local result = Bitmap( wp2, hp2 )
      this.blit( result, XY(0,0) )
      width = result.width
      height = result.height
      pixels = result.pixels
      error = result.error

      return this

    method decode( bytes:Byte[] )->Logical
      if (bytes.count < 4) return false

      if (bytes[0] == 0x89 and bytes[1] == 'P' and bytes[2] == 'N' and bytes[3] == 'G')
        local decoder = PNGDecoder()
        return decoder.decode( bytes, this )?

      elseIf (bytes[0] == 0xFF and bytes[1] == 0xD8)
        local decoder = JPEGDecoder()
        return decoder.decode( bytes, this )?

      endIf

      return false

    method get( x:Int32, y:Int32 )->Color
      return pixels[ y*width + x ]

    method is_opaque->Logical
      local pixel_count = width * height
      native @|RogueInt32* data = (RogueInt32*) $pixels->data->as_int32s;
              |for (int i=$pixel_count; --i>=0; )
              |{
              |  if ((data[i] & 0xFF000000) != 0xFF000000)
              |  {
              |    return false;
              |  }
              |}
              |return true;

    method draw( box:Box, color:Color )
      fill( Box(box.top_left, XY(box.width,1)), color )
      fill( Box(box.bottom_left-XY(0,1), XY(box.width,1)), color )

      fill( Box(box.top_left,            XY(1,box.height)), color )
      fill( Box(box.top_right - XY(1,0), XY(1,box.height)), color )

    method draw( box:Box, color:Color, channel_mask:Int32 )
      fill( Box(box.top_left, XY(box.width,1)), color, channel_mask )
      fill( Box(box.bottom_left-XY(0,1), XY(box.width,1)), color, channel_mask )

      fill( Box(box.top_left,            XY(1,box.height)), color, channel_mask )
      fill( Box(box.top_right - XY(1,0), XY(1,box.height)), color, channel_mask )

    method premultiply_alpha->this
      # Multiplies the R,G,B components of each color by their current
      # alpha value - so Color(255,192,0,127) becomes Color(127,95,0,127).
      forEach (i of pixels)
        local argb = pixels[i].argb
        local a = argb :>>>: 24 & 255
        local r = argb :>>>: 16 & 255
        local g = argb :>>>: 8 & 255
        local b = argb & 255
        r = (r * a) / 255
        g = (g * a) / 255
        b = (b * a) / 255
        pixels[i] = Color( (a:<<:24) | (r:<<:16) | (g:<<:8) | b )
      endForEach
      return this

    method reframe( new_width:Int32, new_height:Int32, anchor=Anchor.TOP_LEFT:Anchor )
      if (width == new_width and height == new_height) return

      local bounds = Box(this.size).positioned_within( Box(new_width,new_height), anchor )
      local reframed = Bitmap( bounds.size )
      blit( reframed, bounds.position )

      this.width = reframed.width
      this.height = reframed.height
      this.pixels = reframed.pixels

    method resize( new_width:Int32, new_height:Int32 )->this
      return resize( XY(new_width,new_height) )

    method resize( new_size:XY )->this
      local result = resized( new_size )
      width = result.width
      height = result.height
      pixels = result.pixels
      error = result.error
      return this

    method resize_to( other:Bitmap )
      # Uses a custom algorithm inspired by Bresenham's line drawing algorithm.
      local this_width  = this.width
      local this_height = this.height
      local new_width   = other.width
      local new_height  = other.height

      # Each ARGB component needs a separate int
      resize_row_buffer.ensure_capacity( new_width * 4 )
      resize_row_buffer.clear
      forEach (1..new_width*4) resize_row_buffer.add( 0 )

      local src_i = 0
      local dest_i = 0
      local total_area = this_width * this_height

      local available = new_height
      forEach (1..new_height)
        local need = this_height
        while (need >= available)
          resize_add_row( src_i, new_width, available )
          src_i += this_width

          need -= available
          available = new_height
        endWhile
        if (need)
          resize_add_row( src_i, new_width, need )

          available -= need
          if (available == 0)
            src_i += this_width
            available = new_height
          endIf
        endIf
        resize_write_row( other, dest_i, new_width, total_area )
        dest_i += new_width
      endForEach

    method resize_add_row( src_i:Int32, new_width:Int32, multiplier:Int32 )
      local this_width = width
      local available = new_width
      local buffer = resize_row_buffer.data
      local buffer_i = 0
      native @|RogueByte* src = (RogueByte*)($pixels->data->as_int32s + $src_i);

      forEach (1..new_width)
        local b = 0
        local g = 0
        local r = 0
        local a = 0
        local need = this_width
        while (need >= available)
          b += native("(RogueInt32)src[0]")->Int32 * available
          g += native("(RogueInt32)src[1]")->Int32 * available
          r += native("(RogueInt32)src[2]")->Int32 * available
          a += native("(RogueInt32)src[3]")->Int32 * available
          native @|src += 4;

          need -= available
          available = new_width
        endWhile

        if (need)
          b += native("(RogueInt32)src[0]")->Int32 * need
          g += native("(RogueInt32)src[1]")->Int32 * need
          r += native("(RogueInt32)src[2]")->Int32 * need
          a += native("(RogueInt32)src[3]")->Int32 * need

          available -= need
          if (available == 0)
            native @|src += 4;
            available = new_width
          endIf
        endIf

        buffer[buffer_i]   += b * multiplier
        buffer[buffer_i+1] += g * multiplier
        buffer[buffer_i+2] += r * multiplier
        buffer[buffer_i+3] += a * multiplier

        buffer_i += 4
      endForEach

    method resize_write_row( dest_bitmap:Bitmap, dest_i:Int32, new_width:Int32, divisor:Int32 )
      local row_buffer = resize_row_buffer
      native @|RogueByte*  dest = (RogueByte*)($dest_bitmap->pixels->data->as_int32s + $dest_i);
              |RogueInt32* buffer = $row_buffer->data->as_int32s;

      forEach (1..new_width)
        native @|dest[0]   = buffer[0] / $divisor;
                |buffer[0] = 0;
                |dest[1]   = buffer[1] / $divisor;
                |buffer[1] = 0;
                |dest[2]   = buffer[2] / $divisor;
                |buffer[2] = 0;
                |dest[3]   = buffer[3] / $divisor;
                |buffer[3] = 0;
                |dest   += 4;
                |buffer += 4;
      endForEach

    method resized( new_width:Int32, new_height:Int32 )->Bitmap
      return resized( XY(new_width,new_height) )

    method resized( new_size:XY )->Bitmap
      local result = Bitmap( new_size )
      resize_to( result )
      return result

    method save_as_png( file:File )->Logical
      return file.save( to_png_bytes )

    method save_as_jpeg( file:File, quality=75:Int32 )->Logical
      return file.save( to_jpeg_bytes(quality) )

    method set( x:Int32, y:Int32, color:Color )->this
      pixels[ y*width + x ] = color
      return this

    method size->XY
      return XY( width, height )

    method to->String
      return "($x$ Bitmap)" (width,height)

    method to_png_bytes->Byte[]
      return PNGEncoder().encode( this )

    method to_jpeg_bytes( quality=75:Int32 )->Byte[]
      return JPEGEncoder().encode( this, null, quality )

endClass


