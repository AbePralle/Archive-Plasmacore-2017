module Plasmacore

class ProgressFn [singleton]
  PROPERTIES
    BACK            = function(p:Real64)->(Real64)
                        if( p < 0.5 )
                          return p * p * (7 * p - 2.5) * 2
                        else
                          --p
                          return 1 + p * p * 2 * (7 * p + 2.5)
                        endIf
                      endFunction
    BOUNCE          = function(p:Real64)->(Real64)
                        if( p < 0.5 )
                          return 8 * 2 ^ (8 * (p - 1) ) * Math.sin( p * pi * 7 ).abs
                        else
                          return 1 - 8 * 2 ^ (-8 * p) * Math.sin( p * pi * 7 ).abs
                        endIf
                      endFunction
    CIRCULAR        = function(p:Real64)->(Real64)
                        if( p < 0.5 )
                          return (1 - Math.sqrt( 1 - 2 * p )) * 0.5
                        else
                          return (1 + Math.sqrt( 2 * p - 1 )) * 0.5
                        endIf
                      endFunction
    CUBIC           = function(p:Real64)->(Real64)
                        p *= 2
                        if (p < 1) return 0.5 * p * p * p
                        p -= 2
                        return 0.5 * (p * p *p + 2)
                      endFunction
    ELASTIC         = function(p:Real64)->(Real64)
                        if( p < 0.45 )
                          local p2 = p * p
                          return 8 * p2 * p2 * Math.sin( p * pi * 9 )
                        elseIf( p < 0.55 )
                          return 0.5 + 0.75 * Math.sin( p * pi * 4 )
                        else
                          local p2 = (p - 1) * (p - 1)
                          return 1 - 8 * p2 * p2 * Math.sin( p * pi * 9 )
                        endIf
                      endFunction
    EXPONENTIAL     = function(p:Real64)->(Real64)
                        if( p < 0.5 )
                          return (2^(16 * p) - 1) / 510
                        else
                          return 1 - 0.5 * 2 ^ (-16 * (p - 0.5))
                        endIf
                      endFunction
    LINEAR          = function(p:Real64)->(Real64): return p
    QUADRATIC       = function(p:Real64)->(Real64): return select{ p<0.5:2*p*p || 0.5 + (0.5-p) * (2*p-3) }
    QUARTIC         = function(p:Real64)->(Real64)
                        if (p < 0.5)
                          p *= p
                          return 8 * p * p
                        else
                          --p
                          p *= p
                          return 1 - 8 * p * p
                        endIf
                      endFunction
    QUINTIC         = function(p:Real64)->(Real64)
                        if( p < 0.5 )
                          local p2 = p * p
                          return 16 * p * p2 * p2
                        else
                          local p2 = (p - 1) * p
                          return 1 + 16 * p * p2 * p2
                        endIf
                      endFunction
    SINE            = function(p:Real64)->(Real64): return 0.5 * (1 + Math.sin( 3.1415926 * (p - 0.5) ) )

    BACK_IN         = function(p:Real64)->(Real64): return p * p * (2.70158 * p - 1.70158)
    BOUNCE_IN       = function(p:Real64)->(Real64): return 2 ^ (6 * (p - 1)) * Math.sin( p * pi * 3.5 ).abs
    CIRCULAR_IN     = function(p:Real64)->(Real64): return 1 - Math.sqrt( 1 - p )
    CUBIC_IN        = function(p:Real64)->(Real64): return p * p * p
    ELASTIC_IN      = function(p:Real64)->(Real64)
                        local p2 = p * p
                        return p2 * p2 * Math.sin( p * pi * 4.5 )
                      endFunction
    EXPONENTIAL_IN  = function(p:Real64)->(Real64): return (2^(8*p) - 1) / 255
    QUADRATIC_IN    = function(p:Real64)->(Real64): return p * p
    QUARTIC_IN      = function(p:Real64)->(Real64): p *= p; return p * p
    QUINTIC_IN      = function(p:Real64)->(Real64)
                        local p2 = p * p
                        return p * p2 * p2
                      endFunction
    SINE_IN         = function(p:Real64)->(Real64): return Math.sin( 1.5707963 * p )

    BACK_OUT        = function(p:Real64)->(Real64): return (p-1) * (p-1) * (2.70158*(p-1) + 1.70158) + 1
    BACK_EASY_OUT   = function(p:Real64)->(Real64): return 1 - ((1.0 - p)^2 - (1.0 - p)/1.25 * Radians((1.0 - p) * pi).sin)
    BOUNCE_OUT      = function(p:Real64)->(Real64): return 1 - 2 ^ (-6 * p) * Math.cos( p * pi * 3.5 ).abs
    CIRCULAR_OUT    = function(p:Real64)->(Real64): return Math.sqrt( p )
    CUBIC_OUT       = function(p:Real64)->(Real64): --p; return 1 + p * p * p
    QUADRATIC_OUT   = function(p:Real64)->(Real64): return p * (2 - p)
    ELASTIC_OUT     = function(p:Real64)->(Real64)
                        local p2 = (p - 1) * (p - 1)
                        return 1 - p2 * p2 * Math.cos( p * pi * 4.5 )
                      endFunction
    EXPONENTIAL_OUT = function(p:Real64)->(Real64): return 1 - 2^(-8*p)
    QUARTIC_OUT     = function(p:Real64)->(Real64): --p; p *= p; return 1 - p * p
    QUINTIC_OUT     = function(p:Real64)->(Real64)
                        local p2 = (p - p) * p
                        return 1 + p * p2 * p2
                      endFunction
    SINE_OUT        = function(p:Real64)->(Real64): return 1 + Math.sin( 1.5707963 * (p-1) )
endClass

