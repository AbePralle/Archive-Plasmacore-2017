module Plasmacore::GG

class Component
  PROPERTIES
    parent            : Component

    position          : XY   # Absolute position computed during layout
    size              : XY

    relative_position : XY   # Relative to parent's top-left corner
    fixed_size        : XY   # A zero indicates no fixed size in that dimension.
    anchor            = Anchor.CENTER : Anchor
    content_anchor    = Anchor.CENTER : Anchor

    organized_subcomponents : Component[]
    floating_subcomponents  : Component[]

  METHODS
    method init( fixed_size )

    method add( component:Component )->this
      ensure organized_subcomponents
      organized_subcomponents.add( component.detach )
      component.parent = this
      return this

    method add( component:Component, pos:XY )->this
      ensure floating_subcomponents
      floating_subcomponents.add( component.detach )
      component.parent = this
      component.relative_position = pos
      return this


    #{
    method add( component:Component, options=null:Value )->this
      throw UnsupportedOperationError()

    method after( e:KeyEvent )

    method after( e:PointerEvent )
      }#

    method after_draw

    method after_update

    method bounds->Box
      return Box( @position, size )

      #{
    method dispatch( e:KeyEvent )

    method dispatch( e:PointerEvent )
      }#

    method detach->this
      if (parent)
        if (parent.organized_subcomponents) parent.organized_subcomponents.remove( this )
        if (parent.floating_subcomponents) parent.floating_subcomponents.remove( this )
      endIf
      return this

    method dispatch_draw
      if (organized_subcomponents)
        (forEach in organized_subcomponents).handle_draw
      endIf

      if (floating_subcomponents)
        (forEach in floating_subcomponents).handle_draw
      endIf

    method dispatch_update

      #{
    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      dispatch( e )
      if (e.is_consumed) return

      after( e )
      }#

    method handle_draw
      on_draw
      dispatch_draw
      after_draw

    method handle_resize

    method handle_update
      on_update
      dispatch_update
      after_update

    method horizontal_flex->Real64
      return 0.0

    method maximum_height->Real64
      return fixed_size.y

    method maximum_size->XY
      return XY( maximum_width, maximum_height )

    method maximum_width->Real64
      return fixed_size.x

    method minimum_height->Real64
      return fixed_size.y

    method minimum_size->XY
      return XY( minimum_width, minimum_height )

    method minimum_width->Real64
      return fixed_size.x


    method on( e:KeyEvent )

    method on( e:PointerEvent )

    method on_draw

    method on_update

    method operator+( right_component:Component )->Component
      return HorizontalLayout().add( this ).add( right_component )

    method operator/( bottom_component:Component )->Component
      return VerticalLayout().add( this ).add( bottom_component )

    method perform_layout
      forEach (component in organized_subcomponents)
        component.update_layout( bounds )
      endForEach

    method position->XY
      return bounds.at( anchor )

    method update_layout( bounds:Box )
      position = bounds.position
      size     = bounds.size

      update_child_components

    method update_child_components
      update_organized_subcomponents
      update_floating_subcomponents

    method update_organized_subcomponents
      if (organized_subcomponents and organized_subcomponents.count)
        perform_layout
      endIf

    method update_floating_subcomponents
      if (floating_subcomponents)
        # Update the absolute positions of floating components by adding each one's relative
        # position to its parent's position.
        forEach (component in floating_subcomponents)
          component.update_layout( Box(this.@position + component.relative_position, component.size).relative_to(component.anchor)  )
        endForEach
      endIf

    method vertical_flex->Real64
      return 0.0
endClass
