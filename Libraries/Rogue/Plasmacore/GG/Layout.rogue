module Plasmacore::GG

class Layout : Component
  PROPERTIES
  METHODS
endClass


class HorizontalLayout : Component
  METHODS
    method init

    method horizontal_flex->Real64
      local flex = 0.0
      if (organized_subcomponents)
        forEach (component in organized_subcomponents)
          flex += component.horizontal_flex
        endForEach
      endIf
      return flex

    method maximum_width->Real64
      if (fixed_size.x) return fixed_size.x
      if (not organized_subcomponents) return 0

      local max_width = 0
      forEach (component in organized_subcomponents)
        local w = component.maximum_width
        if (w == 0) return 0
        max_width += w
      endForEach
      return max_width

    method maximum_height->Real64
      if (fixed_size.y) return fixed_size.y
      if (not organized_subcomponents) return 0

      local max_height = 0
      forEach (component in organized_subcomponents)
        local h = component.maximum_height
        if (h == 0) return 0
        max_height = max_height.or_larger( h )
      endForEach
      return max_height

    method minimum_width->Real64
      if (fixed_size.x) return fixed_size.x
      if (not organized_subcomponents) return 0

      local min_width = 0
      forEach (component in organized_subcomponents)
        min_width += component.minimum_width
      endForEach
      return min_width

    method minimum_height->Real64
      if (fixed_size.y) return fixed_size.y
      if (not organized_subcomponents) return 0

      local min_height = 0
      forEach (component in organized_subcomponents)
        min_height = min_height.or_larger( component.minimum_height )
      endForEach
      return min_height

    method perform_layout
      local min_width = this.minimum_width
      local max_width = this.maximum_width

      local content_width = this.size.x
      if (content_width < min_width) content_width = min_width
      if (max_width and content_width > max_width) content_width = max_width

      if (content_width > min_width)
        # Distribute extra width (beyond minimum) to components before laying out
        local extra = content_width - min_width
        local total_flex = this.horizontal_flex
        forEach (component in organized_subcomponents)
          local flex = component.horizontal_flex
          if (flex)
            local w = Int32( extra * flex / total_flex )
            component.size = XY(component.minimum_width+w,0)
            extra -= w
            content_width += w
          else
            component.size = component.minimum_size
          endIf
        endForEach

      else
        # All components get set to their minimum width
        forEach (component in organized_subcomponents)
          component.size = component.minimum_size
        endForEach
      endIf

      local x = @position.x + content_anchor.position.x * (size.x - content_width)
      forEach (component in organized_subcomponents)
        local min_height = component.minimum_height
        local max_height = component.maximum_height
        local content_height = this.size.y
        if (content_height < min_height) content_height = min_height
        if (max_height and content_height > max_height) content_height = max_height
        local y = @position.y + content_anchor.position.y * (size.y - content_height)
        local w = component.size.x
        component.update_layout( Box(x,y,w,content_height) )
        x += w
      endForEach

endClass

class VerticalLayout : Component
  METHODS
    method init

    method maximum_height->Real64
      if (fixed_size.y) return fixed_size.y
      if (not organized_subcomponents) return 0

      local max_height = 0
      forEach (component in organized_subcomponents)
        local h = component.maximum_height
        if (h == 0) return 0
        max_height += h
      endForEach
      return max_height

    method maximum_width->Real64
      if (fixed_size.x) return fixed_size.x
      if (not organized_subcomponents) return 0

      local max_width = 0
      forEach (component in organized_subcomponents)
        local w = component.maximum_width
        if (w == 0) return 0
        max_width = max_width.or_larger( w )
      endForEach
      return max_width

    method minimum_height->Real64
      if (fixed_size.y) return fixed_size.y
      if (not organized_subcomponents) return 0

      local min_height = 0
      forEach (component in organized_subcomponents)
        min_height += component.minimum_height
      endForEach
      return min_height

    method minimum_width->Real64
      if (fixed_size.x) return fixed_size.x
      if (not organized_subcomponents) return 0

      local min_width = 0
      forEach (component in organized_subcomponents)
        min_width = min_width.or_larger( component.minimum_width )
      endForEach
      return min_width

    method perform_layout
      local min_height = this.minimum_height
      local max_height = this.maximum_height

      local content_height = this.size.y
      if (content_height < min_height) content_height = min_height
      if (max_height and content_height > max_height) content_height = max_height

      if (content_height > min_height)
        # Distribute extra height (beyond minimum) to components before laying out
        local extra = content_height - min_height
        local total_flex = this.vertical_flex
        forEach (component in organized_subcomponents)
          local flex = component.vertical_flex
          if (flex)
            local h = Int32( extra * flex / total_flex )
            component.size = XY(0,component.minimum_height+h)
            extra -= h
            content_height += h
          else
            component.size = component.minimum_size
          endIf
        endForEach

      else
        # All components get set to their minimum height
        forEach (component in organized_subcomponents)
          component.size = component.minimum_size
        endForEach
      endIf

      local y = @position.y + content_anchor.position.y * (size.y - content_height)
      forEach (component in organized_subcomponents)
        local min_width = component.minimum_width
        local max_width = component.maximum_width
        local content_width = this.size.x
        if (content_width < min_width) content_width = min_width
        if (max_width and content_width > max_width) content_width = max_width
        local x = @position.x + content_anchor.position.x * (size.x - content_width)
        local h = component.size.y
        component.update_layout( Box(x,y,content_width,h) )
        y += h
      endForEach

    method vertical_flex->Real64
      local flex = 0.0
      if (organized_subcomponents)
        forEach (component in organized_subcomponents)
          flex += component.vertical_flex
        endForEach
      endIf
      return flex

endClass
