module Plasmacore

class JPEGDecoder
  DEPENDENCIES
    nativeHeader #include <setjmp.h>
    nativeHeader #include "jpeglib.h"

    nativeCode
      void Rogue_jpeg_decoder_error_callback( j_common_ptr jpeg_info )
      {
        (*jpeg_info->err->output_message)( jpeg_info );

        longjmp( ((RogueClassPlasmacore__JPEGErrorHandler*)jpeg_info->err)->on_error, 1 );
      }
    endNativeCode

  PROPERTIES
    image_width   : Int32
    image_height  : Int32
    encoded_bytes : Byte[]
    error_handler = JPEGErrorHandler()
    native          "struct jpeg_decompress_struct jpeg_info;"

  METHODS
    method decode( encoded_bytes, dest_bitmap=null:Bitmap, &make_power_of_two )->Bitmap
      native @|$this->jpeg_info.err = jpeg_std_error( (struct jpeg_error_mgr*) &$error_handler );
              |$error_handler.jpeg_error_manager.error_exit = Rogue_jpeg_decoder_error_callback;
              |
              |jpeg_create_decompress( &$this->jpeg_info );
              |
              |if (setjmp($error_handler.on_error))
              |{
              |  // Caught an error
              |  jpeg_destroy_decompress( &$this->jpeg_info );
              |  return 0;
              |}
              |
              |jpeg_mem_src( &$this->jpeg_info, $encoded_bytes->data->as_bytes, $encoded_bytes->count );
              |jpeg_read_header( &$this->jpeg_info, TRUE );
              |
              |jpeg_start_decompress( &$this->jpeg_info );
              |
              |$image_width = $this->jpeg_info.output_width;
              |$image_height = $this->jpeg_info.output_height;

               local w = image_width
               local h = image_height
               if (make_power_of_two)
                 w = w.to_power_of_two
                 h = h.to_power_of_two
               endIf

               ensure dest_bitmap( w, h )
               ensure dest_bitmap.pixels( w * h )
               dest_bitmap.pixels.ensure_capacity( w * h )
               dest_bitmap.pixels.count = w * h
               dest_bitmap.width = w
               dest_bitmap.height = h

      native @|int iw = $image_width;
              |int ih = $image_height;
              |RogueInt32* dest = $dest_bitmap->pixels->data->as_int32s;
              |int j = $this->jpeg_info.output_scanline;
              |while (j < ih)
              |{
              |  jpeg_read_scanlines( &$this->jpeg_info, (RogueByte**)&dest, 1 );
              |
              |  if ($this->jpeg_info.jpeg_color_space == JCS_GRAYSCALE)
              |  {
              |    // Convert JPEG grayscale buffer to ARGB
              |    RogueByte* src = ((RogueByte*)dest) + iw;
              |    dest += iw;
              |    for (int i=iw; --i>=0;)
              |    {
              |      int k = *(--src);
              |      *(--dest) = (255<<24) | (k<<16) | (k<<8) | k;
              |    }
              |  }
              |  else
              |  {
              |    // Convert JPEG RGB buffer to ARGB
              |    RogueByte* src = ((RogueByte*)dest) + (iw-1)*3;
              |    dest += iw;
              |    for (int i=iw; --i>=0;)
              |    {
              |      int r = src[0];
              |      int g = src[1];
              |      int b = src[2];
              |      *(--dest) = (255<<24) | (r<<16) | (g<<8) | b;
              |      src -= 3;
              |    }
              |  }
              |
              |  dest += $w;
              |  j = $this->jpeg_info.output_scanline;
              |}
              |
              |jpeg_finish_decompress( &$this->jpeg_info );
              |jpeg_destroy_decompress( &$this->jpeg_info );

      # If we expanded the bitmap size to a power of two, extend the right
      # and/or bottom edges to prevent artifacts when used as a texture.
      if (image_width < w)
        dest_bitmap.blit( Box(image_width-1,0,1,image_height), dest_bitmap, XY(image_width,0) )
      endIf
      if (image_height < h)
        dest_bitmap.blit( Box(0,image_height-1,image_width,1), dest_bitmap, XY(0,image_height) )
      endIf

      return dest_bitmap

    method image_size->XY
      return XY( image_width, image_height )
endClass

class JPEGEncoder
  DEPENDENCIES
    nativeHeader
      #include <setjmp.h>
      #include "jpeglib.h"
    endNativeHeader

    nativeCode
      void Rogue_jpeg_encoder_error_callback( j_common_ptr jpeg_info )
      {
        (*jpeg_info->err->output_message)( jpeg_info );

        longjmp( ((RogueClassPlasmacore__JPEGErrorHandler*)jpeg_info->err)->on_error, 1 );
      }
    endNativeCode

  PROPERTIES
    error_handler = JPEGErrorHandler()
    native          "struct jpeg_compress_struct jpeg_info;"

  METHODS
    method encode( bitmap:Bitmap, encoded_bytes=null:Byte[], quality=75:Int32 )->Byte[]
      local encoded_size = 0
      local width = bitmap.width
      local height = bitmap.height

      native @|unsigned long encoded_size = 0;
              |RogueByte*    encoded_buffer = 0;
              |JSAMPROW      row_pointer;
              |
              |$this->jpeg_info.err = jpeg_std_error( (struct jpeg_error_mgr*) &$error_handler );
              |$error_handler.jpeg_error_manager.error_exit = Rogue_jpeg_encoder_error_callback;
              |
              |jpeg_create_compress( &$this->jpeg_info );
              |
              |if (setjmp($error_handler.on_error))
              |{
              |  jpeg_destroy_compress( &$this->jpeg_info );
              |  return 0;
              |}
              |
              |jpeg_mem_dest( &$this->jpeg_info, &encoded_buffer, &encoded_size );
              |
              |$this->jpeg_info.image_width      = $width;
              |$this->jpeg_info.image_height     = $height;
              |$this->jpeg_info.input_components = 3;
              |$this->jpeg_info.in_color_space   = JCS_RGB;
              |
              |jpeg_set_defaults( &$this->jpeg_info );
              |jpeg_set_quality( &$this->jpeg_info, $quality, TRUE );  // 0..100
              |jpeg_start_compress( &$this->jpeg_info, TRUE );
              |
              |RogueByte* buffer = new RogueByte[ $width*3 ];
              |row_pointer = buffer;
              |
              |while ($this->jpeg_info.next_scanline < $height)
              |{
              |  int j = $this->jpeg_info.next_scanline;
              |  RogueInt32* pixels = $bitmap->pixels->data->as_int32s + j*$width - 1;
              |  int n = $width;
              |  Byte*    dest = buffer;
              |  while (--n >= 0)
              |  {
              |    int color = *(++pixels);
              |    dest[0] = (Byte) (color >> 16);
              |    dest[1] = (Byte) (color >> 8);
              |    dest[2] = (Byte) color;
              |    dest += 3;
              |  }
              |
              |  jpeg_write_scanlines( &$this->jpeg_info, &row_pointer, 1 );
              |}
              |
              |delete[] buffer;
              |
              |jpeg_finish_compress( &$this->jpeg_info );
              |$encoded_size = (RogueInt32) encoded_size;

      ensure encoded_bytes( encoded_size )
      encoded_bytes.ensure_capacity( encoded_size )
      encoded_bytes.count = encoded_size

      native @|memcpy( $encoded_bytes->data->as_bytes, encoded_buffer, $encoded_size );

      return encoded_bytes
endClass


class JPEGErrorHandler [compound]
  PROPERTIES
    native "struct jpeg_error_mgr jpeg_error_manager;"
    native "jmp_buf               on_error;"
endClass


