module Plasmacore

class GGList : GGComponent
  GLOBAL METHODS
    method horizontal( bounds:Box )->GGList
      return GGList( bounds, true )

    method vertical( bounds:Box )->GGList
      return GGList( bounds, false )

  PROPERTIES
    is_horizontal : Logical
    offset        : XY
    max_offset    : Real64
    velocity      : XY
    acceleration  : Real64

    content_size  : Int32

    is_pressed    : Logical
    is_dragging   : Logical

    drag_start    : XY
    drag_delta    : Real64
    drag_deltas   = Real64[]
    cur_pos       : XY
    drag_time     = Stopwatch()

  METHODS
    method init( is_horizontal=false )

    method init( box:Box, is_horizontal=false )
      position = box.position
      size = box.size
      fixed_size = size

    method init( fixed_size, is_horizontal=false )
      size = fixed_size

    method adjust_offset( new_pos:XY )
      local delta = new_pos - cur_pos
      if (is_horizontal)
        if (offset.x > 0 and delta.x > 0)
          local resistance = 1.0 - (offset.x / content_size.or_smaller(size.x).or_larger(1))
          delta *= resistance^4
        elseIf (offset.x < max_offset and delta.x < 0)
          local resistance = 1.0 - (max_offset - offset.x) / content_size.or_smaller(size.x).or_larger(1)
          delta *= resistance^4
        endIf
        delta = delta.xv
        drag_delta = delta.x
      else
        if (offset.y > 0 and delta.y > 0)
          local resistance = 1.0 - (offset.y / content_size.or_smaller(size.y).or_larger(1))
          delta *= resistance^4
        elseIf (offset.y < max_offset and delta.y < 0)
          local resistance = 1.0 - (max_offset - offset.y) / content_size.or_smaller(size.y).or_larger(1)
          delta *= resistance^4
        endIf
        delta = delta.yv
        drag_delta = delta.y
      endIf
      offset += delta
      cur_pos = new_pos

    method dispatch_draw
      if (subcomponents)
        Display.push_clipping_region( bounds.transformed(Display.view_transform) )
        local drawn_any = false
        forEach (component in subcomponents)
          if (component.bounds.intersects(bounds))
            component.handle_draw
            drawn_any = true
          elseIf (drawn_any)
            if (component.size.x and component.size.y)
              # Only quit non-zero-sized components
              escapeForEach
            endIf
          endIf
        endForEach
        Display.pop_clipping_region
      endIf

    method handle( e:PointerEvent )
      GGComponentManager.pointer_position = e.position
      if (e.is_press)
        if (not is_dragging and contains(e))
          acceleration = 0.10   # halt any scrolling going on
          is_pressed = true
          drag_time.restart
          cur_pos = e.position
          drag_start = cur_pos
          GGComponentManager.pointer_focus = this
        endIf
      elseIf (e.is_move)
        if (is_dragging)
          adjust_offset( e.position )
        elseIf (is_pressed)
          if (e.position.distance_to(cur_pos) >= Display.size.magnitude * 0.01)
            is_dragging = true
            drag_deltas.clear
            adjust_offset( e.position )
          endIf
        else
          # Pass move event to appropriate list item
          local component = find( e )
          if (component) component.handle( e )
        endIf
      elseIf (e.is_release)
        is_pressed = false
        GGComponentManager.pointer_focus = null
        if (is_dragging)
          is_dragging = false
          acceleration = 0.10
          if (drag_deltas.count)
            local sum = 0.0
            sum += (forEach in drag_deltas)
            local avg = sum / drag_deltas.count
            if (avg.abs >= 5)
              acceleration = 0.96
              if (is_horizontal) velocity += XY( avg, 0 )
              else               velocity += XY( 0, avg )
            endIf
          endIf
        else
          acceleration = 0.10
          if (velocity.abs.max < 1)
            # We pressed and released list without dragging it.  Generate a press/release event
            # for the appropriate list item.
            local component = find( e )
            if (component)
              component.handle( PointerEvent(PointerEvent.PRESS,e.position,XY(0,0),e.index,e.id) ) # Press
              component.handle( e ) # Release
            endIf
          endIf
        endIf
      endIf

    method on_update
      if (is_dragging)
        # Save 1/10th second of drag deltas
        drag_deltas.add( drag_delta )
        if (drag_deltas.count > 10) drag_deltas.remove_first
      endIf

      if (not velocity.is_zero)
        offset += velocity
        velocity *= acceleration
        if (velocity.abs.max < 0.1) velocity = XY(0,0)
      endIf

      if (not is_dragging)
        if (is_horizontal)
          if (offset.x > 0)
            offset   *= XY(0.8,1)
            acceleration = 0.50
          elseIf (offset.x < max_offset)
            offset = XY( max_offset + (offset.x - max_offset) * 0.8, offset.y )
            acceleration = 0.50
          endIf
        else
          if (offset.y > 0)
            offset   *= XY(1,0.8)
            acceleration = 0.50
          elseIf (offset.y < max_offset)
            offset = XY( offset.x, max_offset + (offset.y - max_offset) * 0.8 )
            acceleration = 0.50
          endIf
        endIf
      endIf

      update_layout

      if (subcomponents)
        (forEach in subcomponents).update
      endIf

    method update_layout
      content_size = 0

      if (subcomponents)
        local pos = position + offset
        forEach (component in subcomponents)
          component.update_layout( Box(pos,component.size) )
          if (is_horizontal) pos += component.size.xv; content_size += component.size.x
          else               pos += component.size.yv; content_size += component.size.y
        endForEach
      endIf

      if (is_horizontal)
        max_offset = -((content_size - size.x).or_larger( 0 ))
      else
        max_offset = -((content_size - size.y).or_larger( 0 ))
      endIf

endClass
