module Plasmacore

class Display [singleton]
  DEPENDENCIES
    $if "iOS"
      nativeHeader
        #include <OpenGLES/ES2/gl.h>
        #include <OpenGLES/ES2/glext.h>
        #define glClearDepth glClearDepthf
      endNativeHeader

    $elseIf "Linux" or "emscripten"
      nativeHeader
        #include <GLES2/gl2.h>
        #include <GLES2/gl2ext.h>
        #define glClearDepth glClearDepthf
      endNativeHeader

    $elseIf "macOS"
      nativeHeader #include <OpenGL/gl.h>
    $endIf

  DEFINITIONS
    VERTEX_BUFFER_SIZE = 4096

  GLOBAL PROPERTIES
    default_unit_z    = 512.0
    default_view_type = @View : TypeInfo

  PROPERTIES
    color_shader                       : Shader
    texture_shader                     : Shader
    texture_shader_with_color_multiply : Shader
    texture_shader_with_color_add      : Shader
    texture_shader_with_color_fill     : Shader

    name               : String
    view               = default_view_type.create_object<<View>> : View

    window             : Window

    update_timer       = UpdateTimer()

    pointer_position   : XY
    pointer_exists     : Logical

    size                : XY
    true_size           : XY
    viewport_size       : XY
    target_display_size : XY?
    display_scale       : Real64

    perspective_center : XY
    # The "origin" for 3D perspective and the vanishing point for polygons
    # parallel to the camera axis.  Reset to Display.center at the beginning
    # of every draw.

    clipping_region       : Box?
    clipping_region_stack = Box[]

    background_color = Color.BLACK : Color

    projection_transform : Matrix
    transform            : Matrix
    view_transform       = Matrix.identity : Matrix
    object_transform     = Matrix.identity : Matrix
    view_transforms      = Matrix[]
    object_transforms    = Matrix[]

    transform_modified            : Logical
    view_transform_modified       : Logical
    object_transform_modified     : Logical

    projection_mode   = ProjectionMode2DX()
    unit_z            = default_unit_z : Real64

    custom_shader          : Shader
    active_render_mode     : RenderMode
    active_textures        = Texture[]
    active_primitive_type  = 3

    vertex_count           : Int32
    vertex_positions       = Real32[]
    vertex_uvs             = Real32[]
    vertex_colors          = Int32[]

    textures_by_name   = StringTable<<Texture>>()
    texture_list       = Texture[]

    font_data_by_name  = StringTable<<FontData>>()

    system_font  : Font
    default_font : Font

    native "GLuint pos_buf, color_buf, uv_buf;"

  GLOBAL METHODS
    method create( name:String )->Display
      return Plasmacore.display( name )

  METHODS
    method init
      vertex_positions.ensure_capacity( VERTEX_BUFFER_SIZE * 4 )
      vertex_uvs.ensure_capacity( VERTEX_BUFFER_SIZE )
      vertex_colors.ensure_capacity( VERTEX_BUFFER_SIZE * 2 )

    method on_cleanup
      native @|if ($this->pos_buf)
              |{
              |  glDeleteBuffers(1, &$this->pos_buf);
              |  glDeleteBuffers(1, &$this->color_buf);
              |  glDeleteBuffers(1, &$this->uv_buf);
              |}

    method activate_view_and_state
      if (not color_shader)
        # Set up default shaders
        color_shader                       = Shader.create_color_shader
        texture_shader                     = Shader.create_texture_shader
        texture_shader_with_color_multiply = Shader.create_texture_shader_with_color_multiply
        texture_shader_with_color_add      = Shader.create_texture_shader_with_color_add
        texture_shader_with_color_fill     = Shader.create_texture_shader_with_color_fill
      endIf

      native @|if (!$this->pos_buf)
              |{
              |  glGenBuffers(1, &$this->pos_buf);
              |  glGenBuffers(1, &$this->color_buf);
              |  glGenBuffers(1, &$this->uv_buf);
              |}

      if (not view) view = default_view_type.create_object<<View>>
      view.display = this
      view.state.view = view

      # On any new views and states: call on_start, ensure on_update has been called once
      # before any later drawing, and repeat the process if the view or state changes during
      # the process.
      loop
        if (not view.is_active)
          view.is_active = true
          view.on_start
          nextIteration
        endIf

        if (not view.state.is_active)
          view.state.is_active = true
          view.state.on_start
          nextIteration
        endIf

        local cur_state = view.state
        if (not cur_state.previous_display_size.exists or cur_state.previous_display_size.value != Display.size)
          # Will also call handle_resize on the view
          cur_state.handle_resize
          cur_state.previous_display_size = Display.size
          nextIteration
        endIf

        # Corner case: if the state didn't need a resize but the view still does
        if (not view.previous_display_size.exists or view.previous_display_size.value != Display.size)
          view.handle_resize
          view.previous_display_size = Display.size
          nextIteration
        endIf

        if (view.state.needs_first_update)
          # Will also update the view
          view.state.needs_first_update = false
          view.state.handle_update
          nextIteration
        endIf

        # Corner case: if the state didn't need a first update but the view does
        if (view.needs_first_update)
          view.needs_first_update = false
          view.handle_update
          nextIteration
        endIf

        escapeLoop
      endLoop

    method at( u:Real64, v:Real64 )->XY
      return bounds.at( u, v )

    method bounds->Box
      return Box(size)

    method center->XY [macro]
      (size/2)

    method clear->this
      native "int gl_flags = 0;"
      if (background_color.argb)
        native "gl_flags |= GL_COLOR_BUFFER_BIT;"
        native @|int c = $background_color.argb;
                |gl_flags |= GL_COLOR_BUFFER_BIT;
                |glClearColor( ((c>>16)&255)/255.0f, ((c>>8)&255)/255.0f, (c&255)/255.0f, ((c>>24)&255)/255.0f );
      endIf

      native "if (gl_flags) glClear( gl_flags );"

      return this

    method clear( background_color )->this
      return clear

    method clear_transforms
      object_transforms.clear
      view_transforms.clear
      view_transform_modified = true
      object_transform_modified = true
      transform_modified = true

    method define_texture( gl_id:Int32, bitmap:Bitmap, options:Int32 )->Int32
      if (not gl_id)
        native @|GLuint new_id;
                |glGenTextures( 1, &new_id );
                |$gl_id = new_id;
      endIf

      local w = bitmap.width
      local h = bitmap.height
      local bpp = options & (32|16|8)

      native @|void* data = $bitmap->pixels->data->as_bytes;
              |glBindTexture( GL_TEXTURE_2D, $gl_id );
              |switch ($bpp)
              |{
              |  case 32:
              |#ifndef GL_BGRA
              |  #ifdef GL_BGRA_EXT
              |    #ifndef __EMSCRIPTEN__
              |      #define GL_BGRA GL_BGRA_EXT
              |    #endif
              |  #endif
              |#endif
              |#ifdef GL_BGRA
              |    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, $w, $h, 0, GL_BGRA, GL_UNSIGNED_BYTE, data );
              |#else
              |    {
              |      int count = $w*$h;
              |      uint32_t * cursor = ((uint32_t *) data);
              |      while (--count >= 0)
              |      {
              |
              |        *cursor = ((*cursor >> 16) & 0x000000ff)
              |                | ((*cursor << 16) & 0x00ff0000)
              |                | ((*cursor <<  0) & 0xff000000)
              |                | ((*cursor <<  0) & 0x0000ff00);
              |        ++cursor;
              |      }
              |    }
              |    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, $w, $h, 0, GL_RGBA, GL_UNSIGNED_BYTE, data );
              |#endif
              |    break;
              |
              |  case 16:
              |    {
              |      // Convert 16-bit ARGB to 16-bit RGBA
              |      int count = $w*$h;
              |      RogueWord* cursor = ((RogueWord*) data) - 1;
              |      while (--count >= 0)
              |      {
              |        RogueWord pixel = *(++cursor);
              |        *cursor = (RogueWord)
              |                ( ((pixel<<4) & 0x0f00)
              |                | ((pixel>>4)&0xf0)
              |                | ((pixel<<12)&0xf000)
              |                | ((pixel>>12)&15) );
              |      }
              |    }
              |    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, $w, $h, 0, GL_RGBA, GL_UNSIGNED_SHORT_4_4_4_4, data );
              |    break;
              |}

      return gl_id

    method delete_texture( gl_id:Int32 )
      if (not gl_id) return

      native @|GLuint texture_id = (GLuint) $gl_id;
              |glDeleteTextures( 1, &texture_id );

    method draw( box:Box, color:Int32, thickness=1:Int32 )
      draw( box, Color(color) )

    method draw( box:Box, color:Color, thickness=1:Int32 )
      fill( Box(box.top_left,thickness,box.height), color )
      fill( Box(box.top_left+XY(box.width-thickness,0),thickness,box.height), color )
      if (box.width > thickness*2)
        fill( Box(box.top_left+XY(thickness,0),box.width-thickness*2,thickness), color )
        fill( Box(box.top_left+XY(thickness,box.height-thickness),box.width-thickness*2,thickness), color )
      endIf

    method fill( box:Box, color:Color )
      fill( box, Colors(color) )

    method fill( box:Box, color:Int32 )
      fill( box, Colors(color) )

    method fill( box:Box, colors:Colors )
      fill_solid_quad( transform(Corners<<XY>>(box)), colors,
        select{ colors.is_opaque:RenderMode.OPAQUE_SHAPE || RenderMode.ALPHA_SHAPE }, null )

    method fill_solid_quad( corners:Corners<<XYZW>>, colors:Colors, render_mode:RenderMode, shader:Shader )
      set_primitive_type( 3 )
      set_render_mode( render_mode, shader )

      reserve_vertices( 6 )

      vertex_positions.add( corners.a.x )
      vertex_positions.add( corners.a.y )
      vertex_positions.add( corners.a.z )
      vertex_positions.add( corners.a.w )
      vertex_positions.add( corners.c.x )
      vertex_positions.add( corners.c.y )
      vertex_positions.add( corners.c.z )
      vertex_positions.add( corners.c.w )
      vertex_positions.add( corners.b.x )
      vertex_positions.add( corners.b.y )
      vertex_positions.add( corners.b.z )
      vertex_positions.add( corners.b.w )

      vertex_positions.add( corners.a.x )
      vertex_positions.add( corners.a.y )
      vertex_positions.add( corners.a.z )
      vertex_positions.add( corners.a.w )
      vertex_positions.add( corners.d.x )
      vertex_positions.add( corners.d.y )
      vertex_positions.add( corners.d.z )
      vertex_positions.add( corners.d.w )
      vertex_positions.add( corners.c.x )
      vertex_positions.add( corners.c.y )
      vertex_positions.add( corners.c.z )
      vertex_positions.add( corners.c.w )

      vertex_colors.add( colors.a.argb )
      vertex_colors.add( colors.c.argb )
      vertex_colors.add( colors.b.argb )
      vertex_colors.add( colors.a.argb )
      vertex_colors.add( colors.d.argb )
      vertex_colors.add( colors.c.argb )

    method fill_textured_quad( texture:Texture,
        corners:Corners<<XYZW>>,
        colors:Colors,
        uv:Corners<<XY>>,
        render_mode:RenderMode,
        shader:Shader )

      set_texture( 0, texture )
      set_primitive_type( 3 )
      set_render_mode( render_mode, shader )

      reserve_vertices( 6 )

      vertex_positions.add( corners.a.x )
      vertex_positions.add( corners.a.y )
      vertex_positions.add( corners.a.z )
      vertex_positions.add( corners.a.w )
      vertex_positions.add( corners.c.x )
      vertex_positions.add( corners.c.y )
      vertex_positions.add( corners.c.z )
      vertex_positions.add( corners.c.w )
      vertex_positions.add( corners.b.x )
      vertex_positions.add( corners.b.y )
      vertex_positions.add( corners.b.z )
      vertex_positions.add( corners.b.w )

      vertex_positions.add( corners.a.x )
      vertex_positions.add( corners.a.y )
      vertex_positions.add( corners.a.z )
      vertex_positions.add( corners.a.w )
      vertex_positions.add( corners.d.x )
      vertex_positions.add( corners.d.y )
      vertex_positions.add( corners.d.z )
      vertex_positions.add( corners.d.w )
      vertex_positions.add( corners.c.x )
      vertex_positions.add( corners.c.y )
      vertex_positions.add( corners.c.z )
      vertex_positions.add( corners.c.w )

      vertex_uvs.add( uv.a.x );
      vertex_uvs.add( uv.a.y );
      vertex_uvs.add( uv.c.x );
      vertex_uvs.add( uv.c.y );
      vertex_uvs.add( uv.b.x );
      vertex_uvs.add( uv.b.y );
      vertex_uvs.add( uv.a.x );
      vertex_uvs.add( uv.a.y );
      vertex_uvs.add( uv.d.x );
      vertex_uvs.add( uv.d.y );
      vertex_uvs.add( uv.c.x );
      vertex_uvs.add( uv.c.y );

      vertex_colors.add( colors.a.argb )
      vertex_colors.add( colors.c.argb )
      vertex_colors.add( colors.b.argb )
      vertex_colors.add( colors.a.argb )
      vertex_colors.add( colors.d.argb )
      vertex_colors.add( colors.c.argb )

    method handle( e:KeyEvent )
      activate_view_and_state
      view.state.handle( e )

    method handle( e:PointerEvent )
      if (pointer_exists)
        e.delta = e.position - pointer_position
        pointer_position = e.position
      else
        pointer_exists = true
        pointer_position = e.position
      endIf
      activate_view_and_state
      view.state.handle( e )

    method handle( e:ScrollEvent )
      activate_view_and_state
      view.state.handle( e )

    method handle( e:TextEvent )
      activate_view_and_state
      view.state.handle( e )

    method height->Int32 [macro]
      this.size.y->Int32

    method is_landscape->Logical
      return (width > height)

    method is_portrait->Logical
      return (width <= height)

      #{
    method image_group( group_name:String )->ImageGroup
      # Finds existing image group if already loaded
      local group = image_group_lookup[ group_name ]
      if (group) return group

      local info = Plasmacore.find_image_group_info( group_name )
      if (info) group = ImageGroup( info )

      # Return a dummy group on error
      if (not group)
        println "Image Group not found: " + group_name
        group = ImageGroup( @{} )
      endIf

      image_group_lookup[ group_name ] = group
      image_group_list.add( group )
      return group
      }#

    method object_transform->Matrix
      update_transform
      return @object_transform

    method pop_clipping_region->this
      if (clipping_region_stack.count)
        clipping_region = clipping_region_stack.remove_last
      else
        clipping_region = null
      endIf
      return this

    method pop_object_transform( n=1:Int32 )->this
      forEach (1..n)
        if (object_transforms.count)
          object_transforms.remove_last
          object_transform_modified = true
          transform_modified = true
        endIf
      endForEach
      return this

    method pop_view_transform( n=1:Int32 )->this
      forEach (1..n)
        if (view_transforms.count)
          view_transforms.remove_last
          view_transform_modified = true
          transform_modified = true
        endIf
      endForEach
      return this

    method push_clipping_region( box:Box )->this
      if (clipping_region.exists)
        clipping_region_stack.add( clipping_region.value )
        clipping_region = clipping_region.value & box
      else
        clipping_region = box
      endIf
      return this

    method push_object_transform( m:Matrix )->this
      object_transforms.add( m )
      object_transform_modified = true
      transform_modified = true
      return this

    method push_view_transform( m:Matrix )->this
      view_transforms.add( m )
      view_transform_modified = true
      transform_modified = true
      return this

    method render( true_size, viewport_size )
      Display = this  # set the singleton reference to be this display
      clipping_region = null
      clipping_region_stack.clear

      # Ensure viewport min/max ordering matches true size ordering
      if ((true_size.x <= true_size.y) xor (viewport_size.x <= viewport_size.y))
        viewport_size = XY( viewport_size.y, viewport_size.x )
      endIf

      clear_transforms
      perspective_center = center

      scale_to_fit( target_display_size )

      <<ui_hook>>

      activate_view_and_state

      update_timer.update

      while (update_timer.tick)
        activate_view_and_state
        view.state.handle_update
      endWhile

      activate_view_and_state
      view.state.handle_draw

      OverlayLog.update
      OverlayLog.draw

      render
      native "glFlush();"

    method render
      if (not vertex_count) return

      local render_mode = active_render_mode

      local shader = custom_shader
      if (not shader)
        # Choose shader based on render mode.
        if (render_mode.is_textured)
          which (render_mode.value & RenderMode.COLOR_MODE_MASK)
            case RenderMode.COLOR_MULTIPLY: shader = texture_shader_with_color_multiply
            case RenderMode.COLOR_ADD:      shader = texture_shader_with_color_add
            case RenderMode.COLOR_FILL:     shader = texture_shader_with_color_fill
            others:                         shader = texture_shader
          endWhich
        else
          shader = color_shader
        endIf
      endIf

      if (not shader)
        println "Display.render: No active shader"
        return
      endIf

      native @|glUseProgram( $shader->program_id );

      native @|glViewport( 0, 0, (int)$viewport_size.x, (int)$viewport_size.y );
              |glEnable( GL_CULL_FACE );
              |glFrontFace( GL_CCW );
              |glCullFace( GL_BACK );

      if (render_mode.is_blended)
        local gl_source_blend = 0
        which (render_mode.source_blend)
          case RenderMode.BLEND_ZERO:                 gl_source_blend = native("GL_ZERO")->Int32
          case RenderMode.BLEND_ONE:                  gl_source_blend = native("GL_ONE")->Int32
          case RenderMode.BLEND_SOURCE_ALPHA:         gl_source_blend = native("GL_SRC_ALPHA")->Int32
          case RenderMode.BLEND_INVERSE_SOURCE_ALPHA: gl_source_blend = native("GL_ONE_MINUS_SRC_ALPHA")->Int32
        endWhich

        local gl_dest_blend = 0
        which (render_mode.dest_blend)
          case RenderMode.BLEND_ZERO:                 gl_dest_blend = native("GL_ZERO")->Int32
          case RenderMode.BLEND_ONE:                  gl_dest_blend = native("GL_ONE")->Int32
          case RenderMode.BLEND_SOURCE_ALPHA:         gl_dest_blend = native("GL_SRC_ALPHA")->Int32
          case RenderMode.BLEND_INVERSE_SOURCE_ALPHA: gl_dest_blend = native("GL_ONE_MINUS_SRC_ALPHA")->Int32
        endWhich

        native @|glEnable( GL_BLEND );
                |glBlendFunc( $gl_source_blend, $gl_dest_blend );
      else
        native @|glDisable( GL_BLEND );
      endIf

      if (render_mode.is_textured)
        forEach (i in 0..<active_textures.count.or_smaller(shader.texture_settings.count))
          local texture = active_textures[ i ]
          if (texture)
            local setting = shader.texture_settings[ i ]
            native @|glActiveTexture( GL_TEXTURE0+$i );
                    |glBindTexture( GL_TEXTURE_2D, $texture->id );
                    |glUniform1i( $setting, $i );

            if (render_mode.wrap_x)
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT );
            else
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );
            endIf

            if (render_mode.wrap_y)
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT );
            else
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );
            endIf

            if (render_mode.is_point_filtered)
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
            else
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
              native @|glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );
            endIf
          endIf
        endForEach
      endIf

      # ---- Set Vertex Color Mode ------------------------------------------------
      # Copy vertex colors and set up vertex color mode
      # Swap red and blue while premultiplying R,G,B by A.
      local count = vertex_colors.count
      native @|{
              |  RogueInt32* src = $vertex_colors->data->as_int32s - 1;
              |  while (--$count >= 0)
              |  {
              |    int color = *(++src);
              |    int a = (color >> 24) & 255;
              |    int r = (((color >> 16) & 255) * a) / 255;
              |    int g = (((color >> 8) & 255) * a) / 255;
              |    int b = ((color & 255) * a) / 255;
              |    *src = (a << 24) | (b << 16) | (g << 8) | r;
              |  }
              |}
      # Configure shader
      native @|glBindBuffer(GL_ARRAY_BUFFER, $this->pos_buf);
              |glBufferData(GL_ARRAY_BUFFER, sizeof(GL_FLOAT) * $vertex_positions->count, $vertex_positions->data->as_real32s, GL_STREAM_DRAW);
              |glEnableVertexAttribArray( $shader->position_attribute );
              |glVertexAttribPointer( $shader->position_attribute, 4, GL_FLOAT, GL_FALSE, 0, 0);

      if (shader.color_attribute >= 0)
        native @|glBindBuffer(GL_ARRAY_BUFFER, $this->color_buf);
                |glBufferData(GL_ARRAY_BUFFER, sizeof(GL_UNSIGNED_BYTE) * 4 * $vertex_colors->count, $vertex_colors->data->as_int32s, GL_STREAM_DRAW);
                |glEnableVertexAttribArray( $shader->color_attribute );
                |glVertexAttribPointer( $shader->color_attribute, 4, GL_UNSIGNED_BYTE, GL_FALSE, 0, 0);
      endIf

      if (shader.uv_attribute >= 0)
        native @|glBindBuffer(GL_ARRAY_BUFFER, $this->uv_buf);
                |glBufferData(GL_ARRAY_BUFFER, sizeof(GL_FLOAT) * $vertex_uvs->count, $vertex_uvs->data->as_real32s, GL_STREAM_DRAW);
                |glEnableVertexAttribArray( $shader->uv_attribute );
                |glVertexAttribPointer( $shader->uv_attribute, 2, GL_FLOAT, GL_FALSE, 0, 0);
      endIf

      which (active_primitive_type)
        case 3
          native @|glDrawArrays( GL_TRIANGLES, 0, $vertex_count );

        case 2
          native @|glDrawArrays( GL_LINES, 0, $vertex_count );

        case 1
          native @|glDrawArrays( GL_POINTS, 0, $vertex_count );
      endWhich

      #@trace native("glGetError()")->Int32

      # Cleanup
      vertex_count = 0
      vertex_positions.clear
      vertex_uvs.clear
      vertex_colors.clear

    method reserve_vertices( n:Int32 )
      if (vertex_count + n > VERTEX_BUFFER_SIZE) render
      vertex_count += n

    method scale_to_fit( w:Int32, h:Int32 )->this
      return scale_to_fit( XY(w,h) )

    method scale_to_fit( @target_display_size )->this
      render
      if (target_display_size.exists)
        display_scale = (target_display_size.value / true_size).max
        size = true_size * display_scale
      else
        display_scale = 1.0
        size = true_size
      endIf
      projection_mode.update
      return this

    method set_clipping_region( new_clipping_region:Box? )->this
      if (new_clipping_region.exists == clipping_region.exists)
        # Avoid rendering cached content if the clipping region is unchanged
        if (not new_clipping_region.exists) return this

        if (new_clipping_region.value == clipping_region.value) return this
      endIf

      render
      @clipping_region = new_clipping_region

      if (clipping_region.exists)
        local box = (clipping_region.value & Display.bounds)
        if (box.exists) @clipping_region = box
        else            @clipping_region = null
      endIf

      if (clipping_region.exists)
        local scale = viewport_size / size
        local box = clipping_region.value
        local pos = box.position * scale
        local size = box.size * scale

        local w = size.x->Int32
        local h = size.y->Int32
        local x = pos.x->Int32
        local y = (viewport_size.y - (pos.y + h))->Int32

        native @|glEnable( GL_SCISSOR_TEST );
                |glScissor( $x, $y, $w, $h );
      else
        native @|glDisable( GL_SCISSOR_TEST );
      endIf

      return this

    method set_primitive_type( primitive_type:Int32 )->this
      if (primitive_type == active_primitive_type) return this
      render
      active_primitive_type = primitive_type
      return this

    method set_perspective_center( new_center:XY )->this
      if (new_center != perspective_center)
        @perspective_center = new_center
        projection_mode.update
      endIf
      return this

    method set_projection_mode( @projection_mode )->this
      projection_mode.update
      return this

    method set_projection_transform( @projection_transform )->this
      transform_modified = true
      return this

    method set_render_mode( render_mode:RenderMode, shader=null:Shader )->this
      if (render_mode.value == active_render_mode.value and custom_shader is shader) return this
      render
      active_render_mode = render_mode
      custom_shader = shader
      return this

    method set_texture( index:Int32, texture:Texture )->this
      if (index < active_textures.count and active_textures[index] is texture) return this
      render
      active_textures.expand_to_include( index )[ index ] = texture
      return this

    method set_state( new_state:State )->this
      # Sets the state of this Display's current view.
      view.@state = new_state
      return this

    method set_view( @view )->this
      view.display = this
      return this

    method state->State [macro]
      # Obtains the state of this Display's current view.
      this.view.state

    method transform->Matrix
      update_transform
      return @transform

    method transform( corners:Corners<<XY>> )->Corners<<XYZW>>
      local t = transform
      local z = -unit_z
      return Corners<<XYZW>>( t*XYZ(corners.a,z), t*XYZ(corners.b,z), t*XYZ(corners.c,z), t*XYZ(corners.d,z) )

    method transform( corners:Corners<<XYZ>> )->Corners<<XYZW>>
      local t = transform
      local z = -unit_z
      return Corners<<XYZW>>( t*corners.a, t*corners.b, t*corners.c, t*corners.d )

    method true_height->Int32 [macro]
      this.true_size.y->Int32

    method true_width->Int32 [macro]
      this.true_size.x->Int32

    method update_transform
      if (not transform_modified) return

      if (view_transform_modified or object_transform_modified)
        if (object_transform_modified)
          object_transform_modified = false
          if (object_transforms.count)
            #{
            @object_transform = object_transforms.first
            forEach (i in 1..object_transforms.count-1)
              @object_transform = @object_transform * object_transforms[i]
            endForEach
            }#
            @object_transform = object_transforms.last
            forEach (i in object_transforms.count-2 downTo 0)
              @object_transform = @object_transform * object_transforms[i]
            endForEach
          endIf
        endIf

        if (view_transform_modified)
          view_transform_modified = false
          if (view_transforms.count)
            @view_transform = view_transforms.last
            forEach (i in view_transforms.count-2 downTo 0)
              @view_transform = @view_transform * view_transforms[i]
            endForEach
          endIf
        endIf

        if (view_transforms.count)
          if (object_transforms.count)
            transform = @view_transform * @object_transform
          else
            transform = @view_transform
          endIf
        else
          if (object_transforms.count)
            transform = @object_transform
          else
            transform = Matrix.identity
          endIf
        endIf
      endIf

      transform = projection_transform * @transform
      transform_modified = false

    method view_transform->Matrix
      update_transform
      return @view_transform

    method width->Int32 [macro]
      this.size.x->Int32

endClass

