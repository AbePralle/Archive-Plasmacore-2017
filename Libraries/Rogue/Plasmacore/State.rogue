module Plasmacore

class State
  GLOBAL METHODS
    method operator+( a:State, b:State )->State
      if (not a) return b
      if (not b) return a
      a.queue_state( b )
      return a

  PROPERTIES
    view               : View

    is_active          : Logical
    needs_first_update = true

    next_state         : State
    prior_state        : State

  METHODS
    method init( view=null )

    method after( e:DrawEvent )
      after_draw

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:UpdateEvent )
      after_update

    method after_app_start

    method after_app_stop

    method after_app_save

    method after_draw

    method after_update

    method change_state( new_state:State )
      view.change_state( new_state )

    method exit_state
      view.exit_state

    method handle( e:DrawEvent )
      on( e )
      if (e.is_consumed) return

      view.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      view.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      view.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:UpdateEvent )
      on( e )
      if (e.is_consumed) return

      view.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle_app_start
      on_app_start
      view.handle_app_start
      after_app_start

    method handle_app_stop
      on_app_stop
      view.handle_app_stop
      after_app_stop

    method handle_app_save
      on_app_save
      view.handle_app_save
      after_app_save

    method load_another_asset->Real64
      return view.load_another_asset

    method load_assets
      view.load_assets

    method on( e:DrawEvent )
      on_draw

    method on( e:KeyEvent )

    method on( e:PointerEvent )

    method on( e:UpdateEvent )
      on_update

    method on_app_start

    method on_app_stop

    method on_app_save

    method on_draw

    method on_start

    method on_finish

    method on_prepare

    method on_resume

    method on_suspend

    method on_update

    method push_state( new_state:State )
      view.push_state( new_state )

    method queue_state( new_state:State )
      if (not view) view = Display.view
      if (not new_state.view) new_state.view = view
      view.queue_state( new_state )

    method set_view( @view )->this
      return this

endClass

class State<<$ViewType>> : State
  METHODS
    method view->$ViewType
      return @view as $ViewType
endClass

