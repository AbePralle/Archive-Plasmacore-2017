module Plasmacore

class Font
  PROPERTIES
    name           : String
    image_info     : ImageInfo

    data           : FontData
    options        : @{}
    snap           : Logical

    anchor         = Anchor.CENTER : Anchor
    scale          = XY(1,1)
    spacing        = 0  # Added to each character's 'advance' (usually the width) to position the next character

    color          = Color.WHITE : Color
    opacity        = 1.0
    shader         : Shader  # leave null to use default

  METHODS
    method init( name, options=@{} )
      data = FontData( name )

    method cloned->Font
      local result = Font( name, options )
      result.image_info = image_info
      result.data = data
      result.snap = snap
      result.anchor = anchor
      result.scale = scale
      result.spacing = spacing
      result.color = color
      result.opacity = opacity
      result.shader = shader
      return result

    method collect_texture_names( texture_names:StringTable<<Logical>> )
      data.collect_texture_names( texture_names )

    method load
      data.load

    method draw( text:String, position:XY )
      data.draw( this, text, position )

    method draw( text:String, box:Box )
      draw( text, box.at(anchor) )

    method exists->Logical
      return data.exists

    method get( ch:Character )->FontCharacter
      return data[ ch ]

    method height->Real64
      return data.height * scale.y

    method set_anchor( @anchor )->this
      return this

    method set_color( @color )->this
      return this

    method set_options( @options )->this
      if (options.contains("anchor")) anchor = Anchor( options//anchor )
      snap = options//snap->Logical
      spacing = options//spacing->Int32
      if (options//snug->Logical) spacing = -1
      if (options.contains("scale")) scale = XY( options//scale )

      return this

    method measure( text:String, i1=null:Int32?, i2=null:Int32? )->XY
      return data.measure( this, text, i1, i2 )

    method measure( text:StringBuilder, i1=null:Int32?, i2=null:Int32? )->XY
      return data.measure( this, text, i1, i2 )

    method measure( ch:Character )->XY
      local result = data.measure( ch ) * scale
      if (snap) result = result.floor
      return result

    method set_scale( s:Real64 )->this
      @scale = XY( s, s )
      return this

    method set_scale( @scale )->this
      return this

    method word_wrap( st:String, pixel_width:Int32 )->String[]
     # Returns a word-wrapped version of the given string as a list of lines.
      # Existing newlines characters will cause a new line to begin
      # immediately. Spaces immediately following existing newline characters
      # are preserved.
      return word_wrap( st, pixel_width, StringBuilder() )->String.split('\n')

    method word_wrap( st:String, pixel_width:Int32, buffer:StringBuilder )->StringBuilder
      # Prints a word-wrapped version of the given string into the specified
      # StringBuilder. Existing newline characters will cause a new line to
      # begin immediately. Spaces immediately following existing newline
      # characters are preserved.
      local i1, i2 : Int32
      local len = st.count
      local w = 0.0

      if (st == "" or pixel_width <= 0) return buffer

      local needs_newline = false
      local starting_i2 = i2
      while (i2 < len)
        starting_i2 = i2

        # find last space or first \n
        while (w <= pixel_width and i2 < len and st[i2] != '\n')
          local char_w = measure( st, i2, i2 ).x
          w += char_w
          i2++
        endWhile

        local initial_i2 = i2

        if (w > pixel_width)
          --i2
          while (st[i2]!=' ' and st[i2]!='\n' and i2>i1) i2--
          if (i2 == i1) i2 = initial_i2 - 1
        endIf

        if (needs_newline) buffer.println
        forEach (i in i1..<i2) buffer.print( st[i] )
        needs_newline = true
        w = 0

        if (i2 == len)
          return buffer
        else
          which (st[i2])
            case ' ':
              while (i2<len and st[i2]==' ') i2++
              if (i2<len and st[i2]=='\n') i2++

            case '\n':
              i2++
          endWhich
          i1 = i2
        endIf

        if (starting_i2 == i2) return buffer  # Kludge/error

      endWhile

      return buffer

    method unload
      data.unload


endClass

class FontLoaders [singleton]
  PROPERTIES
    loaders = StringTable<<Function(String)->(FontData)>>()

  METHODS
    method init
      this[ "SystemFont" ] = (function(name) => SystemFontData())
      this[ "DefaultFont" ] = (function(name) => DefaultFontData())

    method get( name:String )->Function(String)->(FontData)
      return loaders[ name ]

    method set( name:String, loader:Function(String)->(FontData) )->this
      loaders[ name ] = loader
      return this
endClass

class FontData
  PROPERTIES
    name             : String
    image_info       : ImageInfo
    exists           : Logical
    is_loaded        : Logical
    height           : Int32
    characters       = FontCharacter[]( 128, null )  # first 128 are in correct slots, additional in any order
    character_lookup = Table<<Character,FontCharacter>>()

  GLOBAL METHODS
    method create( name:String )->FontData
      local entry = Display.font_data_by_name.find( name )
      if (entry) return entry.value

      local loader = FontLoaders[ name ]
      local font_data = select{ loader:loader(name) || FontData(name, Plasmacore.find_image_info(name)) }
      Display.font_data_by_name[ name ] = font_data

      return font_data

  METHODS
    method init( name, image_info )
      if (image_info)
        require (image_info.type == ImageInfo.TYPE_FONT)
        forEach (character_info in image_info.images)
          local ch = FontCharacter( character_info.unicode, Image(character_info) )
          height = height.or_larger( ch.image.size.y )
          require (ch.unicode >= 0)
          if (ch.unicode < 128)
            characters[ ch.unicode ] = ch
          else
            characters.add( ch )
          endIf
          character_lookup[ ch.unicode ] = ch
        endForEach
        exists = true
      endIf

    method collect_texture_names( texture_names:StringTable<<Logical>> )
      forEach (ch in characters)
        if (ch) ch.image.collect_texture_names( texture_names )
      endForEach

    method draw( font:Font, text:String, position:XY  )
      load

      position = position - Box(font.measure(text)).at( font.anchor ).yv

      if (text.contains('\n'))
        local h = height * font.scale.y
        forEach (line in text.split('\n'))
          draw_line( font, line, position )
          position += XY(0,h)
        endForEach
      else
        draw_line( font, text, position )
      endIf

    method draw_line( font:Font, text:String, position:XY  )
      local cursor = position - Box(font.measure(text)).at( font.anchor ).xv
      if (font.snap) cursor = cursor.floor
      forEach (ch in text)
        local font_ch = this[ ch ]
        if (font_ch)
          local image = font_ch.image
          image.size = font_ch.size * font.scale
          image.color = font.color
          image.shader = font.shader  # if null, default is used
          image.position = cursor + font_ch.offset
          image.opacity = font.opacity
          image.draw
          cursor += font_ch.advance * font.scale + XY(font.spacing,0) * font.scale
        endIf
      endForEach

    method get( unicode:Character )->FontCharacter
      if (unicode >= 0 and unicode <= 127) return characters[ unicode ]
      return character_lookup[ unicode ]

    method load
      if (is_loaded) return

      is_loaded = true
      forEach (ch in characters)
        if (ch)
          ch.image.load
          ch.image.anchor = Anchor.TOP_LEFT
        endIf
      endForEach

    method measure( font:Font, text:String, i1=null:Int32?, i2=null:Int32? )->XY
      local line_height = font.height
      if (font.snap) line_height = line_height.floor

      local max_w = 0.0
      local w = 0.0
      local h = line_height : Real64
      local max_i2 = text.count - 1
      if (i1) i1 = i1.value.clamped(0,max_i2)
      if (i2) i2 = i2.value.clamped(0,max_i2)

      forEach (index in select{i1||0}..select{i2||max_i2})
        local ch = text[index]
        if (ch == '\n')
          h += line_height
          max_w = max_w.or_larger( w )
          w = 0.0
        else
          local info = this[ ch ]
          if (info) w += info.advance.x
        endIf
      endForEach

      max_w = max_w.or_larger( w )
      return XY( max_w*font.scale.x, h )

    method measure( font:Font, text:StringBuilder, i1=null:Int32?, i2=null:Int32? )->XY
      local line_height = font.height
      if (font.snap) line_height = line_height.floor

      local max_w = 0.0
      local w = 0.0
      local h = line_height : Real64
      local max_i2 = text.count - 1
      if (i1) i1 = i1.value.clamped(0,max_i2)
      if (i2) i2 = i2.value.clamped(0,max_i2)

      forEach (index in select{i1||0}..select{i2||max_i2})
        local ch = text[index]
        if (ch == '\n')
          h += line_height
          max_w = max_w.or_larger( w )
          w = 0.0
        else
          local info = this[ ch ]
          if (info) w += info.advance.x
        endIf
      endForEach

      max_w = max_w.or_larger( w )
      return XY( max_w*font.scale.x, h )

    method measure( ch:Character )->XY
      if (ch == '\n') return XY(0,height)
      local info = this[ ch ]
      if (not info) return XY(0,0)
      return info.advance

    method unload
      if (not is_loaded) return
      is_loaded = false
      forEach (ch in characters)
        if (ch)
          ch.image.unload
        endIf
      endForEach

endClass


class FontCharacter
  PROPERTIES
    unicode   : Character
    image     : Image

    size      : XY
    offset    : XY  # Added to cursor during draw
    advance   : XY  # Added to cursor after drawing

  METHODS
    method init( unicode, image )
      size    = image.size
      advance = size.xv

    method height->Int32 [macro]
      Int32(size.y)

    method width->Int32 [macro]
      Int32(size.x)
endClass

