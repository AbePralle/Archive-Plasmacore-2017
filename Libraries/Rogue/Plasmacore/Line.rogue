module Plasmacore

class Line( a:XY, b:XY ) [compound]
  METHODS
    method at( p:Real64 )->XY
      return a + (b - a) * p

    method direction->XY
      return (b - a)

    method draw( color:Color )->this
      Display.draw( this, Colors(color) )
      return this

    method draw( colors:Colors )->this
      Display.draw( this, colors )
      return this

    method intersection( circle:Circle )->Line?
      # https://math.stackexchange.com/questions/311921/get-location-of-vector-circle-intersection
      if (circle.contains(a))
        if (circle.contains(b))
          return this
        else
          return Line( a, Line(b,a)->Ray.intersection(circle).value )
        endIf
      else
        if (circle.contains(b))
          return Line( this->Ray.intersection(circle).value, b )
        else
          # https://math.stackexchange.com/questions/311921/get-location-of-vector-circle-intersection
          local delta = a - circle.position
          local direction = b - a
          local A = direction.dot( direction )
          local v = 2 * direction * delta
          local B = v.x + v.y
          local C = delta.dot( delta ) - circle.radius^2
          local discriminant = B*B - 4*A*C
          if (discriminant <= 0) return null
          discriminant = discriminant.sqrt
          local t1 = (-B + discriminant) / (2 * A )
          local t2 = (-B - discriminant) / (2 * A )
          if (t1 < 0.0 or t2 < 0.0) return null
          return Line( a + t1 * direction, a + t2 * direction )
        endIf
      endIf

    method intersection( other:Line )->XY?
      # Returns the point of intersection between this line and another line.
      local P1 = this.a
      local P2 = this.b
      local P3 = other.a
      local P4 = other.b
      local A = P2 - P1
      local B = P4 - P3
      local C = P3 - P1
      local denom = B.cross(A)
      local t0 = B.cross(C) / denom
      local t1 = A.cross(C) / denom
      if (t0 < 0.0 or t0 > 1.0 or t1 < 0.0 or t1 > 1.0) return null
      return P1 + t0 * A

    method intersects( box:Box )->Logical
      return Quad(box).intersects( this )

    method intersects( circle:Circle )->Logical
      local closest_pt = circle.position.clamped( this )
      return ((circle.position - closest_pt).magnitude_squared <= circle.radius^2)

    method intersects( quad:Quad )->Logical
      return quad.intersects( this )

    method intersects( other:Line )->Logical
      return (this & other).exists

    method intersects( triangle:Triangle )->Logical
      if (this.intersects(Line(triangle.a,triangle.b))) return true
      if (this.intersects(Line(triangle.b,triangle.c))) return true
      if (this.intersects(Line(triangle.a,triangle.c))) return true

      # This line could be entirely contained within the triangle - see
      # if the triangle contains either end point
      return triangle.contains( a )

    method normal->XY
      local v = (b - a)
      return XY( -v.y, v.x ).normalized

    method reversed->Line
      return Line( b, a )

    method operator&( other:Line )->XY?
      return intersection( other )

    method to->Ray
      return Ray( a, (b-a).normalized )

endClass

class Line<<$DataType>>( a:$DataType, b:$DataType ) [compound]
endClass
