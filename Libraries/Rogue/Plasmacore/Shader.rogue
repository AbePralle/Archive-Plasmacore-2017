module Plasmacore

routine ColorShader->Shader
  return Display.color_shader
endRoutine

routine TextureShader->Shader
  return Display.texture_shader
endRoutine

routine TextureShaderWithColorMultiply->Shader
  return Display.texture_shader_with_color_multiply
endRoutine

routine TextureShaderWithColorAdd->Shader
  return Display.texture_shader_with_color_add
endRoutine

routine TextureShaderWithColorFill->Shader
  return Display.texture_shader_with_color_fill
endRoutine


class Shader
  DEFINITIONS

$if "iOS" or "Android" or "Linux" or "emscripten"
    GLSL_VERSION = ""

    # An empty last line is required on HIGH_PRECISION and MEDIUM_PRECISION.
    # Allows high precision if the device supports it
    HIGH_PRECISION =   @|#ifdef GL_FRAGMENT_PRECISION_HIGH
                        |precision highp float;
                        |precision highp int;
                        |#else
                        |precision mediump float;
                        |precision mediump int;
                        |#endif
                        |

    # Definitely use medium precision
    MEDIUM_PRECISION = @|precision mediump float;
                        |precision mediump int;
                        |
    LOWP = " lowp "
$else
    GLSL_VERSION = "#version 110\n"
    HIGH_PRECISION = ""
    MEDIUM_PRECISION = ""
    LOWP = " "
$endIf

  PROPERTIES
    # OpenGL IDs
    vertex_shader_id      : Int32
    pixel_shader_id       : Int32
    program_id            : Int32

    position_attribute : Int32
    color_attribute    : Int32
    uv_attribute       : Int32
    texture_settings   = Int32[]

  METHODS
    method init( vertex_shader:String, pixel_shader:String )
      if (use_high_precision)
        vertex_shader = GLSL_VERSION + HIGH_PRECISION + vertex_shader
        pixel_shader = GLSL_VERSION + HIGH_PRECISION + pixel_shader
      else
        vertex_shader = GLSL_VERSION + MEDIUM_PRECISION + vertex_shader
        pixel_shader = GLSL_VERSION + MEDIUM_PRECISION + pixel_shader
      endIf

      native @|$vertex_shader_id = (RogueInt32) glCreateShader( GL_VERTEX_SHADER );
      compile_shader( vertex_shader_id, vertex_shader )
      native @|$pixel_shader_id = (RogueInt32) glCreateShader( GL_FRAGMENT_SHADER );
      compile_shader( pixel_shader_id, pixel_shader )

      local location = 0
      native @|$program_id = glCreateProgram();
              |glAttachShader( $program_id, $vertex_shader_id );
              |glAttachShader( $program_id, $pixel_shader_id );
              |
              |glLinkProgram( $program_id );
              |
              |$position_attribute = glGetAttribLocation( $program_id, "position" );
              |$color_attribute    = glGetAttribLocation( $program_id, "color" );
              |$uv_attribute       = glGetAttribLocation( $program_id,  "uv" );
              |
              |int slot = 0;
              |while ($location >= 0)
              |{
              |  char name[80];
              |  sprintf( name, "texture_%d", slot );
              |  $location = glGetUniformLocation( $program_id, name );

                 texture_settings.add( location )

      native @|
              |  ++slot;
              |}

    method use_high_precision->Logical
      return (OpenGL.max_texture_size >= 2048)

    method compile_shader( shader:Int32, shader_source:String )
      native @|const char* source = (const char*) $shader_source->utf8;
              |glShaderSource( $shader, 1, &source, 0 );
              |glCompileShader( $shader );
              |
              |GLint success = 0;
              |glGetShaderiv( $shader, GL_COMPILE_STATUS, &success );
              |if (success) return;
              |
              |GLint log_size = 0;
              |glGetShaderiv( $shader, GL_INFO_LOG_LENGTH, &log_size );
              |
              |char* log = new char[ log_size ];
              |glGetShaderInfoLog( $shader, log_size, &log_size, log );
              |
              |printf( "SHADER ERROR:\n%s\n", log );
              |delete[] log;

  GLOBAL METHODS
    method create_color_shader->Shader
      return Shader(
        &vertex_shader =
          "attribute vec4 position;                   \n" +
          "attribute" + LOWP + "vec4 color;           \n" +
          "varying  " + LOWP + "vec4 vertex_color;    \n" +
          "void main()                                \n" +
          "{                                          \n" +
          "  gl_Position = position;                  \n" +
          "  vertex_color = color / 255.0;            \n" +
          "}                                          \n",

        &pixel_shader =
          "varying" + LOWP + "vec4 vertex_color;    \n" +
          "void main()                              \n" +
          "{                                        \n" +
          "  gl_FragColor = vertex_color;           \n" +
          "}                                        \n"
      )

    method create_texture_shader->Shader
      return Shader(
        &vertex_shader =
          "attribute vec4 position;              \n" +
          "attribute      vec2 uv;               \n" +
          "varying        vec2 vertex_uv;        \n" +
          "void main()                           \n" +
          "{                                     \n" +
          "  gl_Position = position;             \n" +
          "  vertex_uv = uv;                     \n" +
          "}                                     \n",

        &pixel_shader =
          "uniform              sampler2D texture_0;        \n" +
          "varying              vec2      vertex_uv;        \n" +
          "void main()                                      \n" +
          "{                                                \n" +
          "  gl_FragColor = texture2D(texture_0,vertex_uv); \n" +
          "}                                                \n"
      )

    method create_texture_shader_with_color_multiply->Shader
      return Shader(
        &vertex_shader =
          "attribute vec4 position;                   \n" +
          "attribute      vec2 uv;                    \n" +
          "varying        vec2 vertex_uv;             \n" +
          "attribute"+LOWP+"vec4 color;               \n" +
          "varying  "+LOWP+"vec4 vertex_color;        \n" +
          "void main()                                \n" +
          "{                                          \n" +
          "  gl_Position = position;                  \n" +
          "  vertex_uv = uv;                          \n" +
          "  vertex_color = color / 255.0;            \n" +
          "}                                          \n",

        &pixel_shader =
          "uniform              sampler2D texture_0;                       \n" +
          "varying              vec2      vertex_uv;                       \n" +
          "varying"+LOWP+"vec4 vertex_color;                               \n" +
          "void main()                                                     \n" +
          "{                                                               \n" +
          "  gl_FragColor = texture2D(texture_0,vertex_uv) * vertex_color; \n" +
          "}                                                               \n"
      )

    method create_texture_shader_with_color_add->Shader
      return Shader(
        &vertex_shader =
          "attribute vec4 position;                  \n" +
          "attribute      vec2 uv;                   \n" +
          "varying        vec2 vertex_uv;            \n" +
          "attribute"+LOWP+"vec4 color;              \n" +
          "varying  "+LOWP+"vec4 vertex_color;       \n" +
          "void main()                               \n" +
          "{                                         \n" +
          "  gl_Position = position;                 \n" +
          "  vertex_uv = uv;                         \n" +
          "  vertex_color = color / 255.0;           \n" +
          "}                                         \n",

        &pixel_shader =
          "uniform        sampler2D texture_0;                    \n" +
          "varying        vec2      vertex_uv;                    \n" +
          "varying"+LOWP+"vec4      vertex_color;                 \n" +
          "void main()                                            \n" +
          "{                                                      \n" +
          "  vec4 texture_color = texture2D(texture_0,vertex_uv); \n" +
          "  gl_FragColor = vec4( texture_color.xyz + (vertex_color.xyz * texture_color.a), texture_color.a ); \n" +
          "} \n"
      )

    method create_texture_shader_with_color_fill->Shader
      return Shader(
        &vertex_shader =
          "attribute vec4 position;                             \n" +
          "attribute      vec2 uv;                              \n" +
          "varying        vec2 vertex_uv;                       \n" +
          "attribute"+LOWP+"vec4  color;                        \n" +
          "varying  "+LOWP+"vec4  vertex_color;                 \n" +
          "varying  "+LOWP+"float vertex_inverse_a;             \n" +
          "void main()                                          \n" +
          "{                                                    \n" +
          "  gl_Position = position;                            \n" +
          "  vertex_uv = uv;                                    \n" +
          "  vertex_color = color / 255.0;                      \n" +
          "  vertex_inverse_a = 1.0 - vertex_color.a;           \n" +
          "}                                                    \n",

        &pixel_shader =
          "uniform         sampler2D texture_0;        \n" +
          "varying         vec2      vertex_uv;        \n" +
          "varying "+LOWP+"vec4      vertex_color;     \n" +
          "varying "+LOWP+"float     vertex_inverse_a; \n" +
          "void main()                                 \n" +
          "{                                           \n" +
          "  vec4 texture_color = texture2D(texture_0,vertex_uv); \n" +
          "  gl_FragColor = vec4( ((texture_color.xyz*vertex_inverse_a)+vertex_color.xyz)*texture_color.a, texture_color.a );\n" +
          "} \n"
      )
endClass

