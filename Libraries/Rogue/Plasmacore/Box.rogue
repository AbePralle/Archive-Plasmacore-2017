module Plasmacore

class Box( position:XY, size:XY ) [compound]
  GLOBAL METHODS
    method create( x:Real64, y:Real64, width:Real64, height:Real64 )->Box
      return Box( XY(x,y), XY(width,height) )

    method create( width:Real64, height:Real64 )->Box
      return Box( XY(0,0), XY(width,height) )

    method create( x:Real64, y:Real64, size:XY )->Box
      return Box( XY(x,y), size )

    method create( position:XY, width:Real64, height:Real64 )->Box
      return Box( position, XY(width,height) )

    method create( size:XY )->Box
      return Box( XY(0,0), size )

    method create( value:Value )->Box
      if (value.is_list)
        if (value.count == 2)
          return Box( XY(value) )
        else
          return Box( value[0]->Real64, value[1]->Real64, value[2]->Real64, value[3]->Real64 )
        endIf
      elseIf (value.contains("position"))
        return Box( XY(value//position), XY(value//size) )
      else
        return Box( value//x->Real64, value//y->Real64, value//width->Real64, value//height->Real64 )
      endIf

    method from_corners( top_left:XY, bottom_right:XY )->Box
      return Box( top_left, bottom_right - top_left )

  METHODS
    method at( proportional_position:XY )->XY
      return position + proportional_position * size

    method at( u:Real64, v:Real64 )->XY
      return position + XY(u,v) * size

    method at( anchor:Anchor )->XY
      return position + anchor.position * size

    method bottom_left->XY
      return (position + XY(0,size.y))

    method bottom_right->XY
      return (position + size)

    method center->XY [macro]
      this.at(0.5,0.5)

    method contains( pos:XY )->Logical
      if (pos.x < position.x or pos.x >= position.x + size.x) return false
      if (pos.y < position.y or pos.y >= position.y + size.y) return false
      return true

    method cropped( delta:Real64 )->Box
      return Box( XY(x+delta,y+delta), XY(width-(delta+delta),height-(delta+delta)) )

    method cropped( left:Real64, top:Real64, right:Real64, bottom:Real64 )->Box
      return Box( XY(x+left,y+top), XY(width-(left+right),height-(top+bottom)) )

    method expanded( delta:Real64 )->Box
      return cropped( -delta )

    method expanded( left:Real64, top:Real64, right:Real64, bottom:Real64 )->Box
      return cropped( -left, -top, -right, -bottom )

$if not "Console"
    method fill( color:Int32 )->this
      Display.fill( this, color )
      return this

    method fill( color:Color )->this
      Display.fill( this, color )
      return this

    method fill( colors:Colors )->this
      Display.fill( this, colors )
      return this
$endIf

    method floor->Box
      return Box( position.floor, size.floor )

    method height->Real64 [macro]
      this.size.y

    method intersects( other:Box )->Logical
      return (this & other).exists

    method operator==( other:Box )->Logical
      return (position == other.position and size == other.size)

    method operator+( offset:XY )->Box
      return Box( position+offset, size )

    method operator-( offset:XY )->Box
      return Box( position-offset, size )

    method operator*( scale:Real64 )->Box
      local h = (width * scale - width) / 2
      local v = (height * scale - height) / 2
      return expanded( h, v, h, v )

    method operator/( scale:Real64 )->Box
      return this * (1/scale)

    method operator&( rhs:Box )->Box?
      # Returns the intersection of this box with another box.
      local a_x1 = position.x
      local a_y1 = position.y
      local a_x2 = a_x1 + size.x
      local a_y2 = a_y1 + size.y

      local b_x1 = rhs.position.x
      local b_y1 = rhs.position.y
      local b_x2 = b_x1 + rhs.size.x
      local b_y2 = b_y1 + rhs.size.y

      if (a_x1 < b_x1) a_x1 = b_x1
      if (a_y1 < b_y1) a_y1 = b_y1
      if (a_x2 > b_x2) a_x2 = b_x2
      if (a_y2 > b_y2) a_y2 = b_y2

      if (a_x1 >= a_x2 or a_y1 >= a_y2) return null

      return Box( a_x1, a_y1, a_x2-a_x1, a_y2-a_y1 )

    method operator|( rhs:Box )->Box
      # Returns the union of this box with another box.
      local a_x1 = position.x
      local a_y1 = position.y
      local a_x2 = position.x + size.x
      local a_y2 = position.y + size.y
      if (a_x2 == a_x1 or a_y2 == a_y1) return rhs

      local b_x1 = rhs.position.x
      local b_y1 = rhs.position.y
      local b_x2 = rhs.position.x + rhs.size.x
      local b_y2 = rhs.position.y + rhs.size.y
      if (b_x2 == b_x1 or b_y2 == b_y1) return this

      if (b_x1 < a_x1) a_x1 = b_x1
      if (b_y1 < a_y1) a_y1 = b_y1
      if (b_x2 > a_x2) a_x2 = b_x2
      if (b_y2 > a_y2) a_y2 = b_y2

      return Box( a_x1, a_y1, a_x2-a_x1, a_y2-a_y1 )

$if not "Console"
    method draw( color:Int32, thickness=1:Int32 )->this
      Display.draw( this, color, thickness )
      return this

    method draw( color:Color, thickness=1:Int32 )->this
      Display.draw( this, color, thickness )
      return this
$endIf

    method positioned_within( enclosing:Box, anchor=Anchor.CENTER:Anchor )->Box
      return Box( enclosing.position + anchor.position * (enclosing.size-size), size )

    method relative_to( anchor:Anchor )->Box
      # Returns the result box where Box(box.at(anchor),this.size) == this
      # E.g. if anchor is Anchor.BOTTOM and Box is [@100,100 20x20], the return value is
      # [@90,80 20x20]].
      return Box( position - anchor.position * size, size )

    method subset( subset_size:XY, anchor=Anchor.CENTER:Anchor )->Box
      return Box( position + anchor.position * (size-subset_size), subset_size )

$if (not "Console")
    method transform( m:Matrix )->Corners<<XY>>
      return Corners<<XY>>(
        m * top_left,
        m * top_right,
        m * bottom_left,
        m * bottom_right
      )

    method transformed( m:Matrix )->Box
      return transform( m )->Box
$endIf

    method to->String
      return "[@$,$ $x$]" (x.format,y.format,width.format,height.format)

    method to->Value( &integer )
      if (integer)
        return @{ x:x->Int32, y:y->Int32, width:width->Int32, height:height->Int32 }
      else
        return @{ x:x, y:y, width:width, height:height }
      endIf

    method top_left->XY [macro]
      this.position

    method top_right->XY
      return (position + XY(size.x,0))

    method width->Real64 [macro]
      this.size.x

    method x->Real64 [macro]
      this.position.x

    method y->Real64 [macro]
      this.position.y

    method x1->Real64 [macro]
      this.position.x

    method y1->Real64 [macro]
      this.position.y

    method x2->Real64
      return this.position.x + this.size.x

    method y2->Real64
      return this.position.y + this.size.y

endClass
