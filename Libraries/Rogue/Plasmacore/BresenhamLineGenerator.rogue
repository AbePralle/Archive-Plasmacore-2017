module Plasmacore

class BresenhamLineGenerator
  PROPERTIES
    x1, x2, x, step_x, x_error : Int32
    y1, y2, y, step_y, y_error : Int32
    error                      : Int32
    is_horizontal              : Logical

  METHODS
    method init

    method init( x1, y1, x2, y2 )
      reset( x1, y1, x2, y2 )

    method init( a:XY, b:XY )
      reset( a.x, a.y, b.x, b.y )

    method init( line:Line )
      reset( line.a.x, line.a.y, line.b.x, line.b.y )

    method reset->this
      return reset( x1, y1, x2, y2 )

    method reset( a:XY, b:XY )->this
      return reset( a.x, a.y, b.x, b.y )

    method reset( x1, y1, x2, y2 )->this
      error = 0
      x = x1
      y = y1
      local dx = x2 - x1
      local dy = y2 - y1
      x_error = dx.abs
      y_error = dy.abs
      is_horizontal = (x_error >= y_error)
      step_x = dx.sign
      step_y = dy.sign
      return this

    method advance->this
      if (is_horizontal)
        x += step_x
        error += y_error
        while (error >= x_error)
          y += step_y
          error -= x_error
        endWhile

      else
        y += step_y
        error += x_error
        while (error >= y_error)
          x += step_x
          error -= y_error
        endWhile

      endIf

      return this

    method advance_x->this
      if (x_error == 0) return this
      local start_x = x
      advance
      while (start_x == x) advance
      return this

    method advance_y->this
      if (y_error == 0) return this
      local start_y = y
      advance
      while (start_y == y) advance
      return this

    method height->Int32
      return y_error + 1

    method is_finished->Logical
      return (x == x2 and y == y2)

    method steps_remaining->Int32
      if (is_horizontal)
        if (not step_x) return 0
        return (x2 - x) / step_x
      else
        if (not step_y) return 0
        return (y2 - y) / step_y
      endIf

    method to->XY
      return XY( x, y )

    method width->Int32
      return x_error + 1

endClass

