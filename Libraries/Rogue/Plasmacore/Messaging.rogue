#==============================================================================
# Messaging.rogue
#==============================================================================

module Plasmacore

$essential Byte[].clear()
$essential Byte[].reserve(Int32)

routine add_message_listener( type:String, fn:Function(Message), &once )->Function(Message)
  MessageManager.add_listener( type, fn, once )
  return fn
endRoutine

routine set_message_listener( type:String, fn:Function(Message), &once )->Function(Message)
  MessageManager.set_listener( type, fn, once )
  return fn
endRoutine

routine remove_message_listener( type:String, fn:Function(Message) )
  MessageManager.remove_listener( type, fn )
endRoutine

routine remove_message_listeners( type:String )
  MessageManager.remove_listeners( type )
endRoutine

class MessageManager [essential singleton]
  PROPERTIES
    io_buffer = Byte[]  # native layer accesses this directly
    io_reader = BufferedDataReader( io_buffer )

    message_builder = BufferedDataWriter()
    io_writer       = BufferedDataWriter( io_buffer )

    next_id   = 1
    string_buffer = StringBuilder()

    message_type_lookup = StringTable<<String>>()
    # Maps StringBuilder to String

    incoming_message = Message()
      # Recycled for incoming messages

    outgoing_message = Message()
      # Recycled for outgoing messages

    listeners             = Table<<String,Function(Message)[]>>()
    one_time_listeners    = Table<<String,Function(Message)[]>>()
    reply_callbacks_by_id = Table<<Int32,Function(Message)>>()

  METHODS
    method init_object
      add_listener( "<reply>",
        function(m:Message)
          local callback = MessageManager.reply_callbacks_by_id.remove( m.message_id )
          if (callback) callback( m )
        endFunction
      )

    method add_listener( type:String, listener:Function(Message), &once )
      local table = select{ once:one_time_listeners || listeners }
      local _list = table[ type ]
      if (not _list)
        _list = Function(Message)[]
        table[ type ] = _list
      endIf
      _list.add( listener )

    method remove_listener( type:String, listener:Function(Message) )
      local _list = listeners[ type ]
      if (_list) _list.remove( listener )
      _list = one_time_listeners[ type ]
      if (_list) _list.remove( listener )

    method remove_listeners( type:String )
      local _list = listeners[ type ]
      if (_list) _list.clear
      _list = one_time_listeners[ type ]
      if (_list) _list.clear

    method set_listener( type:String, listener:Function(Message), &once )
      local table = select{ once:one_time_listeners || listeners }
      local _list = table[ type ]
      if (not _list)
        _list = Function(Message)[]
        table[ type ] = _list
      endIf
      _list.clear.add( listener )

    method consolidated_type_name( name:String )->String
      local consolidated = message_type_lookup[ name ]
      if (consolidated) return consolidated
      message_type_lookup[ name ] = name
      return name

    method consolidated_type_name( buffer:StringBuilder )->String
      local consolidated = message_type_lookup[ buffer ]
      if (consolidated) return consolidated
      consolidated = buffer->String
      message_type_lookup[ consolidated ] = consolidated
      return consolidated

    method create_message( type:String, message_id=null:Int32? )->Message
      if (not message_id.exists)
        message_id = next_id
        ++next_id
      endIf

      outgoing_message.init( type, message_id.value )
      return outgoing_message

    method send( m:Message )
      message_builder.write_int32( m.data.count )
      message_builder.write( m.data )

    method send_rsvp( m:Message, callback:Function(Message) )
      send( m )
      reply_callbacks_by_id[ m.message_id ] = callback

    method update->Byte[] [essential]
      # 'io_reader' has already been set up to decode 'io_buffer', which
      # in turn has already been filled with incoming message bytes by the
      # native layer.
      io_reader.reset

      while (io_reader.has_another)
        incoming_message.init( io_reader )
        local handled = false

        local _list = listeners[ incoming_message.type ]
        if (_list)
          handled = true
          forEach (listener in _list step -1) listener( incoming_message )
        endIf

        _list = one_time_listeners[ incoming_message.type ]
        if (_list)
          handled = true
          local n = _list.count
          forEach (listener in _list step -1) listener( incoming_message )
          _list.discard( 0, n )
        endIf

        #{
        if (not handled)
          println "Unhandled message " + incoming_message.type
        endIf
        }#
      endWhile

      Plasmacore.global_update

      # Finalize the outgoing message data.
      io_writer.clear

      # Write out all the buffered data
      io_writer.write( message_builder.buffer )
      message_builder.clear

      TaskManager.update

      return io_buffer
endClass

class Message
  ENUMERATE
    DATA_TYPE_STRING        = 1
    DATA_TYPE_REAL64        = 2
    DATA_TYPE_INT64         = 3
    DATA_TYPE_INT32         = 4
    DATA_TYPE_LOGICAL       = 5
    DATA_TYPE_BYTES         = 6

  GLOBAL METHODS
    method create( name:String )->Message
      return MessageManager.create_message( name )

  PROPERTIES
    type       : String
    message_id : Int32
    data       = Byte[]
    reader     = BufferedDataReader( data )
    writer     = BufferedDataWriter( data )

    # Using arrays instead of tables to reduce dynamic allocation overhead
    keys       = String[]
    offsets    = Int32[]

    sent       : Logical

  METHODS
    method init

    method init( new_type:String, message_id )
      if (not sent and type) println "ERROR: unsent outgoing message of type '$'." (type)
      type = MessageManager.consolidated_type_name( new_type )
      sent = false
      writer.clear

      writer.write_string( type )
      writer.write_int32x( message_id )

    method init( source:DataReader )
      keys.clear
      offsets.clear
      local size = source.read_int32
      source.read( data.clear, size )
      reader.reset
      type = read_type_name
      message_id = reader.read_int32x
      while (index_another) noAction

    method contains( name:String )->Logical
      return keys.locate(name).exists

    method create_reply->Message
      return MessageManager.create_message( "<reply>", message_id )

    method get( name:String )->Value
      local i = keys.locate_last( name )
      if (not i.exists) return UndefinedValue

      reader.seek( offsets[i.value] )

      which (reader.read_int32x)
        case DATA_TYPE_STRING
          return Value( reader.read_string( MessageManager.string_buffer.clear )->String )

        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          MessageManager.string_buffer.clear
          forEach (1..count) MessageManager.string_buffer.print( reader.read->Character )
          return Value( MessageManager.string_buffer->String )

        case DATA_TYPE_REAL64
          return Value( reader.read_real64 )

        case DATA_TYPE_INT64
          return Value( reader.read_int64x )

        case DATA_TYPE_INT32
          return Value( reader.read_int32x )

        case DATA_TYPE_LOGICAL
          return Value( reader.read_int32x? )

        others
          return UndefinedValue
      endWhich

    method string( name:String, default="":String )->String
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_STRING
          return reader.read_string( MessageManager.string_buffer.clear )->String
        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          MessageManager.string_buffer.clear
          forEach (1..count) MessageManager.string_buffer.print( reader.read->Character )
          return MessageManager.string_buffer->String
      endWhich

      return default

    method string( name:String, buffer:StringBuilder )->StringBuilder
      local i = keys.locate_last( name )
      if (not i.exists) return buffer

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_STRING
          return reader.read_string( buffer )
        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          buffer.reserve( count )
          forEach (1..count) buffer.print( reader.read->Character )
          return buffer
      endWhich

      return buffer

    method real64( name:String, default=0:Real64 )->Real64
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64

        case DATA_TYPE_INT64
          return reader.read_int64x

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x
      endWhich

      return default

    method int64( name:String, default=0:Int64 )->Int64
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64->Int64

        case DATA_TYPE_INT64
          return reader.read_int64x

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x
      endWhich

      return default

    method int32( name:String, default=0:Int32 )->Int32
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64->Int32

        case DATA_TYPE_INT64
          return reader.read_int64x->Int32

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x
      endWhich

      return default

    method logical( name:String, default=false:Logical )->Logical
      local i = keys.locate_last( name )
      if (not i.exists) return default

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_REAL64
          return reader.read_real64 != 0

        case DATA_TYPE_INT64
          return reader.read_int64x != 0

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          return reader.read_int32x != 0
      endWhich

      return default

    method bytes( name:String, bytes=Byte[]:Byte[] )->Byte[]
      local i = keys.locate_last( name )
      if (not i.exists) return bytes

      reader.seek( offsets[i.value] )
      which (reader.read_int32x)
        case DATA_TYPE_STRING
          local count = reader.read_int32x
          bytes.reserve( count )
          forEach (1..count) bytes.add( reader.read_int32x->Byte )

        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          bytes.reserve( count )
          forEach (1..count) bytes.add( reader.read->Byte )
      endWhich

      return bytes

    method value( name:String, default=UndefinedValue:Value )->Value
      local json = string( name, null as String )
      if (not json) return default

      return JSON.parse( json )

    method list( name:String, default=UndefinedValue:Value )->Value
      local result = value( name )
      if (result.is_list) return result
      else                return default

    method table( name:String, default=UndefinedValue:Value )->Value
      local result = value( name )
      if (result.is_table) return result
      else                 return default

    method set( name:String, _value:String )->this
      writer.write_string( name )
      writer.write_int32x( Message.DATA_TYPE_STRING ).write_string( _value )
      return this

    method set( name:String, _value:Real64 )->this
      writer.write_string( name )
      writer.write_int32x( Message.DATA_TYPE_REAL64 ).write_real64( _value )
      return this

    method set( name:String, _value:Int64 )->this
      writer.write_string( name )
      writer.write_int32x( Message.DATA_TYPE_INT64 ).write_int64x( _value )
      return this

    method set( name:String, _value:Int32 )->this
      writer.write_string( name )
      writer.write_int32x( Message.DATA_TYPE_INT32 ).write_int32x( _value )
      return this

    method set( name:String, _value:Logical )->this
      writer.write_string( name )
      writer.write_int32x( Message.DATA_TYPE_LOGICAL ).write_logical( _value )
      return this

    method set( name:String, bytes:Byte[] )->this
      writer.write_string( name )
      writer.write_int32x( Message.DATA_TYPE_BYTES ).write_int32x( bytes.count )
      forEach (b in bytes) writer.write_byte( b )
      return this

    method set( name:String, _value:Value )->this
      return set( name, _value.to_json )

    method send
      MessageManager.send( this )
      sent = true

    method send_rsvp( callback:Function(Message) )
      # This form of send_rsvp waits for the native layer to reply() directly to this
      # message.
      MessageManager.send_rsvp( this, callback )
      sent = true

    method send_rsvp( response_message_type:String, callback:Function(Message) )
      # Rather than awaiting a reply to this specific message, this form of send_rsvp
      # installs a global one-time message listener that calls the given callback
      # when a new message (not a reply) of the given response type comes through.
      add_message_listener( response_message_type, callback, &once )
      MessageManager.send( this )
      sent = true

    # INTERNAL USE ------------------------------------------------------------

    method index_another->Logical
      if (not reader.has_another) return false
      local key    = read_type_name
      local offset = reader.position
      keys.add( key )
      offsets.add( offset )

      # Skip value
      local data_type = reader.read_int32x
      which (data_type)
        case DATA_TYPE_STRING
          local count = reader.read_int32x
          forEach (1..count) reader.read_int32x

        case DATA_TYPE_BYTES
          local count = reader.read_int32x
          forEach (1..count) reader.read_byte

        case DATA_TYPE_REAL64
          reader.read_real64

        case DATA_TYPE_INT64
          reader.read_int64x

        case DATA_TYPE_INT32, DATA_TYPE_LOGICAL
          reader.read_int32x

        others
          println "ERROR: unsupported message data type $." (data_type)
      endWhich
      return true

    method read_type_name->String
      return MessageManager.consolidated_type_name( reader.read_string(MessageManager.string_buffer.clear) )

endClass

