module Plasmacore

class Triangle( a:XY, b:XY, c:XY ) [compound]
  # [a,b,c] should be defined in clockwise order to ensure visibility
  GLOBAL METHODS
    method create( ax:Real64, ay:Real64, bx:Real64, by:Real64, cx:Real64, cy:Real64 )->Triangle
      return Triangle( XY(ax,ay), XY(bx,by), XY(cx,cy) )

  METHODS
    method centroid->XY
      return (a + b + c) / 3

    method contains( point:XY )->Logical
      # Using Barycentric technique as described here:
      #   http://www.blackpawn.com/texts/pointinpoly/default.html

      # Compute vectors
      local v0 = c - a
      local v1 = b - a
      local v2 = point - a

      # Compute dot products
      local dot00 = v0.dot(v0)
      local dot01 = v0.dot(v1)
      local dot02 = v0.dot(v2)
      local dot11 = v1.dot(v1)
      local dot12 = v1.dot(v2)

      # Compute barycentric coordinates
      local inverse_denom = 1.0 / (dot00 * dot11 - dot01 * dot01)
      local u = (dot11 * dot02 - dot01 * dot12) * inverse_denom
      local v = (dot00 * dot12 - dot01 * dot02) * inverse_denom

      # Check if point is in triangle
      return (u >= 0) and (v >= 0) and (u + v < 1)


$if (not target("Console"))
    method draw( color:Color )->this
      Line( a, b ).draw( color )
      Line( b, c ).draw( color )
      Line( c, a ).draw( color )
      return this

    method fill( color:Color )->this
      Display.fill( this, color )
      return this

    method fill( colors:Colors )->this
      Display.fill( this, colors )
      return this

    method fill( image:Image, uv:Triangle, colors=Colors(Color.WHITE):Colors,
        render_mode=RenderMode.ALPHA_IMAGE:RenderMode, shader=ImageShader.TEXTURE:Shader )->this
      local texture_data = image.data as TextureImageData
      if (texture_data)
        return fill( texture_data.texture, uv, colors, render_mode, shader )
      else
        return fill( Color.WHITE )
      endIf

    method fill( texture:Texture, uv:Triangle, colors=Colors(Color.WHITE):Colors,
        render_mode=RenderMode.ALPHA_IMAGE:RenderMode, shader=ImageShader.TEXTURE:Shader )->this
        Display.fill( this, texture, uv, colors, render_mode, shader )
      return this
$endIf

    method intersects( box:Box )->Logical
      return box->Quad.intersects( this )

    method intersects( circle:Circle )->Logical
      if (Line(a,b).intersects(circle)) return true
      if (Line(b,c).intersects(circle)) return true
      return (Line(a,c).intersects(circle))

    method intersects( quad:Quad )->Logical
      return quad.intersects( this )

    method intersects( line:Line )->Logical
      return line.intersects( this )

    method intersects( other:Triangle )->Logical
      if (Line(a,b).intersects(other)) return true
      if (Line(b,c).intersects(other)) return true
      return (Line(a,c).intersects(other))

    method operator+( position:XY )->Triangle
      return Triangle( a+position, b+position, c+position )

    method operator-( position:XY )->Triangle
      return Triangle( a-position, b-position, c-position )

    method operator*( scale:Real64 )->Triangle
      return Triangle( a*scale, b*scale, c*scale )

    method operator/( scale:Real64 )->Triangle
      return Triangle( a/scale, b/scale, c/scale )

    method operator*( scale:XY )->Triangle
      return Triangle( a*scale, b*scale, c*scale )

    method operator/( scale:XY )->Triangle
      return Triangle( a/scale, b/scale, c/scale )

    method rotated( angle:Degrees )->Triangle [macro]
      this.rotated( angle->Radians )

    method rotated( angle:Radians )->Triangle
      return Triangle( a.rotated(angle), b.rotated(angle), c.rotated(angle) )

    method to->String
      return "($,$,$)" (a,b,c)

endClass

class Triangle<<$DataType>>( a:$DataType, b:$DataType, c:$DataType ) [compound]
  # [a,b,c] should be defined in clockwise order to ensure visibility
  METHODS
    method to->String
      return "($,$,$)" (a,b,c)
endClass
