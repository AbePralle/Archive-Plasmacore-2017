class Introspector
  GLOBAL METHODS
    method _ret_Object (p:IntPtr)->Value
      return native("*(RogueObject**)$p")->Object
    method _ret_Real64 (p:IntPtr)->Value
      return native("*(RogueReal64*)$p")->Real64
    method _ret_Real32 (p:IntPtr)->Value
      return native("*(RogueReal32*)$p")->Real32
    method _ret_Int64 (p:IntPtr)->Value
      return native("*(RogueInt64*)$p")->Int64
    method _ret_Int32 (p:IntPtr)->Value
      return native("*(RogueInt32*)$p")->Int32
    method _ret_Character (p:IntPtr)->Value
      return native("*(RogueCharacter*)$p")->Character
    method _ret_Byte (p:IntPtr)->Value
      return native("*(RogueByte*)$p")->Byte
    method _ret_String (p:IntPtr)->Value
      return native("*(RogueString**)$p")->String
    method _ret_Logical (p:IntPtr)->Value
      return native("*(RogueLogical*)$p")->Logical
    method _ret_undefined (p:IntPtr)->Value
      return UndefinedValue

  PROPERTIES
    context : Object
    address : IntPtr
    type    : TypeInfo

  METHODS
    method init( context )
      address = native( "((intptr_t)$context)" )->IntPtr
      type = context.type_info

    method init( context, address, type )

    method get( name:String )->Value
      local property_info = type.property_info( name )
      if (not property_info) return NullValue

      if (property_info.type.is_reference)
        return Value( native( "*((RogueObject**)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Object )
      endIf

      which (property_info.type.name)
        case "Real64"
          return Value( native( "*((RogueReal64*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Real64 )

        case "Real32"
          return Value( native( "*((RogueReal32*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Real32 )

        case "Int64"
          return Value( native( "*((RogueInt64*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Int64 )

        case "Int32"
          return Value( native( "*((RogueInt32*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Int32 )

        case "Character"
          return Value( native( "*((RogueCharacter*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Character + "" )

        case "Byte"
          return Value( native( "*((RogueByte*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Byte )

        case "Logical"
          return Value( native( "*((RogueLogical*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]))" )->Logical )

        others
          # Must be a compound
          local boxed_type = TypeInfo[ "Boxed<<$>>"(property_info.type.name) ]
          local boxed = boxed_type.create_object as Boxed
          local dest_addr = boxed.address
          local size = boxed.size
          native @|memcpy(
                  |  (void*)(intptr_t)$dest_addr,
                  |  (void*)(intptr_t)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index]),
                  |  $size
                  |);
          return ObjectValue( boxed )
      endWhich

    method has_inner->Logical
      return (context instanceOf Boxed)

    method inner->Introspector
      local boxed = context as Boxed
      if (boxed) return boxed.inner_introspector
      return null

    method inspect( property_name:String )->Introspector
      forEach (p in type.properties)
        if (p.name == property_name)
          local new_addr = native( "(RogueInt64)(intptr_t)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$p->index])" )->IntPtr
          if (p.type.is_reference)
            local new_context = native( "*((RogueObject**)(intptr_t)$new_addr)" )->Object
            return ?:{ new_context:Introspector(new_context) || null }
          else
            return Introspector( context, new_addr, p.type )
          endIf
        endIf
      endForEach
      return null

    method set( name:String, new_value:Value )->this
      local property_info = type.property_info( name )
      if (not property_info) return this

      if (property_info.type.is_reference)
        local value = new_value->Object
        native( "*((RogueObject**)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )
        return this
      endIf

      which (property_info.type.name)
        case "Real64"
          local value = new_value->Real64
          native( "*((RogueReal64*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        case "Real32"
          local value = new_value->Real32
          native( "*((RogueReal32*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        case "Int64"
          local value = new_value->Int64
          native( "*((RogueInt64*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        case "Int32"
          local value = new_value->Int32
          native( "*((RogueInt32*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        case "Character"
          local value = new_value->Character
          native( "*((RogueCharacter*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        case "Byte"
          local value = new_value->Byte
          native( "*((RogueByte*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        case "Logical"
          local value = new_value->Logical
          native( "*((RogueLogical*)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])) = $value;" )

        others
          # Must be a compound
          Introspector( context, native( "(RogueInt64)(intptr_t)(((RogueByte*)(intptr_t)$address) + Rogue_types[$type->index].property_offsets[$property_info->index])" )->Int64, property_info.type ).set( new_value )
      endWhich

      return this

    method set( new_value:Value )->this
      if (new_value.is_table)
        forEach (key in (new_value as ValueTable).keys)
          set( key, new_value[key] )
        endForEach
        return this
      endIf

      local boxed = new_value->Object as Boxed
      if (boxed and type is boxed.type)
        local boxed_address = boxed.address
        local size = boxed.size
        if (size)
          native @|memcpy( (void*)(intptr_t)$address, (void*)(intptr_t)$boxed_address, $size );
        endIf
        return this
      endIf

      if (type.is_reference)
        native( "*(RogueObject**)((RogueByte*)(intptr_t)$address)" )->Object = new_value->Object
        return this
      endIf

      which (type.name)
        case "Real64"
          native( "*(RogueReal64*)((RogueByte*)(intptr_t)$address)" )->Real64 = new_value->Real64

        case "Real32"
          native( "*(RogueReal32*)((RogueByte*)(intptr_t)$address)" )->Real32 = new_value->Real32

        case "Int64"
          native( "*(RogueInt64*)((RogueByte*)(intptr_t)$address)" )->Int64 = new_value->Int64

        case "Int32"
          native( "*(RogueInt32*)((RogueByte*)(intptr_t)$address)" )->Int32 = new_value->Int32

        case "Character"
          native( "*(RogueCharacter*)((RogueByte*)(intptr_t)$address)" )->Character = new_value->Character

        case "Byte"
          native( "*(RogueByte*)((RogueByte*)(intptr_t)$address)" )->Byte = new_value->Byte

        case "Logical"
          native( "*(RogueLogical*)((RogueByte*)(intptr_t)$address)" )->Logical = new_value->Logical

      endWhich

      return this

    method to->String
      return this->Value->String

    method to->Value
      return value

    method value->Value
      if (type.is_reference) return ObjectValue( context )

      which (type.name)
        case "Real64"
          return Value( native("*((RogueReal64*)((RogueByte*)(intptr_t)$address))" )->Real64 )

        case "Real32"
          return Value( native("*((RogueReal32*)((RogueByte*)(intptr_t)$address))" )->Real32 )

        case "Int64"
          return Value( native("*((RogueInt64*)((RogueByte*)(intptr_t)$address))" )->Int64 )

        case "Int32"
          return Value( native("*((RogueInt32*)((RogueByte*)(intptr_t)$address))" )->Int32 )

        case "Character"
          return Value( native("*((RogueCharacter*)((RogueByte*)(intptr_t)$address))" )->Character )

        case "Byte"
          return Value( native("*((RogueByte*)((RogueByte*)(intptr_t)$address))" )->Byte )

        case "Logical"
          return Value( native("*((RogueLogical*)((RogueByte*)(intptr_t)$address))" )->Logical )

        others
          # Must be a compound
          local boxed_name = "Boxed<<$>>" (type.name)
          local boxed_type = TypeInfo[ boxed_name ]
          local boxed = boxed_type.create_object as Boxed
          local dest_addr = boxed.address
          local size = boxed.size
          native @|memcpy( (void*)(intptr_t)$dest_addr, (void*)(intptr_t)$address, $size );
          return ObjectValue( boxed )
      endWhich

    method call ( name:String, args:Value[] )->Value
      return call(name, ValueList(args) )

    method call ( name:String, args=NullValue:Value )->Value
      # Note: can throw NoSuchMethodError
      return type.call( context, name, args )
endClass


class BoxedIntrospector<<$ValueType>> : Introspector
  METHODS
    method init( context )
      local boxed = context as Boxed
      address = boxed.address
      type = <<$ValueType>>

    method has_inner->Logical
      return false

    method inner->Introspector
      return null

    method set( name:String, new_value:Value )->this
      prior.set( name, new_value )
      return this

    method to->$ValueType
      return (context as Boxed<<$ValueType>>).value

endClass


class CompoundIntrospection<<$ValueType>> [aspect]
  METHODS
    method introspector->BoxedIntrospector<<$ValueType>>
      return BoxedIntrospector<<$ValueType>>( this->Object )

    method to->Value
      return Value( Boxed<<$ValueType>>(this) )

    method to->ValueTable
      return introspector->Value

    method to->ValueList
      return @[ this->Value ]
endClass

