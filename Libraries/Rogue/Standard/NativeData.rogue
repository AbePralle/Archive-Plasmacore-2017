class NativeArray<<$DataType>>( address:IntPtr, count:Int32 ) [compound]
  GLOBAL METHODS
    method create( count:Int32 )->NativeArray<<$DataType>>
      local ptr : IntPtr
      if (count) ptr = native( "(intptr_t)malloc( $count * sizeof($($DataType)) )" )->IntPtr
      return NativeArray<<$DataType>>( ptr, count )

  METHODS
    method clear->this
      native @|size_t size = sizeof( $($DataType) );
              |memset( (void*)(intptr_t)$address, 0, $count*size );
      return this

    method free [mutating]
      if (address)
        native @|free( (void*)(intptr_t)$address );
        address = 0
        count = 0
      endIf

    method get( index:Int32 )->$DataType
      local result : $DataType
      native @|size_t size = sizeof( $($DataType) );
              |memcpy( &$result, ((RogueByte*)(intptr_t)($address))+$index*size, size );
      return result

    method set( index:Int32, value:$DataType )->this
      native @|size_t size = sizeof( $($DataType) );
              |memcpy( ((RogueByte*)(intptr_t)($address))+$index*size, &$value, size );
      return this

    method set( index:Int32, data:NativeArray<<$DataType>> )->this
      if (data.count)
        native @|size_t size = sizeof( $($DataType) );
                |memmove( ((RogueByte*)(intptr_t)($address))+$index*size, (void*)(intptr_t)$data.address, $data.count*size );
      endIf
      return this

    method subset( index:Int32, count:Int32 )->NativeArray<<$DataType>>
      # Result shares data with original array - changing the result changes the original.
      # Do not free() the result. This operation has minimal overhead.
      local size : Int32
      native @|$size = (RogueInt32)sizeof( $($DataType) );
      return NativeArray<<$DataType>>( address + index*size, count )

    method to->String
      # Not thread-safe
      return "$[$]" (<<$DataType>>.name,count)
endClass

class NativeList<<$DataType>>( data:NativeArray<<$DataType>>, count:Int32 ) [compound]
  GLOBAL METHODS
    method create( capacity=10:Int32 )->NativeList<<$DataType>>
      return NativeList<<$DataType>>( NativeArray<<$DataType>>(capacity), 0 )

    method create( data:NativeArray<<$DataType>> )->NativeList<<$DataType>>
      return NativeList<<$DataType>>( data, data.count )

  METHODS
    method add( value:$DataType )->this [mutating]
      reserve( 1 )
      data[ count ] = value
      ++count
      return this

    method add( value:NativeArray<<$DataType>> )->this [mutating]
      reserve( value.count )
      data[ count ] = value
      count += value.count
      return this

    method add( value:NativeList<<$DataType>> )->this [mutating]
      return add( value.data.subset( 0, value.count ) )

    method capacity->Int32
      return data.count

    method clear->this [mutating]
      count = 0
      return this

    method free [mutating]
      data.free
      count = 0

    method get( index:Int32 )->$DataType
      return data[ index ]

    method reserve( additional_count:Int32 ) [mutating]
      local target_count = count + additional_count
      local capacity = data.count
      if (target_count <= capacity) return
      target_count = target_count.or_larger( ?:{capacity:capacity*2 || 10} )

      local new_data = NativeArray<<$DataType>>( target_count )
      new_data[ 0 ] = data.subset( 0, count )
      data.free
      data = new_data

    method set( index:Int32, value:$DataType )->this
      data[ index ] = value
      return this
endClass

