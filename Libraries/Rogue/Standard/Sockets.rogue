class Socket [abstract]
  # Abstract base class of BasicSocket and SecureSocket
  GLOBAL METHODS
    method create( remote_address:String, port:Int32 )->Socket
      return BasicSocket( remote_address, port )

    method create( socket_id:Int32 )->Socket
      # Internal use only - used by BasicServerSocket.
      return BasicSocket( socket_id )

  PROPERTIES

  METHODS
    method close->this [abstract]

    method character_reader->Reader<<Character>> [abstract]

    method remote_ip->String
      return "0.0.0.0"

    method is_closed->Logical     [abstract]

    method is_connected->Logical  [abstract]

    method is_connecting->Logical [abstract]

    method printer->PrintWriter  [abstract]

    method reader->Reader<<Byte>> [abstract]

    method socket_id->Int32       [abstract]

    method writer->Writer<<Byte>> [abstract]

endClass


class ServerSocket [abstract]
  # Abstract base class of BasicServerSocket and SecureServerSocket
  GLOBAL METHODS
    method create( port:Int32 )->ServerSocket
      return BasicServerSocket( port )

  METHODS
    method accept_connection->Socket [abstract]

    method close->this               [abstract]

    method is_listening->Logical     [abstract]

    method port->Int32               [abstract]

    method socket_id->Int32          [abstract]

endClass


class BasicSocket : Socket
  ENUMERATE
    CONNECTING  # 0
    CONNECTED   # 1
    CLOSED      # 2

  DEPENDENCIES
    nativeHeader
      #include <netdb.h>
      #include <pthread.h>
      #include <sys/socket.h>
      void* RogueBasicSocket_establish_connection( void* context );
    endNativeHeader

    nativeCode
      void* RogueBasicSocket_establish_connection( void* context )
      {
        RogueClassBasicSocket* socket_object = (RogueClassBasicSocket*) context;

        socket_object->socket_id = socket( AF_INET, SOCK_STREAM, 0 );
        if (socket_object->socket_id == -1)
        {
          socket_object->state = 2;  // CLOSED
          --socket_object->reference_count;
          return 0;
        }

        char port_string[40];
        snprintf( port_string, sizeof(port_string), "%d", socket_object->port );
        addrinfo requirements;
        memset( &requirements, 0, sizeof(requirements) );
        requirements.ai_family = AF_INET;
        requirements.ai_socktype = SOCK_STREAM;
        requirements.ai_protocol = IPPROTO_TCP;

        addrinfo *info, *cur;
        if (getaddrinfo( (char*)socket_object->remote_address->utf8, port_string, NULL, &info ) != 0)
        {
          pthread_mutex_lock( &socket_object->thread_mutex );
          if (socket_object->socket_id != -1)
          {
            close( socket_object->socket_id );
            socket_object->socket_id = -1;
            socket_object->state = 2;  // CLOSED
          }
          --socket_object->reference_count;
          pthread_mutex_unlock( &socket_object->thread_mutex );
          return 0;
        }

        bool socket_okay = false;

        strcpy( socket_object->remote_ip_buffer, "0.0.0.0" );
        cur = info;
        while (cur)
        {
          if (connect(socket_object->socket_id,cur->ai_addr, cur->ai_addrlen) == 0)
          {
            socket_okay = true;
            char sbuf[NI_MAXSERV];

            getnameinfo( cur->ai_addr, cur->ai_addrlen, socket_object->remote_ip_buffer,
              sizeof(socket_object->remote_ip_buffer), sbuf, sizeof(sbuf),
                  NI_NUMERICHOST | NI_NUMERICSERV );
            break;
          }
          cur = cur->ai_next;
        }
        freeaddrinfo( info );

        pthread_mutex_lock( &socket_object->thread_mutex );

        if (socket_object->socket_id != -1 && socket_object->state == 0)  // not closed() before we get here
        {
          if (socket_okay)
          {
            fcntl( socket_object->socket_id, F_SETFL, O_NONBLOCK );
            socket_object->state = 1;  // CONNECTED
          }
          else
          {
            close( socket_object->socket_id );
            socket_object->socket_id = -1;
            socket_object->state = 2;  // CLOSED
          }
        }
        --socket_object->reference_count;

        pthread_mutex_unlock( &socket_object->thread_mutex );
        return 0;
      }
    endNativeCode

  PROPERTIES
    socket_id        = -1
    state            : Int32
    remote_ip        : String
    remote_address   : String
    port             : Int32
    reader           = BasicSocketReader( this )
    character_reader = UTF8Reader( reader )
    writer           = BasicSocketWriter( this )
    printer          = PrintWriterAdapter( writer )

    using_mutex      : Logical
    native "pthread_mutex_t thread_mutex;"
    native "char remote_ip_buffer[NI_MAXHOST];"

  METHODS
    method init( remote_address, port )
      state = CONNECTING
      using_mutex = true

      native @|// Retain this object until connection thread finishes (thread will reduce count)
              |++$this->reference_count;
              |
              |pthread_mutex_init( &$this->thread_mutex, NULL );
              |pthread_attr_t attributes;
              |pthread_attr_init( &attributes );
              |pthread_attr_setdetachstate( &attributes, PTHREAD_CREATE_DETACHED );
              |
              |pthread_t thread_ref;
              |if (0 != pthread_create( &thread_ref, &attributes, RogueBasicSocket_establish_connection, $this ))
              |{
              |  // Error launching thread
              |  if ($socket_id != -1)
              |  {
              |    close( $socket_id );
              |    $socket_id = -1;
              |    $state = 2;  // CLOSED
              |    --$this->reference_count;
              |  }
              |}

    method init( @socket_id )
      # Internal use - used by BasicServerSocket
      state = CONNECTED

    method close->this
      if (using_mutex) native @|pthread_mutex_lock( &$this->thread_mutex );

      if (@socket_id != -1)
        native @|close( $socket_id );
        @socket_id = -1
      endIf
      state = CLOSED

      if (using_mutex) native @|pthread_mutex_unlock( &$this->thread_mutex );

      return this

    method character_reader->Reader<<Character>>
      return @character_reader

    method is_closed->Logical
      return (state == CLOSED)

    method is_connected->Logical
      return (state == CONNECTED)

    method is_connecting->Logical
      return (state == CONNECTING)

    method on_cleanup
      if (using_mutex) native @|pthread_mutex_destroy( &$this->thread_mutex );
      close

    method printer->PrintWriter
      return @printer

    method reader->Reader<<Byte>>
      return @reader

    method remote_ip->String
      if (@remote_ip) return @remote_ip
      native @|$this->remote_ip = RogueString_create_from_utf8( $this->remote_ip_buffer );
      return @remote_ip

    method socket_id->Int32
      return @socket_id

    method writer->Writer<<Byte>>
      return @writer

endClass


class BasicServerSocket : ServerSocket
  DEPENDENCIES
    nativeHeader
      #include <netinet/in.h>
      #include <netdb.h>
      #include <sys/socket.h>
    endNativeHeader

  PROPERTIES
    socket_id = -1
    port         : Int32
    is_listening : Logical
    native    "sockaddr_in address;"
    native    "socklen_t   address_size;"

  METHODS
    method init( @port )
      native @|
              |$socket_id = socket( AF_INET, SOCK_STREAM, 0 );
              |if ($socket_id != -1)
              |{
              |  $this->address.sin_addr.s_addr = INADDR_ANY;
              |  $this->address.sin_port = htons( $port );
              |  $this->address.sin_family = AF_INET;
              |  $this->address_size = sizeof($this->address);
              |
              |  // Allow socket address to be quickly reused between program launches
              |  int opt = 1;
              |  setsockopt( $socket_id, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt) );
              |
              |  if (bind($socket_id,(sockaddr*) &$this->address, $this->address_size) == 0)
              |  {
              |    getsockname( $socket_id, (sockaddr*) &$this->address, &$this->address_size );
              |
              |    if (listen($socket_id,SOMAXCONN) == 0)
              |    {
              |      fcntl( $socket_id, F_SETFL, O_NONBLOCK );
              |      $is_listening = true;
              |    }
              |  }
              |}

      if (not @is_listening) close

    method accept_connection->BasicSocket
      # Returns null if no connections are being attempted.
      if (not @is_listening) return null

      local remote_socket_id : Int32

      native @|
              |$remote_socket_id = (RogueInt32) accept($socket_id,(sockaddr*) &$this->address, &$this->address_size);
              |if ($remote_socket_id < 0) return NULL;
              |
              |char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];
              |
              |if (getnameinfo((sockaddr*) &$this->address, $this->address_size, hbuf, sizeof(hbuf), sbuf,
              |    sizeof(sbuf), NI_NUMERICHOST | NI_NUMERICSERV))
              |{
              |  // error getting IP address
              |  return NULL;
              |}

      local result = BasicSocket( remote_socket_id )
      result.remote_ip = native( "RogueString_create_from_utf8( hbuf )" )->String
      return result

    method close->this
      if (@socket_id != -1)
        native @|close( $socket_id );
        @socket_id = -1
      endIf
      return this

    method is_listening->Logical
      return @is_listening

    method on_cleanup
      close

    method port->Int32
      return @port

    method socket_id->Int32
      return @socket_id
endClass


class BasicSocketReader : Reader<<Byte>>
  PROPERTIES
    socket       : BasicSocket
    buffer_pos   : Int32
    buffer_count : Int32
    native "RogueByte read_buffer[1024];"

  METHODS
    method init( socket )

    method has_another->Logical
      if (buffer_pos < buffer_count) return true
      if (not socket.is_connected)   return false

      buffer_pos = 0
      buffer_count = native( "::read( $socket->socket_id, $this->read_buffer, 1024 )" )->Int32
      if (buffer_count == -1)
        if (native("errno != EAGAIN")->Logical)
          socket.close
          return false
        endIf
        buffer_count = 0
        return false  # No bytes available
      endIf

      if (buffer_count == 0)
        # End of data
        socket.close
        return false
      endIf

      return true

    method peek->Byte
      if (not has_another) return 0
      return native( "$this->read_buffer[$this->buffer_pos]" )->Byte

    method position->Int32 [fallback]
      return @position

    method read->Byte
      if (not has_another) return 0
      ++@position
      return native( "$this->read_buffer[$this->buffer_pos++]" )->Byte

    method reset->this
      seek( 0 )
      return this

    method seek( pos:Int32 )->this
      throw UnsupportedOperationError( "BasicSocketReader.seek()" )
endClass


class BasicSocketWriter : Writer<<Byte>>
  PROPERTIES
    socket       : BasicSocket
    write_buffer = Byte[]

  METHODS
    method init( socket )

    method close->this
      socket.close
      return this

    method flush->this
      if (write_buffer.count == 0) return this

      local sent : Int32

      native @|
              |try
              |{
              |  $sent = ::send( $socket->socket_id, $write_buffer->data->as_bytes, $write_buffer->count, 0 );
              |}
              |catch (...)
              |{
                 socket.close
                 return this
      native @|}

      if (sent == 0) return this

      if (sent > 0)
        write_buffer.discard( 0, sent )
      else
        if (native("errno != EAGAIN")->Logical) socket.close
      endIf

      return this

    method reset->this
      throw UnsupportedOperationError( "BasicSocketWriter.reset()" )

    method seek( pos:Int32 )->this
      throw UnsupportedOperationError( "BasicSocketWriter.seek()" )

    method seek_end()->this
      throw UnsupportedOperationError( "BasicSocketWriter.seek_end()" )

    method skip( n:Int32 )->this
      throw UnsupportedOperationError( "BasicSocketWriter.skip()" )

    method write( value:Byte )->this
      write_buffer.add( value )
      return flush

    method write( list:Byte[] )->this
      forEach (value in list) write( value )
      return this
endClass

