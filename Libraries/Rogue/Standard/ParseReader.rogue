class ParseReader : Reader<<Character>>
  PROPERTIES
    data           : Character[]
    position       : Int32
    count          : Int32
    line           : Int32
    column         : Int32
    spaces_per_tab : Int32

  METHODS
    method init( source:String, spaces_per_tab=0 )
      local tab_count = 0

      if (spaces_per_tab)
        forEach (b in source)
          if (b == '\t') ++tab_count
        endForEach
      endIf

      data = Character[]( source.count + tab_count )
      forEach (b in source)
        if (b == '\t' and spaces_per_tab)
          forEach (1..spaces_per_tab) data.add( 32 )
        else
          data.add( b )
        endIf
      endForEach

      count = data.count
      line = 1
      column = 1
      position = 0

    method init( file:File, spaces_per_tab=0 )
      init( file.load_as_string, spaces_per_tab )

    method init( source:Character[], spaces_per_tab=0 )
      local tab_count = 0

      if (spaces_per_tab)
        forEach (b in source)
          if (b == '\t') ++tab_count
        endForEach
      endIf

      data = Character[]( source.count + tab_count )
      forEach (b in source)
        if (b == '\t' and spaces_per_tab)
          forEach (1..spaces_per_tab) data.add( 32 )
        else
          data.add( b )
        endIf
      endForEach

      count = data.count
      line = 1
      column = 1
      position = 0

    method consume( ch:Character )->Logical
      if (peek != ch) return false
      read
      return true

    method consume( text:String )->Logical
      local limit = text.count
      local i = 0
      while (i < limit)
        if (peek(i) != text[i]) return false
        ++i
      endWhile

      # Found a match; discard the characters
      i = 0
      while (i < limit)
        read
        ++i
      endWhile

      return true

    method consume_id( text:String )->Logical
      local ch = peek( text.count )
      if (ch.is_alphanumeric or ch == '_') return false  # not end of identifier
      return consume( text )

    method consume_eols->Logical
      local found = false
      while (consume('\n')) found = true
      return found

    method consume_spaces->Logical
      local found = false
      while (consume(' ')) found = true
      return found

    method has_another->Logical
      return (position < count)

    method has_another( n:Int32 )->Logical
      return (position+n <= count)

    method peek->Character
      if (position == count) return 0->Character
      return data[position]

    method peek( num_ahead:Int32 )->Character
      # Zero-based
      local peek_pos = position + num_ahead
      if (peek_pos >= count) return 0->Character
      return data[peek_pos]

    method read->Character
      local result = data[ position ]->Character
      ++position
      if (result == 10)
        ++line
        column = 1
      else
        ++column
      endIf
      return result

    method read_hex_value->Int32
      local ch = read
      if (ch >= '0' and ch <= '9') return (ch - '0')
      if (ch >= 'a' and ch <= 'f') return 10 + (ch - 'a')
      if (ch >= 'A' and ch <= 'F') return 10 + (ch - 'A')
      return 0

    method reset->this
      count = data.count
      return seek( 0 )

    method seek( pos:Int32 )->this
      if (pos < 0)         pos = 0
      elseIf (pos > count) pos = count

      if (pos > position)
        position = 0
        line = 1
        column = 1
      endIf

      while (position < pos) read

      return this

    method seek_location( new_line:Int32, new_column:Int32 )->this
      if (new_line < line or (new_line == line and new_column < column))
        # start over at (1,1)
        position = 0
        line     = 1
        column   = 1
      endIf

      while (has_another and line < new_line)     read
      while (has_another and column < new_column) read

      return this

    method set_location( line, column )->ParseReader
      return this

endClass

