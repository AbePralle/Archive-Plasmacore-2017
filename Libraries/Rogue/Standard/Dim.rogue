# 1D
routine Dim<<$DataType>>( n:Int32 )->$DataType[]
  local default_value : $DataType
  return $DataType[]( n, default_value )
endRoutine

routine Dim<<$DataType>>( n:Int32, fn:Function()->$DataType )->$DataType[]
  return $DataType[]( n, fn )
endRoutine

routine Dim<<$DataType>>( n:Int32, fn:Function(Int32)->$DataType )->$DataType[]
  return $DataType[]( n, fn )
endRoutine

# 2D
routine Dim<<$DataType>>( n:Int32, o:Int32 )->$DataType[][]
  local result = $DataType[][](n)
  forEach (1..n) result.add( Dim<<$DataType>>(o) )
  return result
endRoutine

routine Dim<<$DataType>>( n:Int32, o:Int32, fn:Function()->$DataType )->$DataType[][]
  local result = $DataType[][](n)
  forEach (1..n) result.add( Dim<<$DataType>>(o,fn) )
  return result
endRoutine

routine Dim<<$DataType>>( n:Int32, o:Int32, fn:Function(Int32,Int32)->$DataType )->$DataType[][]
  local result = $DataType[][](n)
  forEach (1..n) result.add( Dim<<$DataType>>(o) )
  forEach (j in 0..<o)
    forEach (i in 0..<n) result[ i ][ j ] = fn( i, j )
  endForEach
  return result
endRoutine

# 3D
routine Dim<<$DataType>>( n:Int32, o:Int32, p:Int32 )->$DataType[][][]
  local result = $DataType[][][](n)
  forEach (1..n) result.add( Dim<<$DataType>>(o,p) )
  return result
endRoutine

routine Dim<<$DataType>>( n:Int32, o:Int32, p:Int32, fn:Function()->$DataType )->$DataType[][][]
  local result = $DataType[][][](n)
  forEach (1..n) result.add( Dim<<$DataType>>(o,p,fn) )
  return result
endRoutine

routine Dim<<$DataType>>( n:Int32, o:Int32, p:Int32,
    fn:Function(Int32,Int32,Int32)->$DataType )->$DataType[][][]
  local result = $DataType[][][](n)
  forEach (1..n) result.add( Dim<<$DataType>>(o,p) )
  forEach (k in 0..<p)
    forEach (j in 0..<o)
      forEach (i in 0..<n) result[ i ][ j ][ k ] = fn( i, j, k )
    endForEach
  endForEach
  return result
endRoutine

