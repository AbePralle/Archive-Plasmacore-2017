class Date( timestamp=System.time:Real64 ) [compound]
  GLOBAL METHODS
    method create( year:Int32, month:Int32, day:Int32, hour=0:Int32, minute=0:Int32, second=0:Int32, millisecond=0:Int32 )->Date
      native @|time_t cur_seconds = 0;
              |tm* zero_date = localtime( &cur_seconds );
              |
              |tm cur_date;
              |memcpy( &cur_date, zero_date, sizeof(tm) );
              |
              |cur_date.tm_year = $year - 1900;
              |cur_date.tm_mon  = $month - 1;
              |cur_date.tm_mday = $day;
              |cur_date.tm_hour = $hour;
              |cur_date.tm_min  = $minute;
              |cur_date.tm_sec  = $second;
              |cur_date.tm_isdst = -1;
              |
      return Date( native( "((RogueReal64)mktime(&cur_date))" )->Real64 + millisecond )

    method now->Date
      return Date()

    method ymd( year:Int32, month:Int32, day:Int32 )->Date
      return Date( year, month, day )

  METHODS
    method year->Int32
      native @|time_t cur_seconds = (time_t) (RogueInt64)($timestamp);
              |tm* date = localtime( &cur_seconds );
              |return date->tm_year + 1900;

    method day->Int32
      native @|time_t cur_seconds = (time_t) (RogueInt64)($timestamp);
              |tm* date = localtime( &cur_seconds );
              |return date->tm_mday;

    method hour->Int32
      native @|time_t cur_seconds = (time_t) (RogueInt64)($timestamp);
              |tm* date = localtime( &cur_seconds );
              |return date->tm_hour;

    method millisecond->Int32
      return Int32( (timestamp * 1000) % 1000 )

    method minute->Int32
      native @|time_t cur_seconds = (time_t) (RogueInt64)($timestamp);
              |tm* date = localtime( &cur_seconds );
              |return date->tm_min;

    method month->Int32
      native @|time_t cur_seconds = (time_t) (RogueInt64)($timestamp);
              |tm* date = localtime( &cur_seconds );
              |return date->tm_mon + 1;

    method second->Int32
      native @|time_t cur_seconds = (time_t) (RogueInt64)($timestamp);
              |tm* date = localtime( &cur_seconds );
              |return date->tm_sec;

    method hour12->Int32
      local h = hour
      if (h == 0) return 12
      if (h <= 12) return h
      return (h - 12)

    method is_am->Logical
      return (hour < 12)

    method is_pm->Logical
      return (hour >= 12)

    method operator+( other:TimeInterval )->Date
      return Date( timestamp + other.total_seconds )

    method operator-( other:TimeInterval )->Date
      return Date( timestamp - other.total_seconds )

    method operator-( other:Date )->TimeInterval
      return TimeInterval( timestamp - other.timestamp )

    method operator<( other:Date )->Logical
      return (timestamp < other.timestamp)

    method operator==( other:Date )->Logical
      return (timestamp == other.timestamp)

    method to->String
      return this->String( &ymd, &hms, &ms )

    method to->String( &ymd, &hms, &ms, &format=24:Int32 )
      which (format)
        case 12, 24: hms = true
        others: println "*** ERROR calling Date->String() - &format should be 12 or 24 ***"
      endWhich

      local buffer = StringBuilder()

      if (ymd)
        buffer.print( year.right_justified(4,'0') ).print('.')
        buffer.print( month.right_justified(2,'0') ).print('.')
        buffer.print( day.right_justified(2,'0') )
        if (hms or ms) buffer.print( ' ' )
      endIf
      if (hms)
        if (format == 12)
          buffer.print( hour12 ).print( ':' )
        else
          buffer.print( hour.right_justified(2,'0') ).print(':')
        endIf
        buffer.print( minute.right_justified(2,'0') ).print(':')
        buffer.print( second.right_justified(2,'0') )
        if (ms) buffer.print( '.' )
        if (format == 12)
          if (is_am) buffer.print " AM"
          else       buffer.print " PM"
        endIf
      endIf
      if (ms)
        buffer.print( millisecond.right_justified(3,'0') )
      endIf
      return buffer->String

endClass

class TimeInterval( total_seconds:Real64 ) [compound]
  GLOBAL METHODS
    method create( flag=true:Logical, days=0:Real64, hours=0:Real64, minutes=0:Real64, seconds=0:Real64, milliseconds=0:Real64 )->TimeInterval
      # 'flag' is ignored and is a kludge to disambiguate the compound initializers from this global create method.
      return TimeInterval( days * (3600*24) + hours*3600 + minutes*60 + seconds + (milliseconds/1000.0) )

    method hms( hours:Real64, minutes:Real64, seconds:Real64, ms=0:Real64 )->TimeInterval
      return TimeInterval( &hours=hours, &minutes=minutes, &seconds=seconds, &milliseconds=ms )


  METHODS
    method days->Int32 [macro]
      Int32( this.total_seconds.abs / (3600*24) )

    method hours->Int32 [macro]
      Int32( (this.total_seconds.abs % (3600*24)) / 3600 )

    method is_negative->Logical [macro]
      (this.total_seconds.abs < 0)

    method minutes->Int32 [macro]
      Int32( (this.total_seconds.abs % 3600) / 60 )

    method seconds->Int32 [macro]
      Int32( this.total_seconds.abs % 60 )

    method milliseconds->Int32 [macro]
      Int32( (this.total_seconds.abs * 1000) % 1000 )

    method operator<( other:TimeInterval )->Logical
      return (total_seconds < other.total_seconds)

    method operator==( other:TimeInterval )->Logical
      return (total_seconds == other.total_seconds)

    method to->String
      local buffer = StringBuilder()

      if (total_seconds < 0) buffer.print( '-' )

      local needs_comma = false

      if (days)  buffer.print( days ).print( " day".pluralized(days) ); needs_comma = true

      if (hours)
        if (needs_comma) buffer.print( ", " )
        buffer.print( hours ).print( " hour".pluralized(hours) ); needs_comma = true
      endIf
      if (minutes)
        if (needs_comma) buffer.print( ", " )
        buffer.print( minutes ).print( " minute".pluralized(minutes) ); needs_comma = true
      endIf

      if (seconds or milliseconds)
        if (needs_comma) buffer.print( ", " )
        needs_comma = true

        buffer.print( (total_seconds % 60).format(3) ).print( " seconds" )
      endIf

      if (not buffer.count) return "0.000 seconds"

      return buffer->String

endClass

