# Atomic datatypes, similar to Java's AtomicInteger or C++ 11's std::atomic<>.

nativeHeader
#include <atomic>
endNativeHeader


class Atomic <<$DataType>>
  PROPERTIES
    native "std::atomic<$($DataType)> _value;"

  METHODS
    method init ()
      noAction

    method init (value : $DataType)
      set_value(value)

    method add_get (other : $DataType) -> $DataType [macro]
      native "($this->_value += $other)"

    method get_add (other : $DataType) -> $DataType [macro]
      native "($this->_value.fetch_add($other))"

    method subtract_get (other : $DataType) -> $DataType [macro]
      native "($this->_value -= $other)"

    method get_subtract (other : $DataType) -> $DataType [macro]
      native "($this->_value.fetch_sub($other))"

    method and_get (other : $DataType) -> $DataType [macro]
      native "($this->_value &= $other)"

    method get_and (other : $DataType) -> $DataType [macro]
      native "($this->_value.fetch_and($other))"

    method or_get (other : $DataType) -> $DataType [macro]
      native "($this->_value |= $other)"

    method get_or (other : $DataType) -> $DataType [macro]
      native "($this->_value.fetch_or($other))"

    method xor_get (other : $DataType) -> $DataType [macro]
      native "($this->_value ^= $other)"

    method get_xor (other : $DataType) -> $DataType [macro]
      native "($this->_value.fetch_xor($other))"

    method increment_get () -> $DataType [macro]
      native "(++$this->_value)"

    method get_increment () -> $DataType [macro]
      native "($this->_value++)"

    method decrement_get () -> $DataType [macro]
      native "(--$this->_value)"

    method get_decrement () -> $DataType [macro]
      native "($this->_value--)"

    method exchange (other : $DataType) -> $DataType [macro]
      native "($this->_value.exchange($other))"

    method compare_and_set (expect : $DataType, other : $DataType) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_strong($expect, $other));"
      return r

    method compare_and_set_weak (expect : $DataType, other : $DataType) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_weak($expect, $other));"
      return r

    method compare_and_exchange (expect : $DataType@, other : $DataType) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_strong($expect, $other));"
      return r

    method compare_and_exchange_weak (expect : $DataType@, other : $DataType) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_weak($expect, $other));"
      return r

    method value () -> $DataType [macro]
      native "($this->_value.load())"

    method set_value (value : $DataType) [macro]
      native "$this->_value.store($value);"

    method lazy_set (value : $DataType) [macro]
      native "$this->_value.store($value, std::memory_order_release);"

    method to->String
      return value->String
endClass

$define AtomicInt32 Atomic<<Int32>>
$define AtomicInt64 Atomic<<Int64>>


# Unlike AtomicLogical, this is guaranteed to be lock-free
class AtomicFlag
  PROPERTIES
    native "std::atomic_flag _value = ATOMIC_FLAG_INIT;"

  METHODS
    method init ()
      noAction

    method init (value : Logical)
      if (value)
        get_set
      endIf

    method get_set () -> Logical [macro]
      # Sets to true and returns previous value
      native "($this->_value.test_and_set())"

    method set () [macro]
      # Sets to true
      native "($this->_value.test_and_set());"

    method unset () [macro]
      # Sets to false
      native "$this->_value.clear();"
endClass


# This could probably be an instance of Atomic, or could share a superclass
# with Atomic.
class AtomicLogical
  PROPERTIES
    native "std::atomic<bool> _value;"

  METHODS
    method init ()
      noAction

    method init (value : Logical)
      set_value(value)

    #method and_get (other : Logical) -> Logical [macro]
    #  native "($this->_value &= $other)"

    #method get_and (other : Logical) -> Logical [macro]
    #  native "($this->_value.fetch_and($other))"

    #method or_get (other : Logical) -> Logical [macro]
    #  native "($this->_value |= $other)"

    #method get_or (other : Logical) -> Logical [macro]
    #  native "($this->_value.fetch_or($other))"

    #method xor_get (other : Logical) -> Logical [macro]
    #  native "($this->_value ^= $other)"

    #method get_xor (other : Logical) -> Logical [macro]
    #  native "($this->_value.fetch_xor($other))"

    method exchange (other : Logical) -> Logical [macro]
      native "($this->_value.exchange($other))"

    method compare_and_set (expect : Logical, other : Logical) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_strong($expect, $other));"
      return r

    method compare_and_set_weak (expect : Logical, other : Logical) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_weak($expect, $other));"
      return r

    method compare_and_exchange (expect : Logical@, other : Logical) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_strong($expect, $other));"
      return r

    method compare_and_exchange_weak (expect : Logical@, other : Logical) -> Logical
      local r : Logical
      native "$r = ($this->_value.compare_exchange_weak($expect, $other));"
      return r

    method value () -> Logical [macro]
      native "($this->_value.load())"

    method set_value (value : Logical) [macro]
      native "$this->_value.store($value);"

    method lazy_set (value : Logical) [macro]
      native "$this->_value.store($value, std::memory_order_release);"

    method to->String
      return value->String
endClass
