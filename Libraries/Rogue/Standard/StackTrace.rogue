class StackTrace [essential]
  PROPERTIES
    entries      : String[]
    count        : Int32
    is_formatted : Logical

  METHODS
    method init( omit_count=0:Int32 ) [essential]
      ++omit_count
      native @|RogueDebugTrace* current = Rogue_call_stack;
              |while (current && $omit_count > 0)
              |{
              |  --$omit_count;
              |  current = current->previous_trace;
              |}
              |if (current) $count = current->count();

      entries = String[]( count )
      while (native("current!=0")->Logical)
        entries.add( native("RogueString_create_from_utf8( current->to_c_string() )")->String )
        native "current = current->previous_trace;"
      endWhile

    method format
      if (is_formatted) return
      is_formatted = true

      local max_characters = 0
      forEach (entry in entries)
        local sp = entry.locate( ' ' )
        if (sp.exists) max_characters = Math.max( max_characters, sp.value )
      endForEach

      ++max_characters
      forEach (entry at i in entries)
        if (entry.contains(' '))
          entries[i] = entry.before_first(' ').left_justified(max_characters) + entry.from_first(' ')
        endIf
      endForEach

    method print [essential]
      print( Global.global_output_buffer )
      Global.flush

    method print( buffer:StringBuilder )->StringBuilder
      format
      forEach (entry in entries)
        buffer.println entry
      endForEach
      return buffer

    method to->String
      return print( StringBuilder() )->String
endClass

