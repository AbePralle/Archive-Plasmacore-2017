class TypeInfo
  DEPENDENCIES
    nativeHeader
      struct RogueType;
      struct RogueTypeInfo;
      RogueTypeInfo* RogueType_type_info( RogueType* THIS );
    endNativeHeader

    nativeCode
      RogueTypeInfo* RogueType_type_info( RogueType* THIS )
      {
        if ( !THIS->type_info )
        {
          THIS->type_info = RogueTypeInfo__init__Int32_String( (RogueTypeInfo*)ROGUE_CREATE_OBJECT(TypeInfo),
              THIS->index, Rogue_literal_strings[ THIS->name_index ] );

          for (int i=0; i<THIS->global_property_count; ++i)
          {
            RogueTypeInfo__add_global_property_info__Int32_Int32( (RogueTypeInfo*) THIS->type_info,
                THIS->global_property_name_indices[i], THIS->global_property_type_indices[i] );
          }

          for (int i=0; i<THIS->property_count; ++i)
          {
            RogueTypeInfo__add_property_info__Int32_Int32( (RogueTypeInfo*) THIS->type_info,
                THIS->property_name_indices[i], THIS->property_type_indices[i] );
          }

          for (int i=0; i<THIS->method_count; ++i)
          {
            RogueTypeInfo__add_method_info__Int32( (RogueTypeInfo*) THIS->type_info,
              (RogueInt32)(THIS->methods - Rogue_dynamic_method_table + i) );
          }
        }

        return (RogueTypeInfo*) THIS->type_info;
      }
    endNativeCode

  GLOBAL METHODS
    method get ( index : Int32 ) -> TypeInfo
      if ((index < 0) or (index >= type_count)) return null
      return native("RogueType_type_info(&Rogue_types[$index])")->TypeInfo

    method get ( name : String ) -> TypeInfo
      local result = RuntimeTypeInfoLookup[ name ]
      if (result) return result

      native @|for (int i=Rogue_type_count; --i>=0; )
              |{
              |  RogueType* cur_type = &Rogue_types[ i ];
              |  if (RogueType_name_equals( cur_type, (char*) $name->utf8 ))
              |  {
              |    $result = RogueType_type_info( cur_type );
              |    break;
              |  }
              |}

      if (result) RuntimeTypeInfoLookup[ name ] = result
      return result

    method type_count -> Int32
      return native("Rogue_type_count")->Int32

  PROPERTIES
    index             : Int32
    name              : String
    global_properties = PropertyInfo[]
    properties        = PropertyInfo[]
    methods           = MethodInfo[]

  METHODS
    method init( index, name ) [essential]

    method add_global_property_info( global_property_name_index:Int32, global_property_type_index:Int32 ) [essential]
      global_properties.add( PropertyInfo(global_properties.count,global_property_name_index, global_property_type_index) )

    method add_property_info( property_name_index:Int32, property_type_index:Int32 ) [essential]
      properties.add( PropertyInfo(properties.count,property_name_index, property_type_index) )

    method add_method_info( method_index:Int32 ) [essential]
      local first_param_name  : Int32
      local first_param_type  : Int32
      local parameter_count  : Int32
      local return_type  : Int32
      local call_handler : Int32
      local success = false
      native @|if (Rogue_method_info_table[$method_index][0] >= 0)
              |{
              |  $success = 1;
              |  $parameter_count = Rogue_method_info_table[$method_index][1];
              |  $first_param_name = Rogue_method_info_table[$method_index][2];
              |  $first_param_type = Rogue_method_info_table[$method_index][3];
              |  $return_type      = Rogue_method_info_table[$method_index][4];
              |  $call_handler     = Rogue_method_info_table[$method_index][5];
              |}
      if (success)
        methods.add( MethodInfo(method_index, parameter_count, first_param_name, first_param_type, return_type, call_handler) )
      endIf

    method call( context:Object, name_or_sig:String, args=NullValue:Value )->Value
      # Note: can throw NoSuchMethodError
      local m = find_method( name_or_sig, args )
      if (not m)
        if (name_or_sig.contains('('))
          throw NoSuchMethodError( "$.$" (name,name_or_sig) )
        else
          throw NoSuchMethodError( "$.$($)" (name,name_or_sig,args.count) )
        endIf
      endIf

      return call( context, m, args )

    method call( context:Object, m:MethodInfo, args=NullValue:Value )->Value
      if (not args.is_list) args = @[]

      args.insert( context->Value )
      local result = m.call( args )
      args.remove_first
      return result

    method create_object->Object
      if (is_primitive or is_compound)
        local boxed_name = "Boxed<<$>>" (name)
        local boxed_type = TypeInfo[ boxed_name ]
        if (boxed_type) return boxed_type.create_object
        else            throw InstanceError( "Error creating primitive or compound object: cannot find type $." (boxed_name) )
      endIf

      if (is_aspect)
        throw InstanceError( "Cannot create an object from an aspect type - aspects are abstract." )
      endIf

      native @|return RogueType_create_object( &Rogue_types[$index], 0 );

    method create_object( initial_values:Value )->Object
      local obj = create_object
      obj.unpack( initial_values )
      return obj

    method create_object<<$AsType>>->$AsType
      return create_object as $AsType

    method global_property( property_name:String )->Value
      return find_global_property( property_name )

    method global_property( property_info:PropertyInfo )->Value
      if (not property_info) return NullValue

      local i = property_info.index

      if (property_info.type.is_reference)
        return Value( native( "*((RogueObject**)(Rogue_types[$index].global_property_pointers[$i]))" )->Object )
      endIf

      which (property_info.type.name)
        case "Real64"
          return Value( native( "*((RogueReal64*)(Rogue_types[$index].global_property_pointers[$i]))" )->Real64 )

        case "Real32"
          return Value( native( "*((RogueReal32*)(Rogue_types[$index].global_property_pointers[$i]))" )->Real32 )

        case "Int64"
          return Value( native( "*((RogueInt64*)(Rogue_types[$index].global_property_pointers[$i]))" )->Int64 )

        case "Int32"
          return Value( native( "*((RogueInt32*)(Rogue_types[$index].global_property_pointers[$i]))" )->Int32 )

        case "Character"
          return Value( native( "*((RogueCharacter*)(Rogue_types[$index].global_property_pointers[$i]))" )->Character + "" )

        case "Byte"
          return Value( native( "*((RogueByte*)(Rogue_types[$index].global_property_pointers[$i]))" )->Byte )

        case "Logical"
          return Value( native( "*((RogueLogical*)(Rogue_types[$index].global_property_pointers[$i]))" )->Logical )

        others
          # Must be a compound
          return Introspector( null, native("(RogueInt64)(intptr_t)(Rogue_types[$index].global_property_pointers[$i])")->Int64,
              property_info.type )->Value
      endWhich

    method global_property_count->Int32
      # Convenience method to provide symmetric interface with per-object `property_count` methods.
      return global_properties.count

    method global_property_name( global_property_index:Int32 )->String
      # Convenience method to provide symmetric interface with per-object `property_name` methods.
      return global_properties[ global_property_index ].name

    method find_global_property( property_name:String )->PropertyInfo
      forEach (i in 0..<global_property_count)
        if (global_properties[i].name == property_name)
          return global_properties[ i ]
        endIf
      endForEach
      return null

    method instance_of( other:TypeInfo )->Logical
      return native( "RogueType_instance_of( &Rogue_types[$index], &Rogue_types[$other->index] )" )->Logical

    method is_aspect->Logical
      return native( "(Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_TYPE_MASK) == ROGUE_ATTRIBUTE_IS_ASPECT" )->Logical

    method is_class->Logical
      return native( "(Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_TYPE_MASK) == ROGUE_ATTRIBUTE_IS_CLASS" )->Logical

    method is_compound->Logical
      return native( "(Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_TYPE_MASK) == ROGUE_ATTRIBUTE_IS_COMPOUND" )->Logical

    method is_direct->Logical
      return native( "Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_DIRECT" )->Logical

    method is_primitive->Logical
      return native( "(Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_TYPE_MASK) == ROGUE_ATTRIBUTE_IS_PRIMITIVE" )->Logical

    method is_reference->Logical
      return native( "!(Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_DIRECT)" )->Logical

    method base_class->TypeInfo
      local base_count : Int32
      native "$base_count = Rogue_types[$index].base_type_count;"
      forEach (i in 0..<base_count)
        local ti : TypeInfo
        native @|RogueType * base = Rogue_types[$this->index].base_types[$i];
                |RogueType_type_info(base);
                |$ti = (RogueTypeInfo*)base->type_info;
        if (not ti.is_aspect) return ti
      endForEach
      return null

    method aspects->TypeInfo[]
      local r = TypeInfo[]
      local base_count : Int32
      native "$base_count = Rogue_types[$index].base_type_count;"
      forEach (i in 0..<base_count)
        local ti : TypeInfo
        native @|RogueType * base = Rogue_types[$this->index].base_types[$i];
                |RogueType_type_info(base);
                |$ti = (RogueTypeInfo*)base->type_info;
        if (ti.is_aspect) r.add(ti)
      endForEach
      return r

    method is_subclass( other:TypeInfo )->Logical
      #NOTE: This doesn't consider aspects
      if (this is other) return true
      if (other is null) return false
      if (base_class is null) return false
      return base_class.is_subclass(other)

    method find_property( property_name:String )->PropertyInfo
      forEach (p in properties)
        if (p.name == property_name) return p
      endForEach
      return null

    method find_method( name_or_sig:String, arg_count=0:Int32 )->MethodInfo
      if (name_or_sig.contains('('))
        forEach (m in methods)
          if (m.signature == name_or_sig) return m
        endForEach
        return null
      endIf

      forEach (m in methods)
        if (m.name == name_or_sig and m.parameter_count == arg_count) return m
      endForEach

      return null

    method find_method( name_or_sig:String, args:Value )->MethodInfo
      if (name_or_sig.contains('('))
        forEach (m in methods)
          if (m.signature == name_or_sig) return m
        endForEach
        return null
      endIf

      # Find first close match among overloads, falling back to last compatible match
      # (e.g. an integer arg is a close match with Int64 and Int32 and a real arg is
      # a compatible match with Int64 and Int32).
      local best_m : MethodInfo
      local fallback_m_matching_param_count : MethodInfo
      local fallback_m_matching_name        : MethodInfo

      forEach (m in methods)
        contingent
          necessary (m.name == name_or_sig)
          fallback_m_matching_name = m
          necessary (m.parameter_count == args.count)
          fallback_m_matching_param_count = m

          forEach (arg at i in args)
            local p = m.parameter_type( i )

            if (p.is_primitive)
              if (p.name == "Logical")
                necessary (arg.is_logical)
              elseIf (p.name == "Character")
                necessary (arg.is_number or (arg.is_string and arg.count == 1))
              else
                necessary (arg.is_number)
              endIf

            elseIf (p.name == "String")
              necessary (arg.is_string)

            elseIf (p.is_reference)
              necessary (arg.is_object)
              local obj = arg->Object
              if (obj) necessary (obj.type_info.instance_of(p))

            endIf
          endForEach

        satisfied
          # This is a compatible method
          best_m = m

          # Now see if it's a close match by checking primitive types
          contingent
            forEach (arg at i in args)
              local p = m.parameter_type( i )

              if (arg.is_number)
                which (p.name)
                  case "Int64", "Int32", "Character", "Byte"
                    necessary (arg->Real64.fractional_part == 0)
                endWhich
              endIf

            endForEach

          satisfied
            # Close match - go ahead and return it
            return m

          endContingent

        endContingent
      endForEach

      if (not best_m) best_m = fallback_m_matching_param_count
      if (not best_m) best_m = fallback_m_matching_name

      if (best_m)
        return best_m
      else
        return null
      endIf

    method find_methods( method_name:String )->MethodInfo[] [macro]
      this.method_info( method_name )

    method method_info( method_name:String )->MethodInfo[]
      local r = MethodInfo[]
      forEach (i in 0..<methods.count)
        if (methods[i].name == method_name)
          r.add( methods[ i ] )
        elseIf (methods[i].name.begins_with(method_name))
          local n = methods[i].name.before_first("<<").before_first("(")
          if (n == method_name)
            r.add( methods[ i ] )
          endIf
        endIf
      endForEach
      return r

    method set_global_property( property_name:String, value:Value )->this
      return set_global_property( find_global_property(property_name), value )

    method set_global_property( property_info:PropertyInfo, value:Value )->this
      if (not property_info) return this

      local i = property_info.index

      if (property_info.type.is_reference)
        local v = value->Object
        native( "*((RogueObject**)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

      else
        which (property_info.type.name)
          case "Real64"
            local v = value->Real64
            native( "*((RogueReal64*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          case "Real32"
            local v = value->Real32
            native( "*((RogueReal32*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          case "Int64"
            local v = value->Int64
            native( "*((RogueInt64*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          case "Int32"
            local v = value->Int32
            native( "*((RogueInt32*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          case "Character"
            local v = value->Character
            native( "*((RogueCharacter*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          case "Byte"
            local v = value->Byte
            native( "*((RogueByte*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          case "Logical"
            local v = value->Logical
            native( "*((RogueLogical*)(Rogue_types[$index].global_property_pointers[$i])) = $v;" )

          others
            # Must be a compound
            Introspector( null, native("(RogueInt64)(intptr_t)(Rogue_types[$index].global_property_pointers[$i])")->Int64,
              property_info.type ).set( value )
        endWhich

      endIf

      return this

    method set_singleton( new_singleton:Object )->this
      if ((index < 0) or (index >= type_count)) return this
      native @|Rogue_types[$index]._singleton = $new_singleton;
      return this

    method singleton->Object
      if ((index < 0) or (index >= type_count)) return null
      return native("RogueType_singleton(&Rogue_types[$index])")->Object

    method singleton<<$OfType>>->$OfType
      return singleton as $OfType

    method to->String
      return name
endClass


class RuntimeTypeInfoLookup : Table<<String,TypeInfo>> [singleton];


class PropertyInfo
  PROPERTIES
    index               : Int32
    property_name_index : Int32
    property_type_index : Int32

  METHODS
    method init( index, property_name_index, property_type_index )

    method name->String
      return Runtime.literal_string( property_name_index )

    method type->TypeInfo
      return TypeInfo.get( property_type_index )

    method to->String
      return "$:$" (name,type.name)
endClass


class MethodInfo
  GLOBAL PROPERTIES
    _method_name_strings = Table<<Int32,String>>()

  GLOBAL METHODS
    method _get_method_name ( method_index : Int32 ) -> String
      local name = _method_name_strings[method_index]
      if (not name)
        native @|int name_index = Rogue_method_info_table[$method_index][0];
                |if (name_index >= 0) $name = RogueString_create_from_utf8(Rogue_method_name_strings[name_index]);
        require(name)
        _method_name_strings[method_index] = name
      endIf
      return name

  PROPERTIES
    index               : Int32
    name                : String
    base_name           : String
    signature           : String
    fn_ptr              : IntPtr
    parameter_count     : Int32
    call_handler        : Int32
    _first_param_name   : Int32
    _first_param_type   : Int32
    _return_type        : Int32

  METHODS
    method init( index, parameter_count, _first_param_name, _first_param_type, _return_type, call_handler )
      fn_ptr = native("(intptr_t)Rogue_dynamic_method_table[$this->index]")->IntPtr

    method base_name->String
      if (@base_name) return @base_name
      @base_name = name.before_first('<')
      return @base_name

    method name->String
      if (@name) return @name
      @name = _get_method_name(index)
      return @name

    method return_type->TypeInfo
      if (_return_type == -1) return null
      return TypeInfo.get(_return_type)

    method parameter_name( index:Int32 )->String [essential]
      if (index < 0 or index >= parameter_count) return null
      return native( "Rogue_literal_strings[ Rogue_method_param_names[$_first_param_name + $index] ]" )->String

    method parameter_type( index:Int32 )->TypeInfo
      if (index < 0 or index >= parameter_count) return null
      return TypeInfo.get( native("Rogue_method_param_types[$_first_param_type + $index]")->Int32 )

    method signature->String
      if (@signature) return @signature
      local buffer = StringBuilder().print( name ).print( '(' )
      forEach (i in 0..<parameter_count)
        if (i > 0) buffer.print( ',' )
        buffer.print( parameter_type(i).name )
      endForEach
      buffer.print( ')' )
      signature = buffer->String
      return @signature

    method to->String
      if (return_type) return signature + "->" + return_type.name
      return signature

    method call( context:Object, args=null:Value )->Value
      if (args is not null)
        args.insert( context->Value )
        local result = call( args )
        args.remove_first
        return result
      else
        return call( @[ context->Value ] )
      endIf

    method call( args:Value )->Value
      return call( native("$this->fn_ptr")->IntPtr, call_handler, args )


  GLOBAL METHODS
    method call( fn:IntPtr, i:Int32, args:Value )->Value
      # CAUTION: leave parameter names as they are - compiler relies on these specific parameter names
      #
      # fn: function pointer
      # i:  IntrospectionCallHandler index
      # Send a @[list] as the value args.

      # <Compiler will insert generated code here>

      return UndefinedValue
endClass

class NoSuchMethodError : Error
  METHODS
    method init( sig:String )
      prior.init( "No such method for introspection call: $." (sig) )
endClass

class InstanceError : Error
endClass

