class UTF8Reader : Reader<<Character>>
  PROPERTIES
    byte_reader : Reader<<Byte>>
    next        : Character?

  METHODS
    method init( byte_reader )
      next = null

    method has_another->Logical
      return next.exists or byte_reader.has_another

    method peek->Character
      if (next.exists) return next.value
      if (not byte_reader.has_another) return 0

      local ch = byte_reader.read : Character
      if (ch & 0x80)
        if (ch & 0x20)
          if (ch & 0x10)
            ch  = ((ch&7):<<:18) | ((byte_reader.read & 0x3F) :<<: 12)
            ch |= (byte_reader.read & 0x3F) :<<: 6
            ch |= byte_reader.read & 0x3F
          else
            ch  = ((ch&15):<<:12) | ((byte_reader.read & 0x3F) :<<: 6)
            ch |= (byte_reader.read & 0x3F)
          endIf
        else
          ch = ((ch&31):<<:6) | (byte_reader.read & 0x3F)
        endIf
      endIf

      next = ch

      return ch

    method read->Character
      local result = peek
      next = null
      ++position
      return result

    method read( buffer:Character[], limit:Int32 )
      forEach (1..limit)
        if (not has_another) return
        buffer.add( read )
      endForEach

    method reset->this
      seek( 0 )
      return this

    method seek( pos:Int32 )->this
      if (pos < position)
        position = 0
        byte_reader.seek( 0 )
      endIf
      return skip( pos - position )

    method skip( n:Int32 )->this
      forEach (1..n) read
      return this
endClass


class CharacterToUTF8ByteWriter : Writer<<Character>>
  PROPERTIES
    byte_writer : Writer<<Byte>>

  METHODS
    method init( byte_writer )

    method close->this
      byte_writer.close
      return this

    method flush->this
      byte_writer.flush
      return this

    method reset->this
      return seek( 0 )

    method seek( pos:Int32 )->this
      if (pos != 0)
        throw UnsupportedOperationError( "CharacterToUTF8ByteWriter.seek(Int32) to non-zero position" )
      endIf
      position = 0
      byte_writer.seek( 0 )
      return this

    method seek_end()->this
      throw UnsupportedOperationError( "CharacterToUTF8ByteWriter.seek_end()" )

    method skip( n:Int32 )->this
      throw UnsupportedOperationError( "CharacterToUTF8ByteWriter.skip(Int32)" )

    method write( value:Character )->this
      if (value <= 0x7F)
        byte_writer.write( value )
      elseIf (value <= 0x7FF)
        byte_writer.write( 0xC0 | (value:>>>:6) ).write( 0x80 | (value & 0x3F) )
      elseIf (value <= 0xFFFF)
        byte_writer.write( 0xE0 | (value:>>>:12) ).write( 0x80 | ((value:>>>:6) & 0x3F) ).write( 0x80 | (value & 0x3F) )
      else
        byte_writer.write( 0xF0 | (value:>>>:18) ).write( 0x80 | ((value:>>>:12) & 0x3F) )
        byte_writer.write( 0x80 | ((value:>>>:6) & 0x3F) ).write( 0x80 | (value & 0x3F) )
      endIf
      return this
endClass


class UTF8ByteToCharacterWriter : Writer<<Byte>>
  PROPERTIES
    character_writer : Writer<<Character>>
    bytes = Byte[](4)

  METHODS
    method init( character_writer )

    method close->this
      character_writer.close
      return this

    method flush->this
      bytes.clear
      character_writer.flush
      return this

    method reset->this
      return seek( 0 )

    method seek( pos:Int32 )->this
      if (pos != 0)
        throw UnsupportedOperationError( "UTF8ByteToCharacterWriter.seek(Int32) to non-zero position" )
      endIf
      position = 0
      character_writer.seek( 0 )
      return this

    method seek_end()->this
      throw UnsupportedOperationError( "UTF8ByteToCharacterWriter.seek_end()" )

    method skip( n:Int32 )->this
      throw UnsupportedOperationError( "UTF8ByteToCharacterWriter.skip(Int32)" )

    method write( value:Byte )->this
      bytes.add( value )

      local ch = bytes[0] : Character
      if (ch & 0x80)
        if (ch & 0x20)
          if (ch & 0x10)
            if (bytes.count == 4)
              ch  = ((ch&7):<<:18)
              ch |= ((bytes[1] & 0x3F) :<<: 12)
              ch |= (bytes[2] & 0x3F) :<<: 6
              ch |= bytes[3] & 0x3F
              bytes.clear
              character_writer.write( ch )
            endIf
          else
            if (bytes.count == 3)
              ch  = ((ch&15):<<:12)
              ch |= ((bytes[1] & 0x3F) :<<: 6)
              ch |= (bytes[2] & 0x3F)
              bytes.clear
              character_writer.write( ch )
            endIf
          endIf
        else
          if (bytes.count == 2)
            ch  = ((ch&31):<<:6)
            ch |= (bytes[1] & 0x3F)
            bytes.clear
            character_writer.write( ch )
          endIf
        endIf
      else
        bytes.clear
        character_writer.write( ch )
      endIf

      return this
endClass

