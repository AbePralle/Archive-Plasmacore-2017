class Math
  GLOBAL METHODS
    $if ("C++")
    method acos( n:Real64 )->Real64 [macro]
      native 'acos((double)$n)'

    method asin( n:Real64 )->Real64 [macro]
      native 'asin((double)$n)'

    method atan( n:Real64 )->Real64 [macro]
      native 'atan((double)$n)'

    method atan2( y:Real64, x:Real64 )->Real64 [macro]
      native 'atan2((double)$y,(double)$x)'

    method ceiling( n:Real64 )->Real64 [macro]
      native 'ceil((double)$n)'

    method cos( n:Real64 )->Real64 [macro]
      native 'cos((double)$n)'

    method exp( n:Real64 )->Real64 [macro]
      native 'exp((double)$n)'

    method floor( n:Real64 )->Real64 [macro]
      native 'floor((double)$n)'

    method log( n:Real64 )->Real64 [macro]
      native 'log((double)$n)'

    method log2( n:Real64 )->Real64 [macro]
      native 'log2((double)$n)'

    method log10( n:Real64 )->Real64 [macro]
      native 'log10((double)$n)'

    method sin( n:Real64 )->Real64 [macro]
      native 'sin((double)$n)'

    method sqrt( n:Real64 )->Real64 [macro]
      native 'sqrt((double)$n)'

    method tan( n:Real64 )->Real64 [macro]
      native 'tan((double)$n)'

    $endIf

    method abs( n:Real64 )->Real64
      if (n >= 0) return  n
      else        return -n

    method abs( n:Int64 )->Int64
      if (n >= 0) return  n
      else        return -n

    method abs( n:Int32 )->Int32
      if (n >= 0) return  n
      else        return -n


    method max( a:Int32, b:Int32 )->Int32
      if (a >= b) return a
      else        return b

    method max( a:Int64, b:Int64 )->Int64
      if (a >= b) return a
      else        return b

    method max( a:Real64, b:Real64 )->Real64
      if (a >= b) return a
      else        return b

    method min( a:Int32, b:Int32 )->Int32
      if (a <= b) return a
      else        return b

    method min( a:Int64, b:Int64 )->Int64
      if (a <= b) return a
      else        return b

    method min( a:Real64, b:Real64 )->Real64
      if (a <= b) return a
      else        return b

    method mod( a:Int32, b:Int32 )->Int32
      if ((not a and not b) or b == 1) return 0

      local r = native("$a % $b")->Int32
      if ((a ~ b) < 0)
        if (r) return r + b
        else   return 0
      else
        return r
      endIf

    method mod( a:Int64, b:Int64 )->Int64
      if ((not a and not b) or b == 1) return 0

      local r = native("$a % $b")->Int64
      if ((a ~ b) < 0)
        if (r) return r + b
        else   return 0
      else
        return r
      endIf

    method mod( a:Real64, b:Real64 )->Real64
      local q = a / b
      return a - floor(q)*b

    method shift_right( value:Int32, bits:Int32 )->Int32
      if (bits <= 0) return value

      --bits
      if (bits) return ((value :>>>: 1) & 0x7fffFFFF) :>>>: bits
      else      return (value :>>>: 1) & 0x7fffFFFF

    method shift_right( value:Int64, bits:Int64 )->Int64
      if (bits <= 0) return value

      --bits
      if (bits) return ((value :>>>: 1) & 0x7fffFFFFffffFFFF) :>>>: bits
      else      return (value :>>>: 1) & 0x7fffFFFFffffFFFF
endClass


class Degrees( value:Real64 ) [compound]
  GLOBAL METHODS
    method create( degrees:Radians )->Degrees
      return Degrees( (degrees.value / pi) * 180.0 )

  METHODS
    method cos->Real64 [macro]
      Math.cos( (this.value / 180.0) * pi )

    method delta_to( other:Degrees )->Degrees
      # Returns the smallest number of degrees necessary to get from this
      # angle to the specified other angle.  For example, Degrees(270).delta_to(Degrees(0))
      # yields Degrees(90), since turning 90 degrees will get you to 0 degrees
      # "faster" than turning -270 degrees.
      local diff = other.value - this.value
      diff %= 360
      if (diff > 180) diff = -(360 - diff)
      return Degrees(diff)

    method operator-()->Degrees [macro]
      Degrees( -this.value )

    method operator+( degrees:Real64 )->Degrees [macro]
      Degrees( this.value + degrees )

    method operator-( degrees:Real64 )->Degrees [macro]
      Degrees( this.value - degrees )

    method operator*( degrees:Real64 )->Degrees [macro]
      Degrees( this.value * degrees )

    method operator/( degrees:Real64 )->Degrees [macro]
      Degrees( this.value / degrees )

    method operator%( degrees:Real64 )->Degrees [macro]
      Degrees( this.value % degrees )

    method operator^( degrees:Real64 )->Degrees [macro]
      Degrees( this.value ^ degrees )

    method operator+( other:Degrees )->Degrees [macro]
      Degrees( this.value + other.value )

    method operator-( other:Degrees )->Degrees [macro]
      Degrees( this.value - other.value )

    method operator*( other:Degrees )->Degrees [macro]
      Degrees( this.value * other.value )

    method operator/( other:Degrees )->Degrees [macro]
      Degrees( this.value / other.value )

    method operator%( other:Degrees )->Degrees [macro]
      Degrees( this.value % other.value )

    method operator^( other:Degrees )->Degrees [macro]
      Degrees( this.value ^ other.value )

    method operator==( other_value:Real64 )->Logical [macro]
      this.value == other_value

    method operator<( other_value:Real64 )->Logical [macro]
      this.value < other_value

    method operator==( other:Degrees )->Logical [macro]
      this.value == other.value

    method operator<( other:Degrees )->Logical [macro]
      this.value < other.value

    method sin->Real64 [macro]
      Math.sin( (this.value / 180.0) * pi )

    method tan->Real64 [macro]
      Math.sin( (this.value / 180.0) * pi )

    method to->String
      return "" + value

    method to->Radians [macro]
      Radians( this )
endClass


class Radians( value:Real64 ) [compound]
  GLOBAL METHODS
    method create( degrees:Degrees )->Radians
      return Radians( (degrees.value / 180.0) * pi )

  METHODS
    method cos->Real64 [macro]
      Math.cos( this.value )

    method delta_to( other:Radians )->Radians
      # Returns the smallest number of radians necessary to get from this
      # angle to the specified other angle.  For example, Radians(pi*3/2).delta_to(Radians(0))
      # yields Radians(pi/2), since turning pi/2 radians will get you to 0 radians
      # "faster" than turning -pi*3/2 radians.
      local diff = other.value - this.value
      diff %= 2*pi
      if (diff > pi) diff = -(2*pi - diff)
      return Radians(diff)

    method operator-()->Radians [macro]
      Radians( -this.value )

    method operator+( radians:Real64 )->Radians [macro]
      Radians( this.value + radians )

    method operator-( radians:Real64 )->Radians [macro]
      Radians( this.value - radians )

    method operator*( radians:Real64 )->Radians [macro]
      Radians( this.value * radians )

    method operator/( radians:Real64 )->Radians [macro]
      Radians( this.value / radians )

    method operator%( radians:Real64 )->Radians [macro]
      Radians( this.value % radians )

    method operator^( radians:Real64 )->Radians [macro]
      Radians( this.value ^ radians )

    method operator+( other:Radians )->Radians [macro]
      Radians( this.value + other.value )

    method operator-( other:Radians )->Radians [macro]
      Radians( this.value - other.value )

    method operator*( other:Radians )->Radians [macro]
      Radians( this.value * other.value )

    method operator/( other:Radians )->Radians [macro]
      Radians( this.value / other.value )

    method operator%( other:Radians )->Radians [macro]
      Radians( this.value % other.value )

    method operator^( other:Radians )->Radians [macro]
      Radians( this.value ^ other.value )

    method operator==( other_value:Real64 )->Logical [macro]
      this.value == other_value

    method operator<( other_value:Real64 )->Logical [macro]
      this.value < other_value

    method operator==( other:Radians )->Logical [macro]
      this.value == other.value

    method operator<( other:Radians )->Logical [macro]
      this.value < other.value

    method sin->Real64 [macro]
      Math.sin( this.value )

    method tan->Real64 [macro]
      Math.tan( this.value )

    method to->String
      return "" + value

    method to->Degrees [macro]
      Degrees( this )
endClass


