class FileOptions( flags=0:Int32 ) [compound]
  ENUMERATE
    FLAG_RECURSIVE          = 1
    FLAG_OMIT_PATH          = 2
    FLAG_ABSOLUTE           = 4
    FLAG_FILES              = 8
    FLAG_FOLDERS            = 16
    FLAG_BOTH               = 24
    FLAG_IGNORE_HIDDEN      = 32

  METHODS
    method absolute->FileOptions [macro]
      FileOptions( this.flags | FileOptions.FLAG_ABSOLUTE )

    method ignore_hidden->FileOptions [macro]
      FileOptions( this.flags | FileOptions.FLAG_IGNORE_HIDDEN )

    method ignoring_hidden->Logical [macro]
      (this.flags & FileOptions.FLAG_IGNORE_HIDDEN)

    method is_files_and_folders->Logical
      local f = (flags & FLAG_BOTH)
      return (f == 0) or (f == FLAG_BOTH)

    method is_files->Logical
      return (flags & FLAG_FILES) or not (flags & FLAG_BOTH)

    method is_folders->Logical
      return (flags & FLAG_FOLDERS) or not (flags & FLAG_BOTH)

    method is_absolute->Logical [macro]
      (this.flags & FileOptions.FLAG_ABSOLUTE)

    method files->FileOptions [macro]
      FileOptions( this.flags | FileOptions.FLAG_FILES )

    method folders->FileOptions [macro]
      FileOptions( this.flags | FileOptions.FLAG_FOLDERS )

    method is_limited->Logical [macro]
      (not (this.flags & FileOptions.FLAG_RECURSIVE))

    method is_recursive->Logical [macro]
      (this.flags & FileOptions.FLAG_RECURSIVE)

    method is_relative->Logical [macro]
      (not (this.flags & FileOptions.FLAG_ABSOLUTE))

    method limited->FileOptions [macro]
      FileOptions( this.flags & !FileOptions.FLAG_RECURSIVE )

    method omit_path->FileOptions [macro]
      FileOptions( this.flags | FileOptions.FLAG_OMIT_PATH )

    method omitting_paths->Logical [macro]
      (this.flags & FileOptions.FLAG_OMIT_PATH)

    method relative->FileOptions [macro]
      FileOptions( this.flags & !FileOptions.FLAG_ABSOLUTE )

    method recursive->FileOptions [macro]
      FileOptions( this.flags | FileOptions.FLAG_RECURSIVE )

    method showing_hidden->FileOptions [macro]
      FileOptions( this.flags & !FileOptions.FLAG_IGNORE_HIDDEN )

    method shows_hidden->Logical [macro]
      (not (this.flags & FileOptions.FLAG_IGNORE_HIDDEN))

endClass

class File
  DEPENDENCIES
    nativeHeader #include <cstdio>

  GLOBAL METHODS
    method absolute_filepath( filepath:String )->String
      if (not filepath) return null

      if (not exists(filepath))
        local parent = path( filepath )
        if (parent.count == 0) parent = "."
        return "$/$" (absolute_filepath(parent),filename(filepath))
      endIf

      local return_value : String

      native @|#if defined(_WIN32)
              |{
              |  char long_name[PATH_MAX+4];
              |  char full_name[PATH_MAX+4];
              |
              |  if (GetInt64PathName((char*)$filepath->utf8, long_name, PATH_MAX+4) == 0)
              |  {
              |    strcpy_s( long_name, PATH_MAX+4, (char*)$filepath->utf8 );
              |  }
              |
              |  if (GetFullPathName(long_name, PATH_MAX+4, full_name, 0) != 0)
              |  {
              |    $return_value = RogueString_create_from_utf8( full_name, -1 );
              |  }
              |}
              |#else
              |{
              |  int original_dir_fd;
              |  int new_dir_fd;
              |  char filename[PATH_MAX];
              |  char c_filepath[ PATH_MAX ];
              |  bool is_folder;
              |
              |  is_folder = RogueFile__is_folder__String( $filepath );
              |
              |  int len = $filepath->byte_count;
              |  if (len >= PATH_MAX) len = PATH_MAX - 1;
              |  memcpy( c_filepath, (char*)$filepath->utf8, len );
              |  c_filepath[len] = 0;
              |
              |  // A way to get back to the starting folder when finished.
              |  original_dir_fd = open( ".", O_RDONLY );
              |
              |  if (is_folder)
              |  {
              |    filename[0] = 0;
              |  }
              |  else
              |  {
              |    // fchdir only works with a path, not a path+filename (c_filepath).
              |    // Copy out the filename and null terminate the filepath to be just a path.
              |    int i = (int) strlen( c_filepath ) - 1;
              |    while (i >= 0 && c_filepath[i] != '/') --i;
              |    strcpy( filename, c_filepath+i+1 );
              |    if (i == -1) strcpy( c_filepath, "." );
              |    else         c_filepath[i] = 0;
              |  }
              |  new_dir_fd = open( c_filepath, O_RDONLY );
              |
              |  do
              |  {
              |    if (original_dir_fd >= 0 && new_dir_fd >= 0)
              |    {
              |      int r = fchdir( new_dir_fd );
              |      if ( r != 0 ) break;
              |      char * r2 = getcwd( c_filepath, PATH_MAX );
              |      if ( r2 == 0 ) break;
              |      if ( !is_folder )
              |      {
              |        strcat( c_filepath, "/" );
              |        strcat( c_filepath, filename );
              |      }
              |      r = fchdir( original_dir_fd );
              |      if ( r != 0 ) break;
              |    }
              |
              |    $return_value = RogueString_create_from_utf8( c_filepath, -1 );
              |  } while (false);
              |
              |  if (original_dir_fd >= 0) close( original_dir_fd );
              |  if (new_dir_fd >= 0) close( new_dir_fd );
              |}
              |#endif
      if (return_value is null)
        throw IOError("Could not get absolute path")
      endIf
      return return_value

    method character_reader( filepath:String )->UTF8Reader [macro]
      UTF8Reader( File.reader(filepath) )

    method character_writer( filepath:String )->CharacterToUTF8ByteWriter [macro]
      CharacterToUTF8ByteWriter( File.writer(filepath) )

    method create_folder( filepath:String )->Logical
      # Creates the specified folder along with intermediate folders
      # if necessary.  Returns 'true' on success or if the filepath
      # already exists as a folder.  Returns 'false' on failure to
      filepath = File.absolute_filepath( filepath )

      # create or if the filepath already exists but is not a folder.
      if (File.exists(filepath)) return File.is_folder( filepath )

      # Check for the parent folder's existence and recursively create
      # that if necessary.
      local parent = File.path( filepath )
      if (not create_folder(parent)) return false

      # Note: 0777 is a permission mask rather than the actual permission setting.
      native @|return (0 == mkdir((char*)$filepath->utf8, 0777));

    method delete( filepath:String )->Logical
      if (not filepath) return false
      return (0 == native( "unlink( (const char*) $filepath->utf8 )")->Int32)

    method ends_with_separator( filepath:String )->Logical
      return (filepath.ends_with('/') or filepath.ends_with('\\'))

    method ensure_ends_with_separator( filepath:String )->String
      if (ends_with_separator(filepath)) return filepath
      return filepath + '/'

    method exists( filepath:String )->Logical
      native @|if ( !$filepath ) return false;
              |
              |FILE* fp = fopen( (char*)$filepath->utf8, "rb" );
              |if ( !fp ) return false;
              |
              |fclose( fp );
              |return true;

    method extension( filepath:String )->String
      return filepath.after_last( '.' )

    method filename( filepath:String )->String
      local i = filepath.locate_last( '/' )
      if (not i?) i = filepath.locate_last( '\\' )
      if (not i?) return filepath
      return filepath.from( i.value+1 )

    method is_folder( filepath:String )->Logical [essential]
      native @|if ( !$filepath ) return false;
              |
              |#if defined(_WIN32)
              |  char filepath_copy[PATH_MAX];
              |  strcpy( filepath_copy, (char*)$filepath->utf8 );
              |
              |  int path_len = $filepath->byte_count;
              |  int i = strlen(filepath_copy)-1;
              |  while (i > 0 && (filepath_copy[i] == '/' || filepath_copy[i] == '\\')) filepath_copy[i--] = 0;
              |
              |  // Windows allows dir\* to count as a directory; guard against.
              |  for (i=0; filepath_copy[i]; ++i)
              |  {
              |    if (filepath_copy[i] == '*' || filepath_copy[i] == '?') return 0;
              |  }
              |
              |  WIN32_FIND_DATA entry;
              |  HANDLE dir = FindFirstFile( filepath_copy, &entry );
              |  if (dir != INVALID_HANDLE_VALUE)
              |  {
              |    if (entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
              |    {
              |      FindClose( dir );
              |      return 1;
              |    }
              |  }
              |  FindClose( dir );
              |  return 0;
              |
              |#else
              |  DIR* dir = opendir( (char*)$filepath->utf8 );
              |  if ( !dir ) return 0;
              |
              |  closedir( dir );
              |  return 1;
              |#endif

    method listing( folder:String, &ignore_hidden, &recursive, &absolute, &omit_path )->String[]
      local options = FileOptions()
      if (ignore_hidden) options = options.ignore_hidden
      if (recursive)     options = options.recursive
      if (absolute)      options = options.absolute
      if (omit_path)     options = options.omit_path
      return listing( folder, options )

    method listing( folder:String, options:FileOptions )->String[]
      return listing( folder, options, "", String[] )

    method listing( folder:String, options:FileOptions, filepath:String, result:String[] )->String[]
      if (not options.omitting_paths)
        if (options.is_absolute)
          filepath = File.absolute_filepath( folder )  # add absolute path to every entry
          folder = ""
          options = options.omit_path
        else
          filepath = folder
          folder = ""
          options = options.omit_path
        endIf
      endIf

      if (folder.count and not (folder.ends_with('/') or folder.ends_with('\\')))
        folder += '/'
      endIf

      if (filepath.count and not (filepath.ends_with('/') or filepath.ends_with('\\')))
        filepath += '/'
      endIf

      local native_folder = folder + filepath

      if (not is_folder(native_folder)) return result

      native @|{
              |  DIR* dir;
              |  struct dirent* entry;
              |
              |  dir = opendir( (const char*) $native_folder->utf8 );
              |  if (dir)
              |  {
              |    entry = readdir( dir );
              |    while (entry)
              |    {
              |      int keep = 1;
              |      if (entry->d_name[0] == '.')
              |      {
              |        switch (entry->d_name[1])
              |        {
              |          case 0:
              |            keep = 0;
              |            break;
              |          case '.':
              |            keep = entry->d_name[2] != 0;
              |            break;
              |        }
              |      }
              |      if (keep)
              |      {
                       local entry = native("RogueString_create_from_utf8(entry->d_name,-1)")->String
                       local is_hidden = entry.begins_with('.')
                       entry = filepath + entry
                       if (not (is_hidden and options.ignoring_hidden))
                         local _is_folder = is_folder( folder + entry )
                         if (options.is_files_and_folders or
                             (_is_folder and options.is_folders) or
                             (not _is_folder and options.is_files))
                           result.add( entry )
                         endIf

                         if (_is_folder and options.is_recursive and entry.count)
                           listing( folder, options, entry, result )
                         endIf

                       endIf

      native @|
              |      }
              |      entry = readdir( dir );
              |    }
              |    closedir( dir );
              |  }
              |}

      return result


    method load_as_bytes( filepath:String )->Byte[]
      local count = size( filepath )
      local bytes = Byte[]( count )
      local infile = reader( filepath )
      forEach (1..count) bytes.add( infile.read )
      infile.close
      return bytes

    method load_as_string( filepath:String )->String
      local count = size( filepath )
      local buffer = StringBuilder( count )
      local infile = reader( filepath )
      forEach (1..count)
        local b = infile.read
        buffer.utf8.add( b )
        if ((b & 0xC0) != 0x80) ++buffer.count
      endForEach
      infile.close
      return buffer->String

    method options->FileOptions [macro]
      FileOptions()

    method path( filepath:String )->String
      local i = filepath.locate_last( '/' )
      if (not i?) i = filepath.locate_last( '\\' )
      if (not i?) return ""
      return filepath.from( 0, i.value-1 )

    method reader( filepath:String )->FileReader
      return FileReader( filepath )

    method save( filepath:String, data:Byte[] )->Logical
      local outfile = writer( filepath )
      outfile.write( data )
      outfile.close
      return not outfile.error

    method save( filepath:String, data:String )->Logical
      local outfile = writer( filepath )
      outfile.write( data )
      outfile.close
      return not outfile.error

    method save( filepath:String, data:StringBuilder )->Logical
      local outfile = writer( filepath )
      outfile.write( data )
      outfile.close
      return not outfile.error

    method size( filepath:String )->Int32
      native @|if ( !$filepath ) return 0;
              |
              |FILE* fp = fopen( (char*)$filepath->utf8, "rb" );
              |if ( !fp ) return 0;
              |
              |fseek( fp, 0, SEEK_END );
              |RogueInt32 size = (RogueInt32) ftell( fp );
              |fclose( fp );
              |
              |return size;

    method timestamp( filepath:String )->Real64
      # Returns the last modified time since Jan 1, 1970
      native @|#if defined(_WIN32)
              |  HANDLE handle = CreateFile( (const char*)$filepath->utf8, 0, 0, NULL, OPEN_EXISTING,
              |      FILE_ATTRIBUTE_NORMAL, NULL );
              |  if (handle != INVALID_HANDLE_VALUE)
              |  {
              |    BY_HANDLE_FILE_INFORMATION info;
              |    if (GetFileInformationByHandle( handle, &info ))
              |    {
              |      RogueInt64 result = info.ftLastWriteTime.dwHighDateTime;
              |      result <<= 32;
              |      result |= info.ftLastWriteTime.dwLowDateTime;
              |      result /= 10000; // convert from Crazyseconds to Milliseconds
              |      result -= 11644473600000;  // base on Jan 1, 1970 instead of Jan 1, 1601 (?!)
              |      CloseHandle(handle);
              |      return result / 1000.0;
              |    }
              |    CloseHandle(handle);
              |  }
              |
              |#elif defined(ROGUE_PLATFORM_UNIX_COMPATIBLE)
              |  int file_id = open( (const char*)$filepath->utf8, O_RDONLY );
              |  if (file_id >= 0)
              |  {
              |    struct stat info;
              |    if (0 == fstat(file_id, &info))
              |    {
              |#if defined(__APPLE__)
              |      RogueInt64 result = info.st_mtimespec.tv_sec;
              |      result *= 1000000000;
              |      result += info.st_mtimespec.tv_nsec;
              |      result /= 1000000;  // convert to milliseconds
              |#else
              |      RogueInt64 result = (RogueInt64) info.st_mtime;
              |      result *= 1000;  // convert to ms
              |#endif
              |      close(file_id);
              |      return result / 1000.0;
              |    }
              |    close(file_id);
              |  }
              |
              |#else
              |# error Must define File.timestamp() for this OS.
              |#endif
              |return 0.0;


    method writer( filepath:String )->FileWriter
      return FileWriter( filepath )

    method append_writer( filepath:String )->FileWriter
      return FileWriter( filepath, &append=true )

  PROPERTIES
    filepath : String

  METHODS
    method init( filepath )

    method absolute_filepath->String [macro]
      File.absolute_filepath( this.filepath )

    method character_reader->UTF8Reader [macro]
      UTF8Reader( this.reader )

    method character_writer->CharacterToUTF8ByteWriter [macro]
      CharacterToUTF8ByteWriter( this.writer )

    method create_folder->Logical [macro]
      File.create_folder( this.filepath )

    method ends_with_separator->Logical [macro]
      File.ends_with_separator( this.filepath )

    method ensure_ends_with_separator->this
      if (not ends_with_separator) filepath += '/'
      return this

    method delete->Logical [macro]
      File.delete( this.filepath )

    method exists->Logical [macro]
      File.exists( this.filepath )

    method extension->String [macro]
      File.extension( this.filepath )

    method filename->String
      return filename( filepath )

    method is_folder->Logical [macro]
      File.is_folder( this.filepath )

    method listing( &ignore_hidden, &recursive, &absolute )->String[] [macro]
      File.listing( this.filepath, ignore_hidden, recursive, absolute )

    method listing( options:FileOptions )->String[] [macro]
      File.listing( this.filepath, options )

    method load_as_bytes->Byte[] [macro]
      File.load_as_bytes( this.filepath )

    method load_as_string->String [macro]
      File.load_as_string( this.filepath )

    method path->String [macro]
      File.path( this.filepath )

    method reader->FileReader [macro]
      File.reader( this.filepath )

    method save( data:Byte[] )->Logical [macro]
      File.save( this.filepath, data )

    method save( data:String )->Logical [macro]
      File.save( this.filepath, data )

    method save( data:StringBuilder )->Logical [macro]
      File.save( this.filepath, data )

    method size->Int32 [macro]
      File.size( this.filepath )

    method timestamp->Real64 [macro]
      File.timestamp( this.filepath )

    method writer->FileWriter [macro]
      File.writer( this.filepath )

    method append_writer->FileWriter [macro]
      File.append_writer( this.filepath )

    method to->String
      return filepath
endClass

class FileReader : Reader<<Byte>>
  PROPERTIES
    filepath        : String
    count           : Int32
    position        : Int32
    buffer_position : Int32
    buffer          = Byte[](1024)
    native "FILE* fp;"

  METHODS
    method init( _filepath:String )
      open( _filepath )

    method clean_up
      close

    method close->this
      if (fp)
        native @|fclose( $this->fp );
                |$this->fp = 0;
      endIf

      position = 0
      count = 0
      return this

    method fp->Int32 [macro]
      native "$this->fp"

    method has_another->Logical
      return (position < count)

    method open( filepath )->Logical
      close

      native @|$this->fp = fopen( (char*)$filepath->utf8, "rb" );
              |if ($this->fp)
              |{
              |  fseek( $this->fp, 0, SEEK_END );
              |  $count = (RogueInt32) ftell( $this->fp );
              |  fseek( $this->fp, 0, SEEK_SET );
              |}

      # Always close after the last byte is read, so if there are no
      # bytes then close right away.
      if (count == 0) close

      return (position < count)

    method peek->Byte
      if (position == count) return 0

      if (buffer_position == buffer.count)
        native @|$buffer->count = (RogueInt32) fread( $buffer->data->as_bytes, 1, 1024, $this->fp );
        buffer_position = 0
      endIf

      return buffer[ buffer_position ]

    method read->Byte
      if (position == count) return 0

      local result = peek

      ++position
      ++buffer_position
      if (position == count) close

      return result

    method remaining->Int32
      return count - position

    method reset->this
      if (not fp) return this
      count = native( "(RogueInt32)ftell($this->fp)" )->Int32
      return seek( 0 )

    method seek( pos:Int32 )->this
      if (not fp) return this

      if (pos < 0) pos = 0
      if (pos > count) pos = count

      position = pos
      native "fseek( $this->fp, $position, SEEK_SET );"

      buffer_position = 0
      buffer.clear
      return this
endClass


class FileWriter : Writer<<Byte>>
  PROPERTIES
    filepath : String
    error    : Logical
    buffer   = Byte[](1024)
    native "FILE* fp;"

  METHODS
    method init( _filepath:String, append=false:Logical )
      open( _filepath, append )

    method clean_up
      close

    method close->this
      flush

      if (fp)
        native( "fclose( $this->fp ); $this->fp = 0;" )
      endIf

      return this

    method flush->this
      if (buffer.count == 0 or not fp) return this

      native @|fwrite( $buffer->data->as_bytes, 1, $buffer->count, $this->fp );
              |fflush( $this->fp );

      buffer.clear
      return this

    method fp->Int32 [macro]
      native( "$this->fp" )

    method open( filepath, append=false:Logical )->Logical
      close
      error = false

      if (append)
        native @|$this->fp = fopen( (char*)$filepath->utf8, "ab" );
      else
        native @|$this->fp = fopen( (char*)$filepath->utf8, "wb" );
      endIf

      native "$this->error = !($this->fp);"

      return error

    method reset->this
      if (not fp) return this
      flush
      return seek( 0 )

    method seek( pos:Int32 )->this
      if (not fp) return this
      flush
      if (pos < 0) pos = 0
      position = pos

      native "fseek( $this->fp, 0, SEEK_SET );"

      return this

    method seek_end()->this
      if (not fp) return this
      flush

      native "fseek( $this->fp, 0, SEEK_END );"
      position = native( "(RogueInt32)ftell( $this->fp )" )->Int32

      return this

    method write( ch:Byte )->this
      if (not fp) return this

      ++position
      buffer.add( ch )
      if (buffer.count == 1024) return flush

      return this

    method write( bytes:Byte[] )->this
      if (not fp) return this

      if (bytes.count < 1024)
        forEach (byte in bytes) write( byte )
      else
        flush
        position += bytes.count
        native @|fwrite( $bytes->data->as_bytes, 1, $bytes->count, $this->fp );
      endIf
      return this

    method write( data:String )->this
      if (not fp) return this

      if (data.count < 1024)
        forEach (i in 0..<data.byte_count) write( data.byte(i) )
      else
        flush
        position += data.byte_count
        native @|fwrite( $data->utf8, 1, $data->byte_count, $this->fp );
      endIf
      return this

    method write( builder:StringBuilder )->this
      return write( builder.utf8 )
endClass
