module ParseKit<<$Language>>
uses $Language

class TokenReader
  PROPERTIES
    tokens   : Token[]
    position : Int32

  METHODS
    method init( tokens )

    method consume( token_type:TokenType )->Logical
      if (not has_another) return token_type == TokenType.EOI
      if (peek.type != token_type) return false
      read
      return true

    method consume_eols->Logical
      local consumed_any = false
      while (consume(TokenType.EOL)) consumed_any = true
      return consumed_any

    method has_another->Logical
      return (position < tokens.count)

    method must_consume( token_type:TokenType )
      if (consume(token_type)) return
      throw peek.error( "$ expected, found $." (token_type.description,peek.description) )

    method next_is( token_type:TokenType )->Logical
      if (not has_another) return token_type == TokenType.EOI
      return (peek.type == token_type)

    method peek->Token
      if (position == tokens.count) return Token( TokenType.EOI ).set_position( tokens.last )
      return tokens[ position ]

    method peek( lookahead:Int32 )->Token
      local i = position + lookahead
      if (i >= tokens.count) return Token( TokenType.EOI ).set_position( tokens.last )
      return tokens[ i ]

    method read->Token
      if (position == tokens.count) return Token( TokenType.EOI ).set_position( tokens.last )
      ++position
      return tokens[ position - 1 ]
endClass

