module ParseKit<<$Language>>
uses $Language

$localDefine TokenizerType $join($Language,Tokenizer)
$localDefine ParserType    $join($Language,Parser)
$localDefine ErrorType $join($Language,Error)

class Parser
  PROPERTIES
    rules     = StringTable<<ParseRule>>()
    prev_rule : ParseRule  # add_nested() uses this
    reader    : TokenReader

    parse_source : ParseRule


  METHODS # Rule creation
    method add( rule:ParseRule )->ParseRule
      rules[ rule.name ] = rule
      prev_rule = rule
      rule.parser = this as ParserType

      # Assign rule "xyz" to parse property "parse_xyz" if it exits
      local p = type_info.find_property( "parse_" + rule.name )
      if (p)
        introspector.set( p, Value(rule) )
      endIf

      return rule

    method add_nested( rule:ParseRule )->ParseRule
      if (prev_rule) prev_rule.nested = rule
      return add( rule )


  METHODS # Parsing
    method consume( token_type:TokenType )->Logical [macro]
      this.reader.consume( token_type )

    method consume_eols->Logical [macro]
      this.reader.consume_eols

    method create_tokenizer->TokenizerType
      return TokenizerType()

    method has_another->Logical [macro]
      this.reader.has_another

    method must_consume( token_type:TokenType ) [macro]
      this.reader.must_consume( token_type )

    method next_is( token_type:TokenType )->Logical [macro]
      this.reader.next_is( token_type )

    method open( file:File )->this
      reader = TokenReader( create_tokenizer.tokenize(file) )
      return this

    method open( filename:String, source:String )->this
      reader = TokenReader( create_tokenizer.tokenize(filename,source) )
      return this

    method parse( file:File )->Cmd
      open( file )
      if (not parse_source) throw ErrorType( ''No ParseRule("source") has been defined via add() or add_nested().'' )
      return parse_source()

    method parse( filename:String, source:String )->Cmd
      open( filename, source )
      if (not parse_source) throw ErrorType( ''No ParseRule("source") has been defined via add() or add_nested().'' )
      return parse_source()

    method parse( rule_name:String )->Cmd
      local rule = rules[ rule_name ]
      if (rule)
        return rule()
      else
        throw ErrorType( "[INTERNAL] No such parse rule: $." (rule_name) )
      endIf

    method peek->Token [macro]
      this.reader.peek

    method peek( lookahead:Int32 )->Token [macro]
      this.reader.peek( lookahead )

    method read->Token [macro]
      this.reader.read


endClass

