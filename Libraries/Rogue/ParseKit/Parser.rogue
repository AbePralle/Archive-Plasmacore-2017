module ParseKit

class Parser
  PROPERTIES
    reader    : TokenReader
    rules     = StringTable<<ParseRule>>()
    prev_rule : ParseRule

  METHODS
    method add( rule:ParseRule )->ParseRule
      rules[ rule.name ] = rule
      prev_rule = rule
      rule.parser = this as $ParserType

      # Assign rule "xyz" to parse property "parse_xyz" if it exits
      local p = type_info.find_property( "parse_" + rule.name )
      if (p)
        introspector.set( p, Value(rule) )
      endIf

      return rule

    method chain( rule:ParseRule )->ParseRule
      if (prev_rule) prev_rule.next = rule
      return add( rule )

    method consume( token_type:TokenType )->Logical [macro]
      this.reader.consume( token_type )

    method create_rule( name:String )->ParseRule
      return ParseRule(name)

    method create_rule( name:String, default_fn:Function(ParseRule)->Cmd )->ParseRule
      local result = ParseRule(name)
      result.on_default( default_fn )
      return result

    method create_binary_rule( name:String )->ParseRule
      return BinaryParseRule(name)

    method create_tokenizer->Tokenizer
      return Tokenizer()

    method has_another->Logical [macro]
      this.reader.has_another

    method must_consume( token_type:TokenType ) [macro]
      this.reader.must_consume( token_type )

    method open( file:File )->this
      reader = TokenReader( create_tokenizer.tokenize(file) )
      return this

    method open( filename:String, source:String )->this
      reader = TokenReader( create_tokenizer.tokenize(filename,source) )
      return this

    method parse( file:File )
      open( file )
      parse( "program" )

    method parse( filename:String, source:String )
      open( filename, source )
      parse( "program" )

    method parse( rule_name:String )->Cmd
      local rule = rules[ rule_name ]
      if (rule)
        return rule()
      else
        throw ParseError( "[INTERNAL] No such parse rule: $." (rule_name) )
      endIf

    method peek->Token [macro]
      this.reader.peek

    method peek( lookahead:Int32 )->Token [macro]
      this.reader.peek( lookahead )

    method read->Token [macro]
      this.reader.read


endClass

