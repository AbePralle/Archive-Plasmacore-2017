module ParseKit<<$Language>>
uses $Language

$localDefine TokenizerType $join($Language,Tokenizer)

class ScanRule
  PROPERTIES
    symbol              : String
    is_single_character : Logical
    next                : ScanRule
    token_type          : TokenType
    fn                  : Function(TokenizerType)

  METHODS
    method init( symbol, token_type )
      configure

    method init( symbol, fn )
      configure

    method configure
      is_single_character = (symbol.count == 1)

    method insert( other:ScanRule )->ScanRule
      # this.symbol and other.symbol will both start with the same character
      # Organize things so that the longer symbol 'next' is the shorter symbol
      # Returns the new head of the list
      if (symbol == other.symbol)
        # Replace 'this' scan rule with 'other'
        other.next = next
        return other
      elseIf (other.symbol.count >= symbol.count)
        # Other comes before this
        other.next = this
        return other
      elseIf (next)
        next = next.insert( other )
      else
        next = other
      endIf
      return this

    method call( tokenizer:TokenizerType )->Logical
      # This set of rules is tied to the next character from the scanner so
      # we already know that the first character matches.
      local cur = this
      while (cur)
        contingent
          if (cur.is_single_character)
            tokenizer.read # will be the right one for sure
          else
            necessary (tokenizer.consume(cur.symbol))
          endIf

        satisfied
          if (cur.fn)
            cur.fn( tokenizer )
          else
            cur.tokenize( tokenizer )
          endIf
          return true
        endContingent
        cur = cur.next
      endWhile
      return false

    method tokenize( tokenizer:TokenizerType )
      tokenizer.tokens.add( Token(token_type) )

endClass

